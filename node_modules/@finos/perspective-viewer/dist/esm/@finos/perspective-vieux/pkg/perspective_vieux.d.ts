/* tslint:disable */
/* eslint-disable */
/**
* Copy a flat (unpivoted with all columns) CSV to the clipboard.
* @param {any} table
* @returns {Promise<any>}
*/
export function copy_flat(table: any): Promise<any>;
/**
* Copy a `PerspectiveJsView` to the clipboard as a CSV.
* @param {any} view
* @returns {Promise<any>}
*/
export function copy(view: any): Promise<any>;
/**
* Download a flat (unpivoted with all columns) CSV.
* @param {any} table
* @returns {Promise<any>}
*/
export function download_flat(table: any): Promise<any>;
/**
* Download a CSV
* @param {any} view
* @returns {Promise<any>}
*/
export function download(view: any): Promise<any>;
/**
*/
export function set_panic_hook(): void;
/**
*/
export class PerspectiveColumnStyleElement {
  free(): void;
/**
* @param {HTMLElement} elem
* @param {any} js_config
* @param {any} js_def_config
*/
  constructor(elem: HTMLElement, js_config: any, js_def_config: any);
/**
* Reset to a provided JSON config, to be used in place of `new()` when 
* re-using this component.
* 
* # Arguments
* * `config` - a `ColumnStyle` config in JSON form.
* @param {any} config
*/
  reset(config: any): void;
/**
* Dispatches to `ModalElement::open(target)`
* 
* # Arguments
* `target` - the relative target to pin this `ModalElement` to.
* @param {HTMLElement} target
*/
  open(target: HTMLElement): void;
/**
* Remove this `ModalElement` from the DOM.
*/
  close(): void;
/**
* DOM lifecycle method when connected.  We don't use this, as it can fire during
* innocuous events like re-parenting.
*/
  connected_callback(): void;
}
/**
*/
export class PerspectiveExpressionEditorElement {
  free(): void;
}
/**
* A `customElements` external API.
*/
export class PerspectiveVieuxElement {
  free(): void;
/**
* @param {HTMLElement} elem
*/
  constructor(elem: HTMLElement);
/**
*/
  connected_callback(): void;
/**
* @param {Promise<any>} table
* @returns {Promise<any>}
*/
  load(table: Promise<any>): Promise<any>;
/**
* @param {any} view
*/
  set_view(view: any): void;
/**
*/
  delete_view(): void;
/**
* Toggle (or force) the config panel open/closed.
* @param {boolean | undefined} force
* @returns {Promise<any>}
*/
  toggle_config(force?: boolean): Promise<any>;
/**
* Opens an expression editor at the `target` position, by first creating a
* `perspective-expression-editor` custom element, then creating the model.
* @param {HTMLElement} target
*/
  _open_expression_editor(target: HTMLElement): void;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly copy_flat: (a: number) => number;
  readonly copy: (a: number) => number;
  readonly __wbg_perspectivecolumnstyleelement_free: (a: number) => void;
  readonly perspectivecolumnstyleelement_new: (a: number, b: number, c: number) => number;
  readonly perspectivecolumnstyleelement_reset: (a: number, b: number) => void;
  readonly perspectivecolumnstyleelement_open: (a: number, b: number) => void;
  readonly perspectivecolumnstyleelement_close: (a: number) => void;
  readonly perspectivecolumnstyleelement_connected_callback: (a: number) => void;
  readonly __wbg_perspectivevieuxelement_free: (a: number) => void;
  readonly perspectivevieuxelement_new: (a: number) => number;
  readonly perspectivevieuxelement_connected_callback: (a: number) => void;
  readonly perspectivevieuxelement_load: (a: number, b: number) => number;
  readonly perspectivevieuxelement_set_view: (a: number, b: number) => void;
  readonly perspectivevieuxelement_delete_view: (a: number) => void;
  readonly perspectivevieuxelement_toggle_config: (a: number, b: number) => number;
  readonly perspectivevieuxelement__open_expression_editor: (a: number, b: number) => void;
  readonly download_flat: (a: number) => number;
  readonly download: (a: number) => number;
  readonly __wbg_perspectiveexpressioneditorelement_free: (a: number) => void;
  readonly set_panic_hook: () => void;
  readonly __wbindgen_malloc: (a: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
  readonly __wbindgen_export_2: WebAssembly.Table;
  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__ha8da8002c169ddf8: (a: number, b: number) => void;
  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h682947d435137099: (a: number, b: number) => number;
  readonly _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h47a52c086ccc7044: (a: number, b: number, c: number) => void;
  readonly _dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hd9fba7ec79082aef: (a: number, b: number, c: number) => void;
  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h29ab9179a040a95a: (a: number, b: number) => void;
  readonly _dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h6cfed8d4542b4998: (a: number, b: number, c: number) => number;
  readonly _dyn_core__ops__function__Fn__A_B_C___Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h7ff31fcc9f8eba82: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly _dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h2af6eca208f313ab: (a: number, b: number, c: number) => void;
  readonly _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hf2cc493c64efc39d: (a: number, b: number, c: number) => void;
  readonly _dyn_core__ops__function__FnMut___A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h8f37c59924c17c85: (a: number, b: number, c: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
  readonly __wbindgen_free: (a: number, b: number) => void;
  readonly wasm_bindgen__convert__closures__invoke2_mut__h01a9b6309dd6d7db: (a: number, b: number, c: number, d: number) => void;
}

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
        