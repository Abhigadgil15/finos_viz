{"version":3,"sources":["../../../../src/js/series/sunburst/sunburstColor.js"],"names":["flattenExtent","seriesColorRange","seriesColorsFromDistinct","treeColor","settings","data","realValues","length","color_column","mainValues","find","x","name","type","colors","map","d","filter","height","getColors","reduce","a","b","concat","extents","nodes","children","forEach","child","color","push"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,QAA4B,oBAA5B;AACA,SAAQC,gBAAR,QAA+B,gBAA/B;AACA,SAAQC,wBAAR,QAAuC,iBAAvC;AAEA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,IAA7B,EAAmC;AACtC,MAAID,QAAQ,CAACE,UAAT,CAAoBC,MAApB,GAA6B,CAA7B,IAAkCH,QAAQ,CAACE,UAAT,CAAoB,CAApB,MAA2B,IAAjE,EAAuE;AAAA;;AACnE,UAAME,YAAY,GAAGJ,QAAQ,CAACE,UAAT,CAAoB,CAApB,CAArB;;AACA,QAAI,0BAAAF,QAAQ,CAACK,UAAT,CAAoBC,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAWJ,YAAzC,iFAAwDK,IAAxD,MAAiE,QAArE,EAA+E;AAC3E,YAAMC,MAAM,GAAGT,IAAI,CACdU,GADU,CACNC,CAAC,IAAIA,CAAC,CAACX,IADD,EAEVY,MAFU,CAEHN,CAAC,IAAIA,CAAC,CAACO,MAAF,GAAW,CAFb,EAGVH,GAHU,CAGNJ,CAAC,IAAIQ,SAAS,CAACR,CAAD,CAHR,EAIVS,MAJU,CAIH,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,MAAF,CAASD,CAAT,CAJP,CAAf;AAKA,aAAOpB,wBAAwB,CAACE,QAAD,EAAWU,MAAX,CAA/B;AACH,KAPD,MAOO;AACH,aAAOb,gBAAgB,CAACG,QAAD,EAAW,IAAX,EAAiB,IAAjB,EAAuBJ,aAAa,CAACK,IAAI,CAACU,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACQ,OAAhB,CAAD,CAApC,CAAvB;AACH;AACJ;AACJ,C,CAED;;AACA,SAASL,SAAT,CAAmBM,KAAnB,EAA0BX,MAAM,GAAG,EAAnC,EAAuC;AACnCW,EAAAA,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAenB,MAAf,GAAwB,CAA1C,GAA8CkB,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,KAAK,IAAId,MAAM,CAACS,MAAP,CAAcJ,SAAS,CAACS,KAAD,EAAQd,MAAR,CAAvB,CAAhC,CAA9C,GAAyHW,KAAK,CAACpB,IAAN,CAAWwB,KAAX,IAAoBf,MAAM,CAACgB,IAAP,CAAYL,KAAK,CAACpB,IAAN,CAAWwB,KAAvB,CAA7I;AACA,SAAOf,MAAP;AACH","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {flattenExtent} from \"../../axis/flatten\";\nimport {seriesColorRange} from \"../seriesRange\";\nimport {seriesColorsFromDistinct} from \"../seriesColors\";\n\nexport function treeColor(settings, data) {\n    if (settings.realValues.length > 1 && settings.realValues[1] !== null) {\n        const color_column = settings.realValues[1];\n        if (settings.mainValues.find(x => x.name === color_column)?.type === \"string\") {\n            const colors = data\n                .map(d => d.data)\n                .filter(x => x.height > 0)\n                .map(x => getColors(x))\n                .reduce((a, b) => a.concat(b));\n            return seriesColorsFromDistinct(settings, colors);\n        } else {\n            return seriesColorRange(settings, null, null, flattenExtent(data.map(d => d.extents)));\n        }\n    }\n}\n\n// only get the colors from the bottom level (e.g. nodes with no children)\nfunction getColors(nodes, colors = []) {\n    nodes.children && nodes.children.length > 0 ? nodes.children.forEach(child => colors.concat(getColors(child, colors))) : nodes.data.color && colors.push(nodes.data.color);\n    return colors;\n}\n"],"file":"sunburstColor.js"}