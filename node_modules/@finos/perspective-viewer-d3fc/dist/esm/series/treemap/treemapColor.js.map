{"version":3,"sources":["../../../../src/js/series/treemap/treemapColor.js"],"names":["seriesColorRange","seriesColorsFromDistinct","treeColor","settings","data","realValues","length","color_column","colors","filter","x","height","map","getColors","reduce","a","b","concat","mainValues","find","name","type","min","Math","max","nodes","children","forEach","child","color","push"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,gBAAR,QAA+B,gBAA/B;AACA,SAAQC,wBAAR,QAAuC,iBAAvC;AAEA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,IAA7B,EAAmC;AAAA;;AACtC,MAAID,QAAQ,CAACE,UAAT,CAAoBC,MAApB,GAA6B,CAA7B,IAAkCH,QAAQ,CAACE,UAAT,CAAoB,CAApB,MAA2B,IAAjE,EAAuE;AACvE,QAAME,YAAY,GAAGJ,QAAQ,CAACE,UAAT,CAAoB,CAApB,CAArB;AACA,QAAMG,MAAM,GAAGJ,IAAI,CACdK,MADU,CACHC,CAAC,IAAIA,CAAC,CAACC,MAAF,GAAW,CADb,EAEVC,GAFU,CAENF,CAAC,IAAIG,SAAS,CAACH,CAAD,CAFR,EAGVI,MAHU,CAGH,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,MAAF,CAASD,CAAT,CAHP,CAAf;;AAIA,MAAI,0BAAAb,QAAQ,CAACe,UAAT,CAAoBC,IAApB,CAAyBT,CAAC,IAAIA,CAAC,CAACU,IAAF,KAAWb,YAAzC,iFAAwDc,IAAxD,MAAiE,QAArE,EAA+E;AAC3E,WAAOpB,wBAAwB,CAACE,QAAD,EAAWK,MAAX,CAA/B;AACH,GAFD,MAEO;AACH,QAAIc,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,GAAGd,MAAZ,CAAV;AACA,QAAIgB,GAAG,GAAGD,IAAI,CAACC,GAAL,CAAS,GAAGhB,MAAZ,CAAV;AACA,WAAOR,gBAAgB,CAACG,QAAD,EAAW,IAAX,EAAiB,IAAjB,EAAuB,CAACmB,GAAD,EAAME,GAAN,CAAvB,CAAvB;AACH;AACJ,C,CAED;;AACA,SAASX,SAAT,CAAmBY,KAAnB,EAA0BjB,MAAM,GAAG,EAAnC,EAAuC;AACnCiB,EAAAA,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAepB,MAAf,GAAwB,CAA1C,GAA8CmB,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,KAAK,IAAIpB,MAAM,CAACS,MAAP,CAAcJ,SAAS,CAACe,KAAD,EAAQpB,MAAR,CAAvB,CAAhC,CAA9C,GAAyHiB,KAAK,CAACrB,IAAN,CAAWyB,KAAX,IAAoBrB,MAAM,CAACsB,IAAP,CAAYL,KAAK,CAACrB,IAAN,CAAWyB,KAAvB,CAA7I;AACA,SAAOrB,MAAP;AACH","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {seriesColorRange} from \"../seriesRange\";\nimport {seriesColorsFromDistinct} from \"../seriesColors\";\n\nexport function treeColor(settings, data) {\n    if (settings.realValues.length < 1 || settings.realValues[1] === null) return;\n    const color_column = settings.realValues[1];\n    const colors = data\n        .filter(x => x.height > 0)\n        .map(x => getColors(x))\n        .reduce((a, b) => a.concat(b));\n    if (settings.mainValues.find(x => x.name === color_column)?.type === \"string\") {\n        return seriesColorsFromDistinct(settings, colors);\n    } else {\n        let min = Math.min(...colors);\n        let max = Math.max(...colors);\n        return seriesColorRange(settings, null, null, [min, max]);\n    }\n}\n\n// only get the colors from the bottom level (e.g. nodes with no children)\nfunction getColors(nodes, colors = []) {\n    nodes.children && nodes.children.length > 0 ? nodes.children.forEach(child => colors.concat(getColors(child, colors))) : nodes.data.color && colors.push(nodes.data.color);\n    return colors;\n}\n"],"file":"treemapColor.js"}