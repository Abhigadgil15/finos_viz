{"version":3,"sources":["../../../src/js/charts/area.js"],"names":["fc","axisFactory","chartSvgFactory","axisSplitter","AXIS_TYPES","areaSeries","seriesColors","splitAndBaseData","colorLegend","filterData","withGridLines","hardLimitZeroPadding","zoomableChart","nearbyTip","areaChart","container","settings","data","color","legend","scale","series","seriesSvgRepeat","orient","xAxis","excludeType","linear","settingName","valueName","yAxisFactory","ordinal","include","paddingStrategy","splitter","yAxis1","plotSeries","haveSplit","chart","plotArea","yNice","zoomChart","xScale","toolTip","yScale","yAxis2","altData","altAxis","altDataWithScale","datum","call","plugin","type","name","max_cells","max_columns","render_warning"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport * as fc from \"d3fc\";\nimport {axisFactory} from \"../axis/axisFactory\";\nimport {chartSvgFactory} from \"../axis/chartFactory\";\nimport {axisSplitter} from \"../axis/axisSplitter\";\nimport {AXIS_TYPES} from \"../axis/axisType\";\nimport {areaSeries} from \"../series/areaSeries\";\nimport {seriesColors} from \"../series/seriesColors\";\nimport {splitAndBaseData} from \"../data/splitAndBaseData\";\nimport {colorLegend} from \"../legend/legend\";\nimport {filterData} from \"../legend/filter\";\nimport withGridLines from \"../gridlines/gridlines\";\n\nimport {hardLimitZeroPadding} from \"../d3fc/padding/hardLimitZero\";\nimport zoomableChart from \"../zoom/zoomableChart\";\nimport nearbyTip from \"../tooltip/nearbyTip\";\n\nfunction areaChart(container, settings) {\n    const data = splitAndBaseData(settings, filterData(settings));\n\n    const color = seriesColors(settings);\n    const legend = colorLegend()\n        .settings(settings)\n        .scale(color);\n\n    const series = fc.seriesSvgRepeat().series(areaSeries(settings, color).orient(\"vertical\"));\n\n    const xAxis = axisFactory(settings)\n        .excludeType(AXIS_TYPES.linear)\n        .settingName(\"crossValues\")\n        .valueName(\"crossValue\")(data);\n    const yAxisFactory = axisFactory(settings)\n        .settingName(\"mainValues\")\n        .valueName(\"mainValue\")\n        .excludeType(AXIS_TYPES.ordinal)\n        .orient(\"vertical\")\n        .include([0])\n        .paddingStrategy(hardLimitZeroPadding());\n\n    // Check whether we've split some values into a second y-axis\n    const splitter = axisSplitter(settings, data).color(color);\n\n    const yAxis1 = yAxisFactory(splitter.data());\n\n    // No grid lines if splitting y-axis\n    const plotSeries = splitter.haveSplit() ? series : withGridLines(series, settings).orient(\"vertical\");\n\n    const chart = chartSvgFactory(xAxis, yAxis1)\n        .axisSplitter(splitter)\n        .plotArea(plotSeries);\n\n    chart.yNice && chart.yNice();\n\n    const zoomChart = zoomableChart()\n        .chart(chart)\n        .settings(settings)\n        .xScale(xAxis.scale);\n\n    const toolTip = nearbyTip()\n        .settings(settings)\n        .xScale(xAxis.scale)\n        .yScale(yAxis1.scale)\n        .color(color)\n        .data(data);\n\n    if (splitter.haveSplit()) {\n        // Create the y-axis data for the alt-axis\n        const yAxis2 = yAxisFactory(splitter.altData());\n        chart.altAxis(yAxis2);\n        // Give the tooltip the information (i.e. 2 datasets with different\n        // scales)\n        toolTip.data(splitter.data()).altDataWithScale({yScale: yAxis2.scale, data: splitter.altData()});\n    }\n\n    // render\n    container.datum(splitter.data()).call(zoomChart);\n    container.call(toolTip);\n    container.call(legend);\n}\nareaChart.plugin = {\n    type: \"d3_y_area\",\n    name: \"Y Area Chart\",\n    max_cells: 4000,\n    max_columns: 50,\n    render_warning: true\n};\n\nexport default areaChart;\n"],"file":"area.js"}