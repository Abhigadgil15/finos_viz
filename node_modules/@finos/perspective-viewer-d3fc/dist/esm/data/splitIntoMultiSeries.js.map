{"version":3,"sources":["../../../src/js/data/splitIntoMultiSeries.js"],"names":["splitIntoMultiSeries","settings","data","stack","excludeEmpty","useData","splitValues","length","splitByValuesIntoMultiSeries","multiSeries","forEach","col","baseValues","split","Object","keys","filter","key","undefined","labels","label","value","baseKey","splitName","slice","join","__ROW_PATH__","baseValue","__KEY__","row","series","push","map","k"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nexport function splitIntoMultiSeries(settings, data, {stack = false, excludeEmpty = false} = {}) {\n    const useData = data || settings.data;\n\n    if (settings.splitValues.length > 0) {\n        return splitByValuesIntoMultiSeries(settings, useData, {stack, excludeEmpty});\n    }\n    return [useData];\n}\n\nfunction splitByValuesIntoMultiSeries(settings, data, {stack = false, excludeEmpty = false}) {\n    // Create a series for each \"split\" value, each one containing all the\n    // \"aggregate\" values, and \"base\" values to offset it from the previous\n    // series\n    const multiSeries = {};\n\n    data.forEach(col => {\n        // Split this column by \"split\", including multiple aggregates for each\n        const baseValues = {};\n        const split = {};\n\n        // Keys are of the form \"split1|split2|aggregate\"\n        Object.keys(col)\n            .filter(key => key !== \"__ROW_PATH__\")\n            .filter(key => !excludeEmpty || (col[key] != null && col[key] != undefined))\n            .forEach(key => {\n                const labels = key.split(\"|\");\n                // label=\"aggregate\"\n                const label = labels[labels.length - 1];\n                const value = col[key] || 0;\n                const baseKey = `${label}${value >= 0 ? \"+ve\" : \"-ve\"}`;\n                // splitName=\"split1|split2\"\n                const splitName = labels.slice(0, labels.length - 1).join(\"|\");\n\n                // Combine aggregate values for the same split in a single\n                // object\n                const splitValues = (split[splitName] = split[splitName] || {__ROW_PATH__: col.__ROW_PATH__});\n                const baseValue = baseValues[baseKey] || 0;\n\n                splitValues.__KEY__ = splitName;\n\n                // Assign the values for this split/aggregate\n                if (stack) {\n                    splitValues[label] = baseValue + value;\n                    splitValues[`__BASE_VALUE__${label}`] = baseValue;\n                    baseValues[baseKey] = splitValues[label];\n                } else {\n                    splitValues[label] = value;\n                }\n                splitValues.row = col;\n            });\n\n        // Push each object onto the correct series\n        Object.keys(split).forEach(splitName => {\n            const series = (multiSeries[splitName] = multiSeries[splitName] || []);\n            series.push(split[splitName]);\n        });\n    });\n\n    return Object.keys(multiSeries).map(k => {\n        const series = multiSeries[k];\n        series.key = k;\n        return series;\n    });\n}\n"],"file":"splitIntoMultiSeries.js"}