{"version":3,"sources":["../../../src/js/data/treeData.js"],"names":["d3","toValue","treeData","settings","sets","real_aggs","realValues","map","x","mainValues","find","y","name","data","forEach","d","j","groups","__ROW_PATH__","splits","getSplitNames","split","currentLevel","group","i","element","e","children","push","length","is_leaf","colorValue","getDataValue","agg_paths","undefined","color","tooltip","slice","crossValues","size","Object","entries","set","tree","root","hierarchy","sum","chartData","partition","Math","PI","height","each","current","value","concat","filter","crossValue","ancestors","reverse","cross","join","key","label","depth","type","extents","getExtents","aggregate","min","max","keys","splitValue","includes"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,SAAQC,OAAR,QAAsB,0BAAtB;AAEA,OAAO,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC/B,QAAMC,IAAI,GAAG,EAAb;AACA,QAAMC,SAAS,GAAGF,QAAQ,CAACG,UAAT,CAAoBC,GAApB,CAAwBC,CAAC,IAAKA,CAAC,KAAK,IAAN,GAAa,IAAb,GAAoBL,QAAQ,CAACM,UAAT,CAAoBC,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAWJ,CAAzC,CAAlD,CAAlB;AACAL,EAAAA,QAAQ,CAACU,IAAT,CAAcC,OAAd,CAAsB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC5B,UAAMC,MAAM,GAAGF,CAAC,CAACG,YAAjB;AACA,UAAMC,MAAM,GAAGC,aAAa,CAACL,CAAD,CAA5B;AACAI,IAAAA,MAAM,CAACL,OAAP,CAAeO,KAAK,IAAI;AACpB,UAAIC,YAAJ;;AACA,UAAI,CAAClB,IAAI,CAACiB,KAAD,CAAT,EAAkB;AACdjB,QAAAA,IAAI,CAACiB,KAAD,CAAJ,GAAc,EAAd;AACH;;AACDC,MAAAA,YAAY,GAAGlB,IAAI,CAACiB,KAAD,CAAnB;AACAJ,MAAAA,MAAM,CAACH,OAAP,CAAe,CAACS,KAAD,EAAQC,CAAR,KAAc;AACzB,YAAIC,OAAO,GAAGH,YAAY,CAACZ,IAAb,CAAkBgB,CAAC,IAAIA,CAAC,CAACd,IAAF,KAAWW,KAAlC,CAAd;;AACA,YAAI,CAACE,OAAL,EAAc;AACVA,UAAAA,OAAO,GAAG;AAACb,YAAAA,IAAI,EAAEW,KAAP;AAAcI,YAAAA,QAAQ,EAAE;AAAxB,WAAV;AACAL,UAAAA,YAAY,CAACM,IAAb,CAAkBH,OAAlB;AACH;;AACD,YAAItB,QAAQ,CAACG,UAAT,CAAoBuB,MAApB,GAA6B,CAA7B,IAAkC1B,QAAQ,CAACG,UAAT,CAAoB,CAApB,MAA2B,IAAjE,EAAuE;AACnE,gBAAMwB,OAAO,GAAGN,CAAC,KAAKP,MAAM,CAACY,MAAP,GAAgB,CAAtC;AACA,gBAAME,UAAU,GAAGD,OAAO,GAAGE,YAAY,CAACjB,CAAD,EAAIZ,QAAQ,CAACM,UAAT,CAAoB,CAApB,CAAJ,EAA4BY,KAA5B,CAAf,GAAoDW,YAAY,CAAC7B,QAAQ,CAAC8B,SAAT,CAAmBjB,CAAnB,EAAsBQ,CAAC,GAAG,CAA1B,KAAgCT,CAAjC,EAAoCZ,QAAQ,CAACM,UAAT,CAAoB,CAApB,CAApC,EAA4DY,KAA5D,CAA1F;;AACA,cAAIU,UAAU,KAAKG,SAAnB,EAA8B;AAC1BT,YAAAA,OAAO,CAACU,KAAR,GAAgBJ,UAAhB;AACH;AACJ;;AACD,YAAI5B,QAAQ,CAACG,UAAT,CAAoBuB,MAApB,GAA6B,CAA7B,IAAkC1B,QAAQ,CAACG,UAAT,CAAoB,CAApB,MAA2B,IAAjE,EAAuE;AACnEmB,UAAAA,OAAO,CAACW,OAAR,GAAkB,EAAlB;;AACA,eAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,QAAQ,CAACG,UAAT,CAAoBuB,MAAxC,EAAgD,EAAEL,CAAlD,EAAqD;AACjDC,YAAAA,OAAO,CAACW,OAAR,CAAgBR,IAAhB,CAAqBI,YAAY,CAACjB,CAAD,EAAIV,SAAS,CAACmB,CAAD,CAAb,EAAkBH,KAAlB,CAAjC;AACH;AACJ;;AACD,YAAIG,CAAC,KAAKP,MAAM,CAACY,MAAP,GAAgB,CAA1B,EAA6B;AACzBJ,UAAAA,OAAO,CAACb,IAAR,GAAeK,MAAM,CAACoB,KAAP,CAAa,CAAC,CAAd,EAAiB,CAAjB,CAAf;;AACA,cAAIpB,MAAM,CAACY,MAAP,KAAkB1B,QAAQ,CAACmC,WAAT,CAAqBT,MAA3C,EAAmD;AAC/C,kBAAMU,IAAI,GAAGP,YAAY,CAACjB,CAAD,EAAIZ,QAAQ,CAACM,UAAT,CAAoB,CAApB,CAAJ,EAA4BY,KAA5B,CAAzB;AACAI,YAAAA,OAAO,CAACc,IAAR,GAAeA,IAAI,GAAG,CAAP,GAAWA,IAAX,GAAkB,CAAjC;AACH;AACJ;;AACDjB,QAAAA,YAAY,GAAGG,OAAO,CAACE,QAAvB;AACH,OA3BD;AA4BH,KAlCD;AAmCH,GAtCD;AAwCA,QAAMd,IAAI,GAAG2B,MAAM,CAACC,OAAP,CAAerC,IAAf,EAAqBG,GAArB,CAAyBmC,GAAG,IAAI;AACzC,UAAMC,IAAI,GAAG;AAAC/B,MAAAA,IAAI,EAAE,MAAP;AAAee,MAAAA,QAAQ,EAAEe,GAAG,CAAC,CAAD;AAA5B,KAAb;AACA,UAAME,IAAI,GAAG5C,EAAE,CAAC6C,SAAH,CAAaF,IAAb,EAAmBG,GAAnB,CAAuB/B,CAAC,IAAIA,CAAC,CAACwB,IAA9B,CAAb;AACA,UAAMQ,SAAS,GAAG/C,EAAE,CAACgD,SAAH,GAAeT,IAAf,CAAoB,CAAC,IAAIU,IAAI,CAACC,EAAV,EAAcN,IAAI,CAACO,MAAL,GAAc,CAA5B,CAApB,EAAoDP,IAApD,CAAlB;AACAG,IAAAA,SAAS,CAACK,IAAV,CAAerC,CAAC,IAAI;AAChBA,MAAAA,CAAC,CAACsC,OAAF,GAAYtC,CAAZ;AACAA,MAAAA,CAAC,CAACN,UAAF,GACIN,QAAQ,CAACG,UAAT,CAAoBuB,MAApB,KAA+B,CAA/B,IAAqC1B,QAAQ,CAACG,UAAT,CAAoB,CAApB,MAA2B,IAA3B,IAAmCH,QAAQ,CAACG,UAAT,CAAoB,CAApB,MAA2B,IAAnG,GACMS,CAAC,CAACuC,KADR,GAEM,CAACvC,CAAC,CAACuC,KAAH,EAAUvC,CAAC,CAACF,IAAF,CAAOsB,KAAjB,EAAwBoB,MAAxB,CAA+BxC,CAAC,CAACF,IAAF,CAAOuB,OAAP,IAAkB,EAAjD,EAAqDoB,MAArD,CAA4DhD,CAAC,IAAIA,CAAC,KAAK0B,SAAvE,CAHV;AAIAnB,MAAAA,CAAC,CAAC0C,UAAF,GAAe1C,CAAC,CACX2C,SADU,GAEVrB,KAFU,CAEJ,CAFI,EAED,CAAC,CAFA,EAGVsB,OAHU,GAIVpD,GAJU,CAINqD,KAAK,IAAIA,KAAK,CAAC/C,IAAN,CAAWD,IAJd,EAKViD,IALU,CAKL,GALK,CAAf;AAMA9C,MAAAA,CAAC,CAAC+C,GAAF,GAAQpB,GAAG,CAAC,CAAD,CAAX;AACA3B,MAAAA,CAAC,CAACgD,KAAF,GAAU9D,OAAO,CAACE,QAAQ,CAACmC,WAAT,CAAqBvB,CAAC,CAACiD,KAAF,GAAU,CAAV,GAAc,CAAd,GAAkB,CAAlB,GAAsBjD,CAAC,CAACiD,KAAF,GAAU,CAArD,EAAwDC,IAAzD,EAA+DlD,CAAC,CAACF,IAAF,CAAOD,IAAtE,CAAjB;AACH,KAdD;AAgBA,WAAO;AACHS,MAAAA,KAAK,EAAEqB,GAAG,CAAC,CAAD,CADP;AAEH7B,MAAAA,IAAI,EAAEkC,SAFH;AAGHmB,MAAAA,OAAO,EAAEC,UAAU,CAAChE,QAAD,EAAWuC,GAAX;AAHhB,KAAP;AAKH,GAzBY,CAAb;AA2BA,SAAO7B,IAAP;AACH;AAED,OAAO,MAAMmB,YAAY,GAAG,CAACjB,CAAD,EAAIqD,SAAJ,EAAe/C,KAAf,KAA0BA,KAAK,CAACQ,MAAN,GAAed,CAAC,CAAE,GAAEM,KAAM,IAAG+C,SAAS,CAACxD,IAAK,EAA5B,CAAhB,GAAiDG,CAAC,CAACqD,SAAS,CAACxD,IAAX,CAAjG;;AAEP,SAASuD,UAAT,CAAoBhE,QAApB,EAA8B,CAACkB,KAAD,EAAQR,IAAR,CAA9B,EAA6C;AACzC,MAAIV,QAAQ,CAACG,UAAT,CAAoBuB,MAApB,GAA6B,CAA7B,IAAkC1B,QAAQ,CAACG,UAAT,CAAoB,CAApB,MAA2B,IAAjE,EAAuE;AACnE,UAAM+D,GAAG,GAAGpB,IAAI,CAACoB,GAAL,CAAS,GAAGlE,QAAQ,CAACU,IAAT,CAAcN,GAAd,CAAkBQ,CAAC,IAAIiB,YAAY,CAACjB,CAAD,EAAIZ,QAAQ,CAACM,UAAT,CAAoB,CAApB,CAAJ,EAA4BY,KAA5B,CAAnC,CAAZ,CAAZ;AACA,UAAMiD,GAAG,GAAGrB,IAAI,CAACqB,GAAL,CAAS,GAAGzD,IAAI,CAACN,GAAL,CAASQ,CAAC,IAAIA,CAAC,CAACoB,KAAhB,CAAZ,CAAZ;AACA,WAAO,CAACkC,GAAD,EAAMC,GAAN,CAAP;AACH;AACJ;;AAED,SAASlD,aAAT,CAAuBL,CAAvB,EAA0B;AACtB,QAAMI,MAAM,GAAG,EAAf;AACAqB,EAAAA,MAAM,CAAC+B,IAAP,CAAYxD,CAAZ,EAAeD,OAAf,CAAuBgD,GAAG,IAAI;AAC1B,QAAIA,GAAG,KAAK,cAAZ,EAA4B;AACxB,YAAMU,UAAU,GAAGV,GAAG,CACjBzC,KADc,CACR,GADQ,EAEdgB,KAFc,CAER,CAFQ,EAEL,CAAC,CAFI,EAGdwB,IAHc,CAGT,GAHS,CAAnB;;AAIA,UAAI,CAAC1C,MAAM,CAACsD,QAAP,CAAgBD,UAAhB,CAAL,EAAkC;AAC9BrD,QAAAA,MAAM,CAACS,IAAP,CAAY4C,UAAZ;AACH;AACJ;AACJ,GAVD;AAWA,SAAOrD,MAAP;AACH","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport * as d3 from \"d3\";\nimport {toValue} from \"../tooltip/selectionData\";\n\nexport function treeData(settings) {\n    const sets = {};\n    const real_aggs = settings.realValues.map(x => (x === null ? null : settings.mainValues.find(y => y.name === x)));\n    settings.data.forEach((d, j) => {\n        const groups = d.__ROW_PATH__;\n        const splits = getSplitNames(d);\n        splits.forEach(split => {\n            let currentLevel;\n            if (!sets[split]) {\n                sets[split] = [];\n            }\n            currentLevel = sets[split];\n            groups.forEach((group, i) => {\n                let element = currentLevel.find(e => e.name === group);\n                if (!element) {\n                    element = {name: group, children: []};\n                    currentLevel.push(element);\n                }\n                if (settings.realValues.length > 1 && settings.realValues[1] !== null) {\n                    const is_leaf = i === groups.length - 1;\n                    const colorValue = is_leaf ? getDataValue(d, settings.mainValues[1], split) : getDataValue(settings.agg_paths[j][i + 1] || d, settings.mainValues[1], split);\n                    if (colorValue !== undefined) {\n                        element.color = colorValue;\n                    }\n                }\n                if (settings.realValues.length > 2 && settings.realValues[2] !== null) {\n                    element.tooltip = [];\n                    for (let i = 2; i < settings.realValues.length; ++i) {\n                        element.tooltip.push(getDataValue(d, real_aggs[i], split));\n                    }\n                }\n                if (i === groups.length - 1) {\n                    element.name = groups.slice(-1)[0];\n                    if (groups.length === settings.crossValues.length) {\n                        const size = getDataValue(d, settings.mainValues[0], split);\n                        element.size = size > 0 ? size : 0;\n                    }\n                }\n                currentLevel = element.children;\n            });\n        });\n    });\n\n    const data = Object.entries(sets).map(set => {\n        const tree = {name: \"root\", children: set[1]};\n        const root = d3.hierarchy(tree).sum(d => d.size);\n        const chartData = d3.partition().size([2 * Math.PI, root.height + 1])(root);\n        chartData.each(d => {\n            d.current = d;\n            d.mainValues =\n                settings.realValues.length === 1 || (settings.realValues[1] === null && settings.realValues[2] === null)\n                    ? d.value\n                    : [d.value, d.data.color].concat(d.data.tooltip || []).filter(x => x !== undefined);\n            d.crossValue = d\n                .ancestors()\n                .slice(0, -1)\n                .reverse()\n                .map(cross => cross.data.name)\n                .join(\"|\");\n            d.key = set[0];\n            d.label = toValue(settings.crossValues[d.depth - 1 < 0 ? 0 : d.depth - 1].type, d.data.name);\n        });\n\n        return {\n            split: set[0],\n            data: chartData,\n            extents: getExtents(settings, set)\n        };\n    });\n\n    return data;\n}\n\nexport const getDataValue = (d, aggregate, split) => (split.length ? d[`${split}|${aggregate.name}`] : d[aggregate.name]);\n\nfunction getExtents(settings, [split, data]) {\n    if (settings.realValues.length > 1 && settings.realValues[1] !== null) {\n        const min = Math.min(...settings.data.map(d => getDataValue(d, settings.mainValues[1], split)));\n        const max = Math.max(...data.map(d => d.color));\n        return [min, max];\n    }\n}\n\nfunction getSplitNames(d) {\n    const splits = [];\n    Object.keys(d).forEach(key => {\n        if (key !== \"__ROW_PATH__\") {\n            const splitValue = key\n                .split(\"|\")\n                .slice(0, -1)\n                .join(\"|\");\n            if (!splits.includes(splitValue)) {\n                splits.push(splitValue);\n            }\n        }\n    });\n    return splits;\n}\n"],"file":"treeData.js"}