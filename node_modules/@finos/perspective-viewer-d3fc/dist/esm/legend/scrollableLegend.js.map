{"version":3,"sources":["../../../src/js/legend/scrollableLegend.js"],"names":["d3Legend","rebindAll","getOrCreateElement","legendControlsTemplate","cropCellContents","draggableComponent","resizableComponent","averageCellHeightPx","controlsHeightPx","fromLegend","settings","legend","legendColor","domain","pageCount","pageSize","pageIndex","decorate","draggable","resizable","scrollableLegend","selection","scale","maxHeight","length","on","render","calculatePageSize","renderControls","renderLegend","controls","getLegendControls","style","select","text","attr","setPage","cellFilter","remove","legendElement","getLegendElement","call","cellContainerSize","node","getBBox","height","index","_","i","legendContainerRect","getBoundingClientRect","proposedPageSize","Math","floor","calculatePageCount","min","ceil","container","append","html","args"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport * as d3Legend from \"d3-svg-legend\";\nimport {rebindAll} from \"d3fc\";\nimport {getOrCreateElement} from \"../utils/utils\";\nimport legendControlsTemplate from \"../../html/legend-controls.html\";\nimport {cropCellContents} from \"./styling/cropCellContents\";\nimport {draggableComponent} from \"./styling/draggableComponent\";\nimport {resizableComponent} from \"./styling/resizableComponent\";\n\nconst averageCellHeightPx = 16;\nconst controlsHeightPx = 20;\n\nexport default (fromLegend, settings) => {\n    const legend = fromLegend || d3Legend.legendColor();\n\n    let domain = [];\n    let pageCount = 1;\n    let pageSize;\n    let pageIndex = settings.legend && settings.legend.pageIndex ? settings.legend.pageIndex : 0;\n    let decorate = () => {};\n    let draggable = draggableComponent().settings(settings);\n    let resizable;\n\n    const scrollableLegend = selection => {\n        domain = legend.scale().domain();\n\n        resizable = resizableComponent()\n            .settings(settings)\n            .maxHeight(domain.length * averageCellHeightPx + controlsHeightPx)\n            .on(\"resize\", () => render(selection));\n\n        resizable(selection);\n        draggable(selection);\n        render(selection);\n    };\n\n    const render = selection => {\n        calculatePageSize(selection);\n        renderControls(selection);\n        renderLegend(selection);\n        cropCellContents(selection);\n    };\n\n    const renderControls = selection => {\n        const controls = getLegendControls(selection);\n        controls.style(\"display\", pageCount <= 1 ? \"none\" : \"block\");\n\n        controls.select(\"#page-text\").text(`${pageIndex + 1}/${pageCount}`);\n\n        controls\n            .select(\"#up-arrow\")\n            .attr(\"class\", pageIndex === 0 ? \"disabled\" : \"\")\n            .on(\"click\", () => {\n                if (pageIndex > 0) {\n                    setPage(pageIndex - 1);\n                    render(selection);\n                }\n            });\n\n        controls\n            .select(\"#down-arrow\")\n            .attr(\"class\", pageIndex >= pageCount - 1 ? \"disabled\" : \"\")\n            .on(\"click\", () => {\n                if (pageIndex < pageCount - 1) {\n                    setPage(pageIndex + 1);\n                    render(selection);\n                }\n            });\n    };\n\n    const renderLegend = selection => {\n        if (pageCount > 1) legend.cellFilter(cellFilter());\n        selection.select(\"g.legendCells\").remove();\n\n        const legendElement = getLegendElement(selection);\n        legendElement.call(legend);\n\n        const cellContainerSize = selection\n            .select(\"g.legendCells\")\n            .node()\n            .getBBox();\n        legendElement.attr(\"height\", cellContainerSize.height + controlsHeightPx);\n\n        decorate(selection);\n    };\n\n    const setPage = index => {\n        pageIndex = index;\n        settings.legend = {...settings.legend, pageIndex};\n    };\n\n    const cellFilter = () => (_, i) => i >= pageSize * pageIndex && i < pageSize * pageIndex + pageSize;\n\n    const calculatePageSize = selection => {\n        const legendContainerRect = selection.node().getBoundingClientRect();\n        let proposedPageSize = Math.floor(legendContainerRect.height / averageCellHeightPx) - 1;\n\n        // if page size is less than all legend items, leave space for the\n        // legend controls\n        pageSize = proposedPageSize < domain.length ? proposedPageSize - 1 : proposedPageSize;\n        pageCount = calculatePageCount(proposedPageSize);\n        pageIndex = Math.min(pageIndex, pageCount - 1);\n    };\n\n    const calculatePageCount = pageSize => Math.ceil(domain.length / pageSize);\n\n    const getLegendControls = container =>\n        getOrCreateElement(container, \".legend-controls\", () =>\n            container\n                .append(\"g\")\n                .attr(\"class\", \"legend-controls\")\n                .html(legendControlsTemplate)\n        );\n\n    const getLegendElement = container => getOrCreateElement(container, \".legend\", () => container.append(\"svg\").attr(\"class\", \"legend\"));\n\n    scrollableLegend.decorate = (...args) => {\n        if (!args.length) {\n            return decorate;\n        }\n        decorate = args[0];\n        return scrollableLegend;\n    };\n\n    rebindAll(scrollableLegend, legend);\n\n    return scrollableLegend;\n};\n"],"file":"scrollableLegend.js"}