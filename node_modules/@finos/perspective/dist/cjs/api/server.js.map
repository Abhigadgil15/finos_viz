{"version":3,"sources":["../../../src/js/api/server.js"],"names":["obj","Object","key","error","constructor","init","msg","override_config","post","process","id","data","msgs","table","name","eval","g","f","tableMsgQueue","Array","view","view_name","process_subscribe","callback","ev","result","console","method","remove_method","JSON","process_method_call","message","process_method_call_response","process_error","error_to_json","clear_views","length"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {override_config} from \"../config\";\n\nfunction error_to_json(error) {\n    const obj = {};\n    if (typeof error !== \"string\") {\n        Object.getOwnPropertyNames(error).forEach(key => {\n            obj[key] = error[key];\n        }, error);\n    } else {\n        obj[\"message\"] = error;\n    }\n    return obj;\n}\n\n/**\n * The base class for Perspective's async API. It initializes and keeps track of\n * tables, views, and processes messages from the user into the Perspective\n * engine.\n *\n * Child classes must implement the `post()` interface, which defines how the\n * server sends messages to the client. The implementation of `Server` for\n * Web Workers can be found in `perspective.js`, and an implementation for\n * Node.JS can be found in `perspective.node.js`.\n */\nexport class Server {\n    constructor(perspective) {\n        this.perspective = perspective;\n        this._tables = {};\n        this._views = {};\n        this._callback_cache = new Map();\n    }\n\n    /**\n     * Return an initialization message to the client for confirmation.\n     * `Server` must be extended and the `post` method implemented before the\n     * server can successfully be initialized.\n     */\n    init(msg) {\n        if (msg.config) {\n            override_config(msg.config);\n        }\n\n        // The client will wait for a response message on table() and\n        // view(). If this flag is not set, the table() and view()\n        // constructors will resolve automatically and errors from the\n        // server will not be caught in those constructors. This allows\n        // for backwards compatibility between newer frontends (those\n        // with async table/view constructors) and older servers (which\n        // do not send the response message to the client).\n        msg.data = [\"wait_for_response\"];\n\n        this.post(msg);\n    }\n\n    /**\n     * Send a message from the Perspective server to the Perspective client -\n     * this method must be implemented before the server can be used.\n     *\n     * @param {Object} msg a message to be sent to the client.\n     */\n    post(msg) {\n        throw new Error(`Posting ${msg} failed - post() not implemented!`);\n    }\n\n    /**\n     * Given a message, execute its instructions. This method is the dispatcher\n     * for all Perspective actions, including table/view creation, deletion, and\n     * all method calls to/from the table and view.\n     *\n     * @param {*} msg an Object containing `cmd` (a String instruction) and\n     * associated data for that instruction\n     * @param {*} client_id\n     */\n    process(msg, client_id) {\n        switch (msg.cmd) {\n            case \"init_profile_thread\":\n                this.perspective.initialize_profile_thread();\n                break;\n            case \"memory_usage\":\n                this.post({\n                    id: msg.id,\n                    data: this.perspective.memory_usage()\n                });\n                break;\n            case \"init\":\n                this.init(msg);\n                break;\n            case \"table\":\n                if (typeof msg.args[0] === \"undefined\") {\n                    // Cache messages for when a table is created but not fully\n                    // initialized, i.e. in the case when a table is created\n                    // from a view, as the view needs to be serialized to an\n                    // arrow before the table will be ready.\n                    this._tables[msg.name] = [];\n                } else {\n                    try {\n                        const msgs = this._tables[msg.name];\n                        const table = this.perspective.table(msg.args[0], msg.options);\n\n                        // When using the Node server, the `table()` constructor\n                        // returns a Promise, but in the Web Worker version,\n                        // table() synchronously returns an instance of a Table.\n                        if (table && table.then) {\n                            table\n                                .then(table => {\n                                    this._tables[msg.name] = table;\n\n                                    // Process cached messages for this table.\n                                    if (msgs) {\n                                        for (const msg of msgs) {\n                                            this.process(msg);\n                                        }\n                                    }\n\n                                    // Resolve the promise to return a Table.\n                                    this.post({\n                                        id: msg.id,\n                                        data: msg.name\n                                    });\n                                })\n                                .catch(error => this.process_error(msg, error));\n                        } else {\n                            this._tables[msg.name] = table;\n\n                            // Process cached messages for this table.\n                            if (msgs) {\n                                for (const msg of msgs) {\n                                    this.process(msg);\n                                }\n                            }\n\n                            // Resolve the promise to return a Table.\n                            this.post({\n                                id: msg.id,\n                                data: msg.name\n                            });\n                        }\n                    } catch (error) {\n                        this.process_error(msg, error);\n                        return;\n                    }\n                }\n                break;\n            case \"table_generate\":\n                let g;\n                eval(\"g = \" + msg.args);\n                g(function(tbl) {\n                    this._tables[msg.name] = tbl;\n                    this.post({\n                        id: msg.id,\n                        data: \"created!\"\n                    });\n                });\n                break;\n            case \"table_execute\":\n                let f;\n                eval(\"f = \" + msg.f);\n                f(this._tables[msg.name]);\n                break;\n            case \"table_method\":\n            case \"view_method\":\n                this.process_method_call(msg);\n                break;\n            case \"view\":\n                const tableMsgQueue = this._tables[msg.table_name];\n\n                if (tableMsgQueue && Array.isArray(tableMsgQueue)) {\n                    // If the table is not initialized, defer this message for\n                    // until after the table is initialized, and create a new\n                    // message queue for the uninitialized view.\n                    tableMsgQueue.push(msg);\n                    this._views[msg.view_name] = [];\n                } else {\n                    // Create a new view and resolve the Promise on the client\n                    // with the name of the view, which the client will use to\n                    // construct a new view proxy.\n                    try {\n                        const msgs = this._views[msg.view_name];\n\n                        // When using the Node server, the `view()` constructor\n                        // returns a Promise, but in the Web Worker version,\n                        // view() synchronously returns an instance of a View.\n                        const view = this._tables[msg.table_name].view(msg.config);\n\n                        if (view && view.then) {\n                            view.then(view => {\n                                this._views[msg.view_name] = view;\n                                this._views[msg.view_name].client_id = client_id;\n\n                                // Process cached messages for the view.\n                                if (msgs) {\n                                    for (const msg of msgs) {\n                                        this.process(msg);\n                                    }\n                                }\n\n                                this.post({\n                                    id: msg.id,\n                                    data: msg.view_name\n                                });\n                            }).catch(error => this.process_error(msg, error));\n                        } else {\n                            this._views[msg.view_name] = view;\n                            this._views[msg.view_name].client_id = client_id;\n\n                            // Process cached messages for the view.\n                            if (msgs) {\n                                for (const msg of msgs) {\n                                    this.process(msg);\n                                }\n                            }\n\n                            this.post({\n                                id: msg.id,\n                                data: msg.view_name\n                            });\n                        }\n                    } catch (error) {\n                        this.process_error(msg, error);\n                        return;\n                    }\n                }\n                break;\n        }\n    }\n\n    /**\n     * Execute a subscription to a Perspective event, such as `on_update` or\n     * `on_delete`.\n     */\n    process_subscribe(msg, obj) {\n        try {\n            let callback;\n            if (msg.method.slice(0, 2) === \"on\") {\n                callback = ev => {\n                    let result = {\n                        id: msg.id,\n                        data: ev\n                    };\n                    try {\n                        // post transferable data for arrow\n                        if (msg.args && msg.args[0]) {\n                            if (msg.method === \"on_update\" && msg.args[0][\"mode\"] === \"row\") {\n                                // actual arrow is in the `delta`\n                                this.post(result, [ev.delta]);\n                                return;\n                            }\n                        }\n\n                        this.post(result);\n                    } catch (e) {\n                        console.error(`Removing failed callback to \\`${msg.method}()\\` (presumably due to failed connection)`);\n                        const remove_method = msg.method.substring(3);\n                        obj[`remove_${remove_method}`](callback);\n                    }\n                };\n                if (msg.callback_id) {\n                    this._callback_cache.set(msg.callback_id, callback);\n                }\n            } else if (msg.callback_id) {\n                callback = this._callback_cache.get(msg.callback_id);\n                this._callback_cache.delete(msg.callback_id);\n            }\n            if (callback) {\n                obj[msg.method](callback, ...msg.args);\n            } else {\n                console.error(`Callback not found for remote call \"${JSON.stringify(msg)}\"`);\n            }\n        } catch (error) {\n            this.process_error(msg, error);\n            return;\n        }\n    }\n\n    /**\n     * Given a message that calls a table or view method, call the method and\n     * return the result to the client, or return an error message to the\n     * client.\n     *\n     * @param {Object} msg\n     */\n    process_method_call(msg) {\n        let obj, result;\n        const name = msg.view_name || msg.name;\n        msg.cmd === \"table_method\" ? (obj = this._tables[name]) : (obj = this._views[name]);\n\n        if (!obj && msg.cmd === \"view_method\") {\n            // cannot have a host without a table, but can have a host without a\n            // view\n            this.process_error(msg, {message: \"View method cancelled\"});\n            return;\n        }\n\n        if (obj && obj.push) {\n            obj.push(msg);\n            return;\n        }\n\n        try {\n            if (msg.subscribe) {\n                this.process_subscribe(msg, obj);\n                return;\n            } else {\n                result = obj[msg.method].apply(obj, msg.args);\n                if (result instanceof Promise) {\n                    result.then(result => this.process_method_call_response(msg, result)).catch(error => this.process_error(msg, error));\n                } else {\n                    this.process_method_call_response(msg, result);\n                }\n            }\n        } catch (error) {\n            this.process_error(msg, error);\n            return;\n        }\n    }\n\n    /**\n     * Send the response from a method call back to the client, using\n     * transferables if the response is an Arrow binary.\n     * @param {Object} msg\n     * @param {*} result\n     */\n    process_method_call_response(msg, result) {\n        if (msg.method === \"delete\") {\n            delete this._views[msg.name];\n        }\n        if (msg.method === \"to_arrow\") {\n            this.post(\n                {\n                    id: msg.id,\n                    data: result\n                },\n                [result]\n            );\n        } else {\n            this.post({\n                id: msg.id,\n                data: result\n            });\n        }\n    }\n\n    /**\n     * Send an error to the client.\n     */\n    process_error(msg, error) {\n        this.post({\n            id: msg.id,\n            error: error_to_json(error)\n        });\n    }\n\n    /**\n     * Garbage collect un-needed views.\n     */\n    clear_views(client_id) {\n        for (let key of Object.keys(this._views)) {\n            if (this._views[key].client_id === client_id) {\n                try {\n                    this._views[key].delete();\n                } catch (e) {\n                    console.error(e);\n                }\n                delete this._views[key];\n            }\n        }\n        console.debug(`GC ${Object.keys(this._views).length} views in memory`);\n    }\n}\n"],"file":"server.js"}