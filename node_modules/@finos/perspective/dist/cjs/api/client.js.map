{"version":3,"sources":["../../../src/js/api/client.js"],"names":["constructor","initialized","value","transferable","msg_id","handlers","messages","bindall","unsubscribe","Object","post","keep_alive","resolve","msg","cmd","initialize_profile_thread","id","send","open_table","_handle","event","document","window","msgs","e","handler","table","options","terminate"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {table, proxy_table} from \"./table_api.js\";\nimport {bindall} from \"../utils.js\";\n\n/**\n * Perspective's worker API handles and processes asynchronous messages,\n * interfacing with the Perspective host class.  Child classes must implement\n * the `send()` interface, which defines how messages are dispatched in\n * different contexts.  `handlers` is a dictionary of resolve/reject callbacks\n * for each method the worker receives.\n *\n * @export\n */\nexport class Client {\n    constructor() {\n        this._initialized = false;\n        this._worker = {\n            initialized: {value: false},\n            transferable: false,\n            msg_id: 0,\n            handlers: {},\n            messages: []\n        };\n        bindall(this);\n    }\n\n    /**\n     * Remove a listener for a Perspective-generated event.\n     */\n    unsubscribe(cmd, handler) {\n        for (let key of Object.keys(this._worker.handlers)) {\n            if (this._worker.handlers[key].resolve === handler) {\n                delete this._worker.handlers[key];\n            }\n        }\n    }\n\n    /**\n     * Send a message to the server.\n     */\n    post(msg, resolve, reject, keep_alive = false) {\n        ++this._worker.msg_id;\n        if (resolve || reject) {\n            this._worker.handlers[this._worker.msg_id] = {resolve, reject, keep_alive};\n        }\n        msg.id = this._worker.msg_id;\n        if (this._worker.initialized.value) {\n            this.send(msg);\n        } else {\n            this._worker.messages.push(() => {\n                this.send(msg);\n\n                if ((msg.cmd === \"table\" || msg.cmd === \"view\") && !this._features?.wait_for_response && resolve) {\n                    resolve();\n                }\n            });\n        }\n    }\n\n    /**\n     * Snapshots memory usage from the WebWorker or Node.js process, with the\n     * addition of `wasmHeap` Emscripten's linear memory\n     * @async\n     * @returns {MemoryUsage}\n     */\n    async memory_usage() {\n        return await new Promise((resolve, reject) => {\n            this.post({cmd: \"memory_usage\"}, resolve, reject);\n        });\n    }\n\n    initialize_profile_thread() {\n        if (this._worker.initialized.value) {\n            this.send({id: -1, cmd: \"init_profile_thread\"});\n        } else {\n            this._worker.messages.push(() => this.send({id: -1, cmd: \"init_profile_thread\"}));\n        }\n    }\n\n    /**\n     * Must be implemented in order to transport commands to the server.\n     */\n    send() {\n        throw new Error(\"send() not implemented\");\n    }\n\n    /**\n     * Given the name of a table that is hosted on the server (e.g. using\n     * `perspective-python` or `perspective` in NodeJS), return a `table`\n     * instance that sends all operations and instructions to the `table` on the\n     * server.\n     *\n     * @param {string} name\n     */\n    open_table(name) {\n        return new proxy_table(this, name);\n    }\n\n    /**\n     * Receive a message from the server, and resolve/reject the promise that\n     * is awaiting the content of the message.\n     */\n    _handle(e) {\n        if (!this._worker.initialized.value) {\n            if (!this._initialized && typeof document !== \"undefined\" && document && typeof window !== undefined && window) {\n                try {\n                    const event = document.createEvent(\"Event\");\n                    event.initEvent(\"perspective-ready\", false, true);\n                    window.dispatchEvent(event);\n                } catch (e) {}\n                this._initialized = true;\n            }\n\n            const msgs = this._worker.messages;\n            this._worker.initialized.value = true;\n            this._worker.messages = [];\n\n            // If the `data` attribute of the init message is set, then\n            // set the `features` dictionary with the flags from the server.\n            if (e.data?.data) {\n                this._features = {};\n\n                for (const feature of e.data.data) {\n                    this._features[feature] = true;\n                }\n            }\n\n            if (msgs) {\n                for (const m in msgs) {\n                    if (msgs.hasOwnProperty(m)) {\n                        msgs[m]();\n                    }\n                }\n            }\n        }\n\n        if (e.data.id) {\n            const handler = this._worker.handlers[e.data.id];\n\n            if (handler) {\n                if (e.data.error) {\n                    handler.reject(e.data.error);\n                } else {\n                    handler.resolve(e.data.data);\n                }\n\n                if (!handler.keep_alive) {\n                    delete this._worker.handlers[e.data.id];\n                }\n            }\n        }\n    }\n\n    table(data, options) {\n        return new table(this, data, options || {});\n    }\n\n    terminate() {\n        this._worker.terminate();\n        this._worker = undefined;\n    }\n}\n"],"file":"client.js"}