{"version":3,"sources":["../../../src/js/api/view_api.js"],"names":["Math","cmd","view_name","table_name","config","resolve","proxy_view","view","async_queue","subscribe","unsubscribe"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {subscribe, unsubscribe, async_queue} from \"./dispatch.js\";\n\n/**\n * Construct a proxy for the view object by creating a \"view\" message and\n * sending it through the worker.\n *\n * @param {*} worker\n * @param {*} table_name\n * @param {*} config\n */\nexport function view(worker, table_name, config) {\n    return new Promise((resolve, reject) => {\n        this._worker = worker;\n        this._name = Math.random() + \"\";\n\n        this._worker.post(\n            {\n                cmd: \"view\",\n                view_name: this._name,\n                table_name: table_name,\n                config: config\n            },\n            () => {\n                // Resolve the Promise with this function, which is a proxy\n                // view that dispatches all view methods to the backend, i.e.\n                // a Web Worker or a Python/Node Perspective server. Because\n                // arrow functions automatically capture `this` from the\n                // surrounding scope, there is no need to explicitly bind the\n                // resolving value to `this`.\n                resolve(this);\n            },\n            reject\n        );\n\n        if (this._worker._initialized === true && !this._worker._features?.wait_for_response) {\n            resolve(this);\n        }\n    });\n}\n\n/**\n * Create a reference to a view located on `worker` for use by remote clients.\n *\n * @param {worker} worker the Web Worker at which the view is located.\n * @param {String} name a unique name for the view.\n */\nexport function proxy_view(worker, name) {\n    this._worker = worker;\n    this._name = name;\n}\n\nproxy_view.prototype = view.prototype;\n\n// Send view methods that do not create new objects (getters, setters etc.) to\n// the queue for processing.\n\nview.prototype.get_config = async_queue(\"get_config\");\n\nview.prototype.get_min_max = async_queue(\"get_min_max\");\n\nview.prototype.to_json = async_queue(\"to_json\");\n\nview.prototype.to_arrow = async_queue(\"to_arrow\");\n\nview.prototype.to_columns = async_queue(\"to_columns\");\n\nview.prototype.to_csv = async_queue(\"to_csv\");\n\nview.prototype.schema = async_queue(\"schema\");\n\nview.prototype.expression_schema = async_queue(\"expression_schema\");\n\nview.prototype.column_paths = async_queue(\"column_paths\");\n\nview.prototype.num_columns = async_queue(\"num_columns\");\n\nview.prototype.num_rows = async_queue(\"num_rows\");\n\nview.prototype.set_depth = async_queue(\"set_depth\");\n\nview.prototype.get_row_expanded = async_queue(\"get_row_expanded\");\n\nview.prototype.expand = async_queue(\"expand\");\n\nview.prototype.collapse = async_queue(\"collapse\");\n\nview.prototype.delete = async_queue(\"delete\");\n\nview.prototype.col_to_js_typed_array = async_queue(\"col_to_js_typed_array\");\n\nview.prototype.on_update = subscribe(\"on_update\", \"view_method\", true);\n\nview.prototype.remove_update = unsubscribe(\"remove_update\", \"view_method\", true);\n\nview.prototype.on_delete = subscribe(\"on_delete\", \"view_method\", true);\n\nview.prototype.remove_delete = unsubscribe(\"remove_delete\", \"view_method\", true);\n"],"file":"view_api.js"}