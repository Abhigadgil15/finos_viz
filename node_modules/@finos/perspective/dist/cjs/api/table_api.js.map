{"version":3,"sources":["../../../src/js/api/table_api.js"],"names":["options","Math","bindall","data","cmd","name","args","arrow","updated","mode","resolve","table","proxy_table","async_queue","subscribe","unsubscribe","method","f"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {unsubscribe, subscribe, async_queue} from \"./dispatch.js\";\nimport {view} from \"./view_api.js\";\nimport {bindall} from \"../utils.js\";\n\n/**\n * Construct a proxy for the table object by creating a \"table\" message and\n * sending it through the worker.\n *\n * @param {*} worker\n * @param {*} data\n * @param {*} options\n */\nexport function table(worker, data, options) {\n    return new Promise((resolve, reject) => {\n        this._worker = worker;\n        this._name = options.name || Math.random() + \"\";\n\n        bindall(this);\n\n        if (data.to_arrow) {\n            this._worker.post({\n                cmd: \"table\",\n                name: this._name,\n                args: [],\n                options: options || {}\n            });\n            data.to_arrow().then(arrow => {\n                this._worker.post(\n                    {\n                        cmd: \"table\",\n                        name: this._name,\n                        args: [arrow],\n                        options: options || {}\n                    },\n                    () => {\n                        data.on_update(\n                            updated => {\n                                this.update(updated.delta);\n                            },\n                            {mode: \"row\"}\n                        );\n                        resolve(this);\n                    },\n                    reject\n                );\n            });\n        } else {\n            this._worker.post(\n                {\n                    cmd: \"table\",\n                    name: this._name,\n                    args: [data],\n                    options: options || {}\n                },\n                () => {\n                    resolve(this);\n                },\n                reject\n            );\n        }\n\n        if (this._worker._initialized === true && !this._worker._features?.wait_for_response) {\n            resolve(this);\n        }\n    });\n}\n\ntable.prototype.type = \"table\";\n\n/**\n * Create a reference to a Perspective table at `worker` for use by remote\n * clients.\n *\n * @param {worker} worker the Web Worker at which the table is located.\n * @param {String} name a unique name for the table.\n */\nexport function proxy_table(worker, name) {\n    this._worker = worker;\n    this._name = name;\n}\n\nproxy_table.prototype = table.prototype;\n\n// Dispatch table methods that create new objects to the worker\ntable.prototype.view = function(config) {\n    return new view(this._worker, this._name, config);\n};\n\n// Dispatch table methods that do not create new objects (getters, setters etc.)\n// to the queue for processing.\ntable.prototype.get_index = async_queue(\"get_index\", \"table_method\");\n\ntable.prototype.get_limit = async_queue(\"get_limit\", \"table_method\");\n\ntable.prototype.make_port = async_queue(\"make_port\", \"table_method\");\n\ntable.prototype.remove_port = async_queue(\"remove_port\", \"table_method\");\n\ntable.prototype.schema = async_queue(\"schema\", \"table_method\");\n\ntable.prototype.validate_expressions = async_queue(\"validate_expressions\", \"table_method\");\n\ntable.prototype.is_valid_filter = async_queue(\"is_valid_filter\", \"table_method\");\n\ntable.prototype.size = async_queue(\"size\", \"table_method\");\n\ntable.prototype.columns = async_queue(\"columns\", \"table_method\");\n\ntable.prototype.clear = async_queue(\"clear\", \"table_method\");\n\ntable.prototype.replace = async_queue(\"replace\", \"table_method\");\n\ntable.prototype.delete = async_queue(\"delete\", \"table_method\");\n\ntable.prototype.on_delete = subscribe(\"on_delete\", \"table_method\", true);\n\ntable.prototype.remove = async_queue(\"remove\", \"table_method\");\n\ntable.prototype.remove_delete = unsubscribe(\"remove_delete\", \"table_method\", true);\n\ntable.prototype.update = function(data, options) {\n    return new Promise((resolve, reject) => {\n        this._worker.post(\n            {\n                name: this._name,\n                cmd: \"table_method\",\n                method: \"update\",\n                args: [data, options || {}]\n            },\n            resolve,\n            reject,\n            false\n        );\n    });\n};\n\ntable.prototype.execute = function(f) {\n    this._worker.post({\n        cmd: \"table_execute\",\n        name: this._name,\n        f: f.toString()\n    });\n};\n"],"file":"table_api.js"}