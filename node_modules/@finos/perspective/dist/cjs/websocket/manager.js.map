{"version":3,"sources":["../../../src/js/websocket/manager.js"],"names":["CLIENT_ID_GEN","constructor","setInterval","Object","ws","add_connection","msg","binary","new_args","JSON","compoundId","id","console","post","req","binary_msg","transferable","_post_chunked","start","end","request","setTimeout","_host","cache","name","input","host_table","eject_table","eject_view"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport {Server} from \"../api/server.js\";\n\nlet CLIENT_ID_GEN = 0;\n\n/**\n * A WebSocket Manager instance to host a Perspective server in NodeJS.\n */\nexport class WebSocketManager extends Server {\n    constructor(...args) {\n        super(...args);\n        this.requests_id_map = new Map();\n        this.requests = {};\n        this.websockets = {};\n\n        // Send chunks of this size (in bytes)\n        this.chunk_size = 50 * 1000 * 1000;\n\n        // clear invalid connections\n        setInterval(() => {\n            Object.entries(this.websockets).forEach(([id, ws]) => {\n                if (ws.isAlive === false) {\n                    delete this.websockets[id];\n                    return ws.terminate();\n                }\n                ws.isAlive = false;\n            });\n        }, 30000);\n    }\n\n    /**\n     * Add a new websocket connection to the manager, and define a handler\n     * for all incoming messages. If the incoming message has `binary_length`\n     * set, handle incoming `ArrayBuffers` correctly.\n     *\n     * The WebsocketManager manages the websocket connection and processes every\n     * message received from each connections. When a websocket connection is\n     * `closed`, the websocket manager will clear all subscriptions associated\n     * with the connection.\n     *\n     * @param {WebSocket} ws a websocket connection\n     */\n    add_connection(ws) {\n        ws.isAlive = true;\n        ws.binaryType = \"arraybuffer\";\n        ws.id = CLIENT_ID_GEN++;\n\n        // Parse incoming messages\n        ws.on(\"message\", msg => {\n            ws.isAlive = true;\n\n            if (msg === \"ping\") {\n                ws.send(\"pong\");\n                return;\n            }\n\n            if (this._pending_binary) {\n                // Combine ArrayBuffer and previous message so that metadata can\n                // be reconstituted for the server, as the server needs the\n                // whole message to correctly delegate commands.\n                const binary = msg;\n                let new_args = [binary];\n                msg = this._pending_binary;\n\n                if (msg.args && msg.args.length > 1) {\n                    new_args = new_args.concat(msg.args.slice(1));\n                }\n\n                msg.args = new_args;\n\n                delete msg.binary_length;\n                delete this._pending_binary;\n            } else {\n                msg = JSON.parse(msg);\n\n                if (msg.binary_length) {\n                    this._pending_binary = msg;\n                    return;\n                }\n            }\n\n            try {\n                // Send all messages to the handler defined in\n                // Perspective.Server\n                const compoundId = `${msg.id}/${ws.id}`;\n                this.requests_id_map.set(compoundId, msg.id);\n                msg.id = compoundId;\n                this.requests[msg.id] = {\n                    ws,\n                    msg\n                };\n                this.process(msg, ws.id);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n        ws.on(\"close\", () => {\n            this.clear_views(ws.id);\n        });\n        ws.on(\"error\", console.error);\n    }\n\n    /**\n     * Send an asynchronous message to the Perspective client through\n     * the websocket.\n     *\n     * If the `transferable` param is set, pass two messages: the string\n     * representation of the message and then the ArrayBuffer data that needs to\n     * be transferred. `binary_length` tells the client to expect the next\n     * message to be a transferable object.\n     *\n     * @param {Object} msg a valid JSON-serializable message to pass to the\n     * client\n     * @param {*} transferable a transferable object to be sent to the client\n     */\n    post(msg, transferable) {\n        const req = this.requests[msg.id];\n        const id = msg.id;\n        if (req.ws.readyState > 1) {\n            delete this.requests[id];\n            throw new Error(\"Connection closed\");\n        }\n        msg.id = this.requests_id_map.get(id);\n        if (transferable) {\n            const binary_msg = transferable[0];\n            msg.binary_length = binary_msg.byteLength;\n            req.ws.send(JSON.stringify(msg));\n            this._post_chunked(req, binary_msg, 0, this.chunk_size, binary_msg.byteLength);\n        } else {\n            req.ws.send(JSON.stringify(msg));\n        }\n        if (!req.msg.subscribe) {\n            this.requests_id_map.delete(id);\n            delete this.requests[id];\n        }\n    }\n\n    /**\n     * Send a binary message (in the transferable param) in chunks.\n     *\n     * @param {*} request\n     * @param {ArrayBuffer} binary\n     * @param {Number} start\n     * @param {Number} end\n     * @param {Number} length\n     */\n    _post_chunked(request, binary, start, end, length) {\n        if (start < length) {\n            end = start + this.chunk_size;\n            if (end > length) end = length;\n            request.ws.send(binary.slice(start, end));\n            start = end;\n            setTimeout(() => {\n                this._post_chunked(request, binary, start, end, length);\n            }, 0);\n        }\n    }\n\n    _host(cache, name, input) {\n        if (cache[name] !== undefined) {\n            throw new Error(`\"${name}\" already exists`);\n        }\n        input.on_delete(() => {\n            delete cache[name];\n        });\n        cache[name] = input;\n    }\n\n    /**\n     * Expose a Perspective `table` through the WebSocket, allowing\n     * it to be accessed by a unique name from a client.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     * @param {perspective.table} table `table` to host.\n     */\n    host_table(name, table) {\n        this._host(this._tables, name, table);\n    }\n\n    /**\n     * Cease hosting a `table` on this server.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     */\n    eject_table(name) {\n        delete this._tables[name];\n    }\n\n    /**\n     * Cease hosting a `view` on this server.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     */\n    eject_view(name) {\n        delete this._views[name];\n    }\n}\n"],"file":"manager.js"}