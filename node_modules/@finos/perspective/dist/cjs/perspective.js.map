{"version":3,"sources":["../../src/js/perspective.js"],"names":["global","now","Date","self","WARNED_KEYS","__MODULE__","accessor","SIDES","_POOL_DEBOUNCES","setTimeout","_call_process","pool","_remove_process","mem","performance","JSON","process","index","limit","_Table","table_id","is_update","op","_set_process","config","view_config","sides","table","defaults","bindall","view","i","j","val","cb","hidden","sort","extracted","vector","s","extract_vector_scalar","item","col_path_vector_to_string","override","schema","extract_map","Object","colname","key","get_type_config","skip","depth","x","num_sides","nidx","_parse_format_options","options","max_cols","max_rows","psp_offset","viewport","start_row","end_row","Math","start_col","end_col","to_format","is_formatted","get_pkeys","get_ids","leaves_only","has_row_path","get_from_data_slice","slice","ns","col_names","data","formatter","ridx","row_path","row","cidx","col_name","col_type","type_config","value","keys","column_to_format","num_rows","names","idx","data_slice","dtype","rst","format_function","formatters","ncols","nhidden","delta","rows","results","Number","mode","orig_callback","callback","cache","updated","port_id","a","condition","total","filterInPlace","console","initial_length","fill_vector","filter_vector","filled","sort_vector","inner","length","columns","types","new_schema","name","get_column_type","validated_expressions","expression_idx_map","expression_string","column_name_map","column_id_map","running_cidx","parsed_expression_string","expression_alias","alias","cname","column_id","match","validated","expression_schema","errors","expressions","parse_expression_strings","validation_results","expression_errors","expression_aliases","error_aliases","error_object","filter","perspective","exists","_config","agg","table_schema","expr","is_compare","vc","v","meter","_msgs","start","cols","is_arrow","is_csv","pdata","extract_vector","has_index","explicit_index","make_table","e","f","__module__","Server","worker","overridden_types","data_accessor","constructor","post","init","wasmBinary","msg","wasmJSMethod","mod"],"mappings":"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A3B,GAA2B,CAA3B;AACArB,IAAAA,KAAK,CAALA,MAAAA;;AACA,QAAA,UAAA,EAAgB;AACZkB,MAAAA,UAAU,CAAVA,MAAAA;AACH;;AACD,WAAA,GAAA;AAnCJ,GAAA;AAsCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7D,EAAAA,IAAI,CAAJA,SAAAA,CAAAA,UAAAA,GAA4B,UAAA,OAAA,EAAkB;AAC1C,WAAOoC,SAAS,CAATA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAA8B6B,yBAArC,kBAAO7B,CAAP;AADJpC,GAAAA;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,IAAI,CAAJA,SAAAA,CAAAA,OAAAA,GAAyB,UAAA,OAAA,EAAkB;AACvC,WAAOoC,SAAS,CAATA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAA8B6B,yBAArC,aAAO7B,CAAP;AADJpC,GAAAA;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,IAAI,CAAJA,SAAAA,CAAAA,MAAAA,GAAwB,UAAA,OAAA,EAAkB;AACtC,WAAOoC,SAAS,CAATA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAA8B6B,yBAArC,YAAO7B,CAAP;AADJpC,GAAAA;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,IAAI,CAAJA,SAAAA,CAAAA,qBAAAA,GAAuC,UAAA,QAAA,EAAmB0B,OAAO,GAA1B,EAAA,EAAiC;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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport * as defaults from \"./config/constants.js\";\nimport {get_type_config} from \"./config/index.js\";\nimport {DataAccessor} from \"./data_accessor\";\nimport {extract_vector, extract_map, fill_vector} from \"./emscripten.js\";\nimport {bindall, get_column_type} from \"./utils.js\";\nimport {Server} from \"./api/server.js\";\n\nimport formatters from \"./view_formatters\";\n\n// IE fix - chrono::steady_clock depends on performance.now() which does not\n// exist in IE workers\nif (global.performance === undefined) {\n    global.performance = {now: Date.now};\n}\n\nif (typeof self !== \"undefined\" && self.performance === undefined) {\n    self.performance = {now: Date.now};\n}\n\nconst WARNED_KEYS = new Set();\n\n/**\n * The main API module for `@finos/perspective`.\n *\n * For more information, see the\n * [Javascript user guide](https://perspective.finos.org/docs/md/js.html).\n *\n * @module perspective\n */\nexport default function(Module) {\n    let __MODULE__ = Module;\n    let accessor = new DataAccessor();\n    const SIDES = [\"zero\", \"one\", \"two\"];\n\n    /***************************************************************************\n     *\n     * Private\n     *\n     */\n\n    let _POOL_DEBOUNCES = {};\n\n    function _set_process(pool, table_id) {\n        if (!_POOL_DEBOUNCES[table_id]) {\n            _POOL_DEBOUNCES[table_id] = pool;\n            setTimeout(() => _call_process(table_id));\n        }\n    }\n\n    function _call_process(table_id) {\n        const pool = _POOL_DEBOUNCES[table_id];\n        if (pool) {\n            pool._process();\n            _remove_process(table_id);\n        }\n    }\n\n    function _remove_process(table_id) {\n        delete _POOL_DEBOUNCES[table_id];\n    }\n\n    function memory_usage() {\n        const mem = performance.memory ? JSON.parse(JSON.stringify(performance.memory, [\"totalJSHeapSize\", \"usedJSHeapSize\", \"jsHeapSizeLimit\"])) : process.memoryUsage();\n        mem.wasmHeap = __MODULE__.HEAP8.length;\n        return mem;\n    }\n\n    /**\n     * Common logic for creating and registering a Table.\n     *\n     * @param {DataAccessor|Object[]} accessor - the data we provide to the\n     * Table\n     * @param {Object} _Table - `undefined` if a new table will be created, or\n     * an `std::shared_ptr<Table>` if updating.\n     * @param {String} index - A column name to be used as a primary key.\n     * @param {Number} limit - an upper bound on the number of rows in the\n     * table. If set, new rows that exceed the limit start overwriting old ones\n     * from row 0.\n     * @param {t_op} op - either `OP_INSERT` or `OP_DELETE`\n     * @param {boolean} is_update - true if we are updating an already-created\n     * table\n     * @param {boolean} is_arrow - true if the dataset is in the Arrow format\n     * @param {Number} port_id - an integer indicating the internal `t_port`\n     * which should receive this update.\n     *\n     * @private\n     * @returns {Table} An `std::shared_ptr<Table>` to a `Table` inside C++.\n     */\n    function make_table(accessor, _Table, index, limit, op, is_update, is_arrow, is_csv, port_id) {\n        // C++ constructor cannot take null values - use default values if\n        // index or limit are null.\n        if (!index) {\n            index = \"\";\n        }\n\n        if (!limit) {\n            limit = 4294967295;\n        }\n\n        _Table = __MODULE__.make_table(_Table, accessor, limit, index, op, is_update, is_arrow, is_csv, port_id);\n\n        const pool = _Table.get_pool();\n        const table_id = _Table.get_id();\n\n        if (is_update || op == __MODULE__.t_op.OP_DELETE) {\n            _set_process(pool, table_id);\n        } else {\n            pool._process();\n        }\n\n        return _Table;\n    }\n\n    /***************************************************************************\n     *\n     * View\n     *\n     */\n\n    /**\n     * A View object represents a specific transform (configuration or pivot,\n     * filter, sort, etc) configuration on an underlying\n     * {@link module:perspective~table}. A View receives all updates from the\n     * {@link module:perspective~table} from which it is derived, and can be\n     * serialized to JSON or trigger a callback when it is updated.  View\n     * objects are immutable, and will remain in memory and actively process\n     * updates until its {@link module:perspective~view#delete} method is\n     * called.\n     *\n     * <strong>Note</strong> This constructor is not public - Views are created\n     * by invoking the {@link module:perspective~table#view} method.\n     *\n     * @example\n     * // Returns a new View, pivoted in the row space by the \"name\" column.\n     * await table.view({row_pivots: [\"name\"]});\n     *\n     * @class\n     * @hideconstructor\n     */\n    function view(table, sides, config, view_config, name) {\n        this.name = name;\n        this._View = undefined;\n        this.table = table;\n\n        this.config = config || {};\n        this.view_config = view_config || new view_config();\n\n        this.is_unit_context =\n            this.table.index === \"\" &&\n            sides === 0 &&\n            this.view_config.row_pivots.length === 0 &&\n            this.view_config.column_pivots.length === 0 &&\n            this.view_config.filter.length === 0 &&\n            this.view_config.sort.length === 0 &&\n            this.view_config.expressions.length === 0;\n\n        if (this.is_unit_context) {\n            this._View = __MODULE__.make_view_unit(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, null);\n        } else if (sides === 0) {\n            this._View = __MODULE__.make_view_zero(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, null);\n        } else if (sides === 1) {\n            this._View = __MODULE__.make_view_one(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, null);\n        } else if (sides === 2) {\n            this._View = __MODULE__.make_view_two(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, null);\n        }\n\n        this.ctx = this._View.get_context();\n        this.column_only = this._View.is_column_only();\n        this.update_callbacks = this.table.update_callbacks;\n        this.overridden_types = this.table.overridden_types;\n        this._delete_callbacks = [];\n        bindall(this);\n    }\n\n    /**\n     * A copy of the config object passed to the {@link table#view} method which\n     * created this {@link module:perspective~view}.\n     *\n     * @returns {Promise<object>} Shared the same key/values properties as\n     * {@link module:perspective~view}\n     */\n    view.prototype.get_config = function() {\n        return JSON.parse(JSON.stringify(this.config));\n    };\n\n    /**\n     * Delete this {@link module:perspective~view} and clean up all resources\n     * associated with it. View objects do not stop consuming resources or\n     * processing updates when they are garbage collected - you must call this\n     * method to reclaim these.\n     *\n     * @async\n     */\n    view.prototype.delete = function() {\n        _remove_process(this.table.get_id());\n        this._View.delete();\n        this.ctx.delete();\n\n        this.table.views.splice(this.table.views.indexOf(this), 1);\n        this.table = undefined;\n        let i = 0,\n            j = 0;\n\n        // Remove old update callbacks from the Table.\n        while (i < this.update_callbacks.length) {\n            let val = this.update_callbacks[i];\n            if (val.view !== this) this.update_callbacks[j++] = val;\n            i++;\n        }\n        this.update_callbacks.length = j;\n        this._delete_callbacks.forEach(cb => cb());\n    };\n\n    /**\n     * How many pivoted sides does this {@link module:perspective~view} have?\n     *\n     * @private\n     * @returns {number} sides The number of sides of this\n     * {@link module:perspective~view}.\n     */\n    view.prototype.sides = function() {\n        return this._View.sides();\n    };\n\n    /**\n     * Counts hidden columns in the {@link module:perspective~view}. A hidden\n     * column is a column used as a sort column, but not shown in the view.\n     *\n     * @private\n     * @returns {number} sides The number of hidden columns in this\n     * {@link module:perspective~view}.\n     */\n    view.prototype._num_hidden = function() {\n        // Count hidden columns.\n        let hidden = 0;\n        for (const sort of this.config.sort) {\n            if (this.config.columns.indexOf(sort[0]) === -1) {\n                hidden++;\n            }\n        }\n        return hidden;\n    };\n\n    function col_path_vector_to_string(vector) {\n        let extracted = [];\n        for (let i = 0; i < vector.size(); i++) {\n            let s = vector.get(i);\n            extracted.push(__MODULE__.scalar_to_val(s, false, true));\n            s.delete();\n        }\n        vector.delete();\n        return extracted;\n    }\n\n    const extract_vector_scalar = function(vector) {\n        // handles deletion already - do not call delete() on the input vector\n        // again\n        let extracted = [];\n        for (let i = 0; i < vector.size(); i++) {\n            let item = vector.get(i);\n            extracted.push(col_path_vector_to_string(item));\n        }\n        vector.delete();\n        return extracted;\n    };\n\n    /**\n     * The schema of this {@link module:perspective~view}.\n     *\n     * A schema is an Object, the keys of which are the columns of this\n     * {@link module:perspective~view}, and the values are their string type\n     * names. If this {@link module:perspective~view} is aggregated, theses will\n     * be the aggregated types; otherwise these types will be the same as the\n     * columns in the underlying {@link module:perspective~table}.\n     *\n     * @example\n     * // Create a view\n     * const view = await table.view({\n     *      columns: [\"a\", \"b\"]\n     * });\n     * const schema = await view.schema(); // {a: \"float\", b: \"string\"}\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~view}'s schema.\n     */\n    view.prototype.schema = function(override = true) {\n        const schema = extract_map(this._View.schema());\n        if (override) {\n            for (const key of Object.keys(schema)) {\n                let colname = key.split(defaults.COLUMN_SEPARATOR_STRING);\n                colname = colname[colname.length - 1];\n                if (this.overridden_types[colname] && get_type_config(this.overridden_types[colname]).type === schema[key]) {\n                    schema[key] = this.overridden_types[colname];\n                }\n            }\n        }\n        return schema;\n    };\n\n    /**\n     * The expression schema of this {@link module:perspective~view},\n     * which contains only the expressions created on this view.\n     *\n     * A schema is an Object, the keys of which are the columns of this\n     * {@link module:perspective~view}, and the values are their string type\n     * names. If this {@link module:perspective~view} is aggregated, these will\n     * be the aggregated types; otherwise these types will be the same as the\n     * columns in the underlying {@link module:perspective~table}.\n     *\n     * @example\n     * // Create a view with expressions\n     * const view = table.view({\n     *      expressions: ['\"x\" + \"y\" - 100']\n     * });\n     *\n     * await view.expression_schema(); // {'\"x\" + \"y\" - 100': \"float\"}\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~view}'s expression schema.\n     */\n    view.prototype.expression_schema = function(override = true) {\n        const schema = extract_map(this._View.expression_schema());\n        if (override) {\n            for (const key of Object.keys(schema)) {\n                let colname = key.split(defaults.COLUMN_SEPARATOR_STRING);\n                colname = colname[colname.length - 1];\n                if (this.overridden_types[colname] && get_type_config(this.overridden_types[colname]).type === schema[key]) {\n                    schema[key] = this.overridden_types[colname];\n                }\n            }\n        }\n        return schema;\n    };\n\n    view.prototype._column_names = function(skip = false, depth = 0) {\n        return extract_vector_scalar(this._View.column_names(skip, depth)).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n    };\n\n    /**\n     * Returns an array of strings containing the column paths of the View\n     * without any of the source columns.\n     *\n     * A column path shows the columns that a given cell belongs to after pivots\n     * are applied.\n     *\n     * @returns {Array<String>} an Array of Strings containing the column paths.\n     */\n    view.prototype.column_paths = function() {\n        return extract_vector_scalar(this._View.column_paths()).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n    };\n\n    view.prototype.get_data_slice = function(start_row, end_row, start_col, end_col) {\n        if (this.is_unit_context) {\n            return __MODULE__.get_data_slice_unit(this._View, start_row, end_row, start_col, end_col);\n        } else {\n            const num_sides = this.sides();\n            const nidx = SIDES[num_sides];\n            return __MODULE__[`get_data_slice_${nidx}`](this._View, start_row, end_row, start_col, end_col);\n        }\n    };\n\n    /**\n     * Given an `options` Object, calculate the correct start/end rows and\n     * columns, as well as other metadata required by the data formatter.\n     *\n     * @private\n     * @param {Object} options User-provided options for `to_format`.\n     * @returns {Object} an Object containing the parsed options.\n     */\n    const _parse_format_options = function(options) {\n        options = options || {};\n        const max_cols = this._View.num_columns() + (this.sides() === 0 ? 0 : 1);\n        const max_rows = this._View.num_rows();\n        const hidden = this._num_hidden();\n        const psp_offset = this.sides() > 0 || this.column_only ? 1 : 0;\n\n        const viewport = this.config.viewport ? this.config.viewport : {};\n        const start_row = options.start_row || (viewport.top ? viewport.top : 0);\n        const end_row = Math.min(max_rows, options.end_row !== undefined ? options.end_row : viewport.height ? start_row + viewport.height : max_rows);\n        const start_col = options.start_col || (viewport.left ? viewport.left : 0);\n        const end_col = Math.min(max_cols, (options.end_col !== undefined ? options.end_col + psp_offset : viewport.width ? start_col + viewport.width : max_cols) * (hidden + 1));\n\n        // Return the calculated values\n        options.start_row = Math.floor(start_row);\n        options.end_row = Math.ceil(end_row);\n        options.start_col = Math.floor(start_col);\n        options.end_col = Math.ceil(end_col);\n\n        return options;\n    };\n\n    /**\n     * Calculates the [min, max] of the leaf nodes of a column `colname`.\n     *\n     * @param {String} colname A column name in this `View`.\n     * @returns {Array<Object>} A tuple of [min, max], whose types are column\n     * and aggregate dependent.\n     */\n    view.prototype.get_min_max = function(colname) {\n        if (this.is_unit_context) {\n            return __MODULE__.get_min_max_unit(this._View, colname);\n        } else {\n            const num_sides = this.sides();\n            const nidx = SIDES[num_sides];\n            return __MODULE__[`get_min_max_${nidx}`](this._View, colname);\n        }\n    };\n\n    /**\n     * Generic base function from which `to_json`, `to_columns` etc. derives.\n     *\n     * @private\n     */\n    const to_format = function(options, formatter) {\n        _call_process(this.table.get_id());\n        options = _parse_format_options.bind(this)(options);\n        const start_row = options.start_row;\n        const end_row = options.end_row;\n        const start_col = options.start_col;\n        const end_col = options.end_col;\n        const hidden = this._num_hidden();\n\n        const is_formatted = options.formatted;\n        const get_pkeys = !!options.index;\n        const get_ids = !!options.id;\n        const leaves_only = !!options.leaves_only;\n        const num_sides = this.sides();\n        const has_row_path = num_sides !== 0 && !this.column_only;\n        const nidx = SIDES[num_sides];\n\n        let get_from_data_slice;\n\n        if (this.is_unit_context) {\n            get_from_data_slice = __MODULE__.get_from_data_slice_unit;\n        } else {\n            get_from_data_slice = __MODULE__[`get_from_data_slice_${nidx}`];\n        }\n\n        const slice = this.get_data_slice(start_row, end_row, start_col, end_col);\n        const ns = slice.get_column_names();\n        const col_names = extract_vector_scalar(ns).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n        const schema = this.schema();\n\n        let data = formatter.initDataValue();\n\n        for (let ridx = start_row; ridx < end_row; ridx++) {\n            let row_path = has_row_path ? slice.get_row_path(ridx) : undefined;\n            if (has_row_path && leaves_only && row_path.size() < this.config.row_pivots.length) {\n                row_path.delete();\n                continue;\n            }\n            let row = formatter.initRowValue();\n\n            if (get_ids) {\n                formatter.initColumnValue(data, row, \"__ID__\");\n            }\n\n            for (let cidx = start_col; cidx < end_col; cidx++) {\n                const col_name = col_names[cidx];\n                const col_type = schema[col_name];\n                const type_config = get_type_config(col_type);\n                if (cidx === start_col && num_sides !== 0) {\n                    if (!this.column_only) {\n                        formatter.initColumnValue(data, row, \"__ROW_PATH__\");\n                        for (let i = 0; i < row_path.size(); i++) {\n                            const s = row_path.get(i);\n                            const value = __MODULE__.scalar_to_val(s, false, false);\n                            s.delete();\n                            formatter.addColumnValue(data, row, \"__ROW_PATH__\", value);\n                            if (get_ids) {\n                                formatter.addColumnValue(data, row, \"__ID__\", value);\n                            }\n                        }\n                    }\n                } else if ((cidx - (num_sides > 0 ? 1 : 0)) % (this.config.columns.length + hidden) >= this.config.columns.length) {\n                    // Hidden columns are always at the end, so don't emit\n                    // these.\n                    continue;\n                } else {\n                    let value = get_from_data_slice(slice, ridx, cidx);\n                    if (is_formatted && value !== null && value !== undefined) {\n                        if (col_type === \"datetime\" || col_type === \"date\") {\n                            // TODO Annoyingly, CSV occupies the gray area of\n                            // needing formatting _just_ for Date and Datetime -\n                            // e.g., 10000 will format as CSV `\"10,000.00\"\n                            // Otherwise, this would not need to be conditional.\n                            value = new Date(value);\n                            value = value.toLocaleString(\"en-us\", type_config.format);\n                        }\n                    }\n                    formatter.setColumnValue(data, row, col_name, value);\n                }\n            }\n\n            if (get_pkeys) {\n                const keys = slice.get_pkeys(ridx, 0);\n                formatter.initColumnValue(data, row, \"__INDEX__\");\n                for (let i = 0; i < keys.size(); i++) {\n                    // TODO: if __INDEX__ and set index have the same value,\n                    // don't we need to make sure that it only emits one?\n                    const s = keys.get(i);\n                    const value = __MODULE__.scalar_to_val(s, false, false);\n                    s.delete();\n                    formatter.addColumnValue(data, row, \"__INDEX__\", value);\n                }\n                keys.delete();\n            }\n\n            // we could add an api to just clone the index column if\n            // it's already calculated\n            if (get_ids && num_sides === 0) {\n                const keys = slice.get_pkeys(ridx, 0);\n                for (let i = 0; i < keys.size(); i++) {\n                    const s = keys.get(i);\n                    const value = __MODULE__.scalar_to_val(s, false, false);\n                    s.delete();\n                    formatter.addColumnValue(data, row, \"__ID__\", value);\n                }\n                keys.delete();\n            }\n\n            if (row_path) {\n                row_path.delete();\n            }\n            formatter.addRow(data, row);\n        }\n\n        slice.delete();\n        return formatter.formatData(data, options.config);\n    };\n\n    /**\n     * Generic base function for returning serialized data for a single column.\n     *\n     * @private\n     */\n    const column_to_format = function(col_name, options, format_function) {\n        const num_rows = this.num_rows();\n        const start_row = options.start_row || 0;\n        const end_row = options.end_row || num_rows;\n        const names = this._column_names();\n        let idx = names.indexOf(col_name);\n\n        if (idx === -1) {\n            return undefined;\n        }\n\n        // mutate the column index if necessary: in pivoted views, columns start\n        // at 1\n        const num_sides = this.sides();\n        if (num_sides > 0) {\n            idx++;\n        }\n\n        // use a specified data slice, if provided\n        let slice, data_slice;\n\n        if (!options.data_slice) {\n            data_slice = this.get_data_slice(start_row, end_row, idx, idx + 1);\n            slice = data_slice.get_slice();\n        } else {\n            slice = options.data_slice.get_column_slice(idx);\n        }\n\n        const dtype = this._View.get_column_dtype(idx);\n\n        const rst = format_function(slice, dtype, idx);\n        slice.delete();\n        if (data_slice) {\n            data_slice.delete();\n        }\n        return rst;\n    };\n\n    /**\n     * Serializes this view to JSON data in a column-oriented format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     * @param {boolean} [config.index=false] Should the index from the\n     * underlying {@link module:perspective~table} be in the output (as\n     * `\"__INDEX__\"`).\n     *\n     * @returns {Promise<Array>} A Promise resolving to An array of Objects\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row Object will have a \"__ROW_PATH__\"\n     * key, whose value specifies this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_columns = function(options) {\n        return to_format.call(this, options, formatters.jsonTableFormatter);\n    };\n\n    /**\n     * Serializes this view to JSON data in a row-oriented format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     *\n     * @returns {Promise<Array>} A Promise resolving to An array of Objects\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row Object will have a \"__ROW_PATH__\"\n     * key, whose value specifies this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_json = function(options) {\n        return to_format.call(this, options, formatters.jsonFormatter);\n    };\n\n    /**\n     * Serializes this view to CSV data in a standard format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     * @returns {Promise<string>} A Promise resolving to a string in CSV format\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row will have prepended those values\n     * specified by this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_csv = function(options) {\n        return to_format.call(this, options, formatters.csvFormatter);\n    };\n\n    /**\n     * Serializes a view column into a TypedArray.\n     *\n     * @async\n     *\n     * @param {string} column_name The name of the column to serialize.\n     *\n     * @param {Object} options An optional configuration object.\n     *\n     * @param {*} options.data_slice A data slice object from which to\n     * serialize.\n     *\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     *\n     * @returns {Promise<TypedArray>} A promise resolving to a TypedArray\n     * representing the data of the column as retrieved from the\n     * {@link module:perspective~view} - all pivots, aggregates, sorts, and\n     * filters have been applied onto the values inside the TypedArray. The\n     * TypedArray will be constructed based on data type - integers will resolve\n     * to Int8Array, Int16Array, or Int32Array. Floats resolve to Float32Array\n     * or Float64Array. If the column cannot be found, or is not of an\n     * integer/float type, the Promise returns undefined.\n     */\n    view.prototype.col_to_js_typed_array = function(col_name, options = {}) {\n        const format_function = __MODULE__[`col_to_js_typed_array`];\n        return column_to_format.call(this, col_name, options, format_function);\n    };\n\n    /**\n     * Serializes a view to the Apache Arrow data format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     *\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     *\n     * @returns {Promise<ArrayBuffer>} An `ArrayBuffer` in the Apache Arrow\n     * format containing data from the view.\n     */\n    view.prototype.to_arrow = function(options = {}) {\n        _call_process(this.table.get_id());\n        options = _parse_format_options.bind(this)(options);\n        const start_row = options.start_row;\n        const end_row = options.end_row;\n        const start_col = options.start_col;\n        const end_col = options.end_col;\n        const sides = this.sides();\n\n        if (this.is_unit_context) {\n            return __MODULE__.to_arrow_unit(this._View, start_row, end_row, start_col, end_col);\n        } else if (sides === 0) {\n            return __MODULE__.to_arrow_zero(this._View, start_row, end_row, start_col, end_col);\n        } else if (sides === 1) {\n            return __MODULE__.to_arrow_one(this._View, start_row, end_row, start_col, end_col);\n        } else if (sides === 2) {\n            return __MODULE__.to_arrow_two(this._View, start_row, end_row, start_col, end_col);\n        }\n    };\n\n    /**\n     * The number of aggregated rows in this {@link module:perspective~view}.\n     * This is affected by the \"row_pivots\" configuration parameter supplied to\n     * this {@link module:perspective~view}'s contructor.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of aggregated rows.\n     */\n    view.prototype.num_rows = function() {\n        return this._View.num_rows();\n    };\n\n    /**\n     * The number of aggregated columns in this {@link view}.  This is affected\n     * by the \"column_pivots\" configuration parameter supplied to this\n     * {@link view}'s contructor.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of aggregated columns.\n     */\n    view.prototype.num_columns = function() {\n        const ncols = this._View.num_columns();\n        const nhidden = this._num_hidden();\n        return ncols - (ncols / (this.config.columns.length + nhidden)) * nhidden;\n    };\n\n    /**\n     * Whether this row at index `idx` is in an expanded or collapsed state.\n     *\n     * @async\n     *\n     * @returns {Promise<bool>} Whether this row is expanded.\n     */\n    view.prototype.get_row_expanded = function(idx) {\n        return this._View.get_row_expanded(idx);\n    };\n\n    /**\n     * Expands the row at index `idx`.\n     *\n     * @async\n     *\n     * @returns {Promise<void>}\n     */\n    view.prototype.expand = function(idx) {\n        return this._View.expand(idx, this.config.row_pivots.length);\n    };\n\n    /**\n     * Collapses the row at index `idx`.\n     *\n     * @async\n     *\n     * @returns {Promise<void>}\n     */\n    view.prototype.collapse = function(idx) {\n        return this._View.collapse(idx);\n    };\n\n    /**\n     * Set expansion `depth` of the pivot tree.\n     *\n     */\n    view.prototype.set_depth = function(depth) {\n        return this._View.set_depth(depth, this.config.row_pivots.length);\n    };\n\n    /**\n     * Returns the data of all changed rows in JSON format, or for 1+ sided\n     * contexts the entire dataset of the view.\n     * @private\n     */\n    view.prototype._get_step_delta = async function() {\n        let delta = this._View.get_step_delta(0, 2147483647);\n        let data;\n        if (delta.cells.size() === 0) {\n            // FIXME This is currently not implemented for 1+ sided contexts.\n            data = this.to_json();\n        } else {\n            let rows = {};\n            for (let x = 0; x < delta.cells.size(); x++) {\n                rows[delta.cells.get(x).row] = true;\n            }\n            rows = Object.keys(rows);\n            const results = rows.map(row =>\n                this.to_json({\n                    start_row: Number.parseInt(row),\n                    end_row: Number.parseInt(row) + 1\n                })\n            );\n            data = [].concat.apply([], results);\n        }\n        delta.cells.delete();\n        return data;\n    };\n\n    /**\n     * Returns an Arrow-serialized dataset that contains the data from updated\n     * rows. Do not call this function directly, instead use the\n     * {@link module:perspective~view}'s `on_update` method with `{mode: \"row\"}`\n     * in order to access the row deltas.\n     *\n     * @private\n     */\n    view.prototype._get_row_delta = async function() {\n        if (this.is_unit_context) {\n            return __MODULE__.get_row_delta_unit(this._View);\n        } else {\n            const sides = this.sides();\n            const nidx = SIDES[sides];\n            return __MODULE__[`get_row_delta_${nidx}`](this._View);\n        }\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~view}. Whenever\n     * the {@link module:perspective~view}'s underlying table emits an update,\n     * this callback will be invoked with an object containing `port_id`,\n     * indicating which port the update fired on, and optionally `delta`, which\n     * is the new data that was updated for each cell or each row.\n     *\n     * @example\n     * // Attach an `on_update` callback\n     * view.on_update(updated => console.log(updated.port_id));\n     *\n     * @example\n     * // `on_update` with row deltas\n     * view.on_update(updated => console.log(updated.delta), {mode: \"row\"});\n     *\n     * @param {function} callback A callback function invoked on update, which\n     * receives an object with two keys: `port_id`, indicating which port the\n     * update was triggered on, and `delta`, whose value is dependent on the\n     * `mode` parameter:\n     *     - \"none\" (default): `delta` is `undefined`.\n     *     - \"row\": `delta` is an Arrow of the updated rows.\n     */\n    view.prototype.on_update = function(callback, {mode = \"none\"} = {}) {\n        _call_process(this.table.get_id());\n\n        if ([\"none\", \"row\"].indexOf(mode) === -1) {\n            throw new Error(`Invalid update mode \"${mode}\" - valid modes are \"none\" and \"row\".`);\n        }\n\n        if (mode === \"row\") {\n            // Enable deltas only if needed by callback\n            if (!this._View._get_deltas_enabled()) {\n                this._View._set_deltas_enabled(true);\n            }\n        }\n\n        this.update_callbacks.push({\n            view: this,\n            orig_callback: callback,\n            callback: async (port_id, cache) => {\n                // Cache prevents repeated calls to expensive delta functions\n                // for on_update callbacks triggered sequentially from the same\n                // update delta.\n                if (cache[port_id] === undefined) {\n                    cache[port_id] = {};\n                }\n\n                let updated = {port_id};\n\n                if (mode === \"row\") {\n                    if (cache[port_id][\"row_delta\"] === undefined) {\n                        cache[port_id][\"row_delta\"] = await this._get_row_delta();\n                    }\n                    updated.delta = cache[port_id][\"row_delta\"];\n                }\n\n                // Call the callback with the updated object containing\n                // `port_id` and `delta`.\n                callback(updated);\n            }\n        });\n    };\n\n    function filterInPlace(a, condition) {\n        let i = 0,\n            j = 0;\n\n        while (i < a.length) {\n            const val = a[i];\n            if (condition(val, i, a)) a[j++] = val;\n            i++;\n        }\n\n        a.length = j;\n        return a;\n    }\n\n    /*\n     * Unregister a previously registered update callback with this\n     * {@link module:perspective~view}.\n     *\n     * @example\n     * // remove an `on_update` callback\n     * const callback = updated => console.log(updated);\n     * view.remove_update(callback);\n     *\n     * @param {function} callback A update callback function to be removed\n     */\n    view.prototype.remove_update = function(callback) {\n        _call_process(this.table.get_id());\n        const total = this.update_callbacks.length;\n        filterInPlace(this.update_callbacks, x => x.orig_callback !== callback);\n        console.assert(total > this.update_callbacks.length, `\"callback\" does not match a registered updater`);\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~view}.  Whenever\n     * the {@link module:perspective~view} is deleted, this callback will be\n     * invoked.\n     *\n     * @example\n     * // attach an `on_delete` callback\n     * view.on_delete(() => console.log(\"Deleted!\"));\n     *\n     * @param {function} callback A callback function invoked on delete.\n     */\n    view.prototype.on_delete = function(callback) {\n        this._delete_callbacks.push(callback);\n    };\n\n    /**\n     * Unregister a previously registered delete callback with this\n     * {@link module:perspective~view}.\n     *\n     * @example\n     * // remove an `on_delete` callback\n     * const callback = () => console.log(\"Deleted!\")\n     * view.remove_delete(callback);\n     *\n     * @param {function} callback A delete callback function to be removed\n     */\n    view.prototype.remove_delete = function(callback) {\n        const initial_length = this._delete_callbacks.length;\n        filterInPlace(this._delete_callbacks, cb => cb !== callback);\n        console.assert(initial_length > this._delete_callbacks.length, `\"callback\" does not match a registered delete callbacks`);\n    };\n\n    /**\n     * A view config is a set of options that configures the underlying\n     * {@link module:perspective~view}, specifying its pivots, columns to show,\n     * aggregates, filters, and sorts.\n     *\n     * The view config receives an `Object` containing configuration options,\n     * and the `view_config` transforms it into a canonical format for\n     * interfacing with the core engine.\n     *\n     * <strong>Note</strong> This constructor is not public - view config\n     * objects should be created using standard Javascript `Object`s in the\n     * {@link module:perspective~table#view} method, which has an `options`\n     * parameter.\n     *\n     * @param {Object} config the configuration `Object` passed by the user to\n     * the {@link module:perspective~table#view} method.\n     * @private\n     * @class\n     * @hideconstructor\n     */\n    function view_config(config) {\n        this.row_pivots = config.row_pivots || [];\n        this.column_pivots = config.column_pivots || [];\n        this.aggregates = config.aggregates || {};\n        this.columns = config.columns;\n        this.filter = config.filter || [];\n        this.sort = config.sort || [];\n        this.expressions = config.expressions || [];\n        this.filter_op = config.filter_op || \"and\";\n        this.row_pivot_depth = config.row_pivot_depth;\n        this.column_pivot_depth = config.column_pivot_depth;\n    }\n\n    /**\n     * Transform configuration items into `std::vector` objects for interface\n     * with C++. `this.aggregates` is not transformed into a C++ map, as the use\n     * of `ordered_map` in the engine makes binding more difficult.\n     *\n     * @private\n     */\n    view_config.prototype.get_row_pivots = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.row_pivots);\n    };\n\n    view_config.prototype.get_column_pivots = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.column_pivots);\n    };\n\n    view_config.prototype.get_columns = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.columns);\n    };\n\n    view_config.prototype.get_filter = function() {\n        let vector = __MODULE__.make_2d_val_vector();\n        for (let filter of this.filter) {\n            let filter_vector = __MODULE__.make_val_vector();\n            let filled = fill_vector(filter_vector, filter);\n            vector.push_back(filled);\n        }\n        return vector;\n    };\n\n    view_config.prototype.get_sort = function() {\n        let vector = __MODULE__.make_2d_string_vector();\n        for (let sort of this.sort) {\n            let sort_vector = __MODULE__.make_string_vector();\n            let filled = fill_vector(sort_vector, sort);\n            vector.push_back(filled);\n        }\n        return vector;\n    };\n\n    view_config.prototype.get_expressions = function() {\n        let vector = __MODULE__.make_2d_val_vector();\n        for (let expression of this.expressions) {\n            let inner = __MODULE__.make_val_vector();\n            for (let val of expression) {\n                inner.push_back(val);\n            }\n            vector.push_back(inner);\n        }\n        return vector;\n    };\n\n    /***************************************************************************\n     *\n     * Table\n     *\n     */\n\n    /**\n     * A Table object is the basic data container in Perspective.  Tables are\n     * typed - they have an immutable set of column names, and a known type for\n     * each.\n     *\n     * <strong>Note</strong> This constructor is not public - Tables are created\n     * by invoking the {@link module:perspective~table} factory method, either\n     * on the perspective module object, or an a\n     * {@link module:perspective~worker} instance.\n     *\n     * @class\n     * @hideconstructor\n     */\n    function table(_Table, index, limit, overridden_types) {\n        this._Table = _Table;\n        this.gnode_id = this._Table.get_gnode().get_id();\n        this._Table.get_pool().set_update_delegate(this);\n        this.name = Math.random() + \"\";\n        this.initialized = false;\n        this.index = index;\n        this.limit = limit;\n        this.update_callbacks = [];\n        this._delete_callbacks = [];\n        this.views = [];\n        this.overridden_types = overridden_types;\n        bindall(this);\n    }\n\n    table.prototype.get_id = function() {\n        return this._Table.get_id();\n    };\n\n    table.prototype.get_pool = function() {\n        return this._Table.get_pool();\n    };\n\n    table.prototype.make_port = function() {\n        return this._Table.make_port();\n    };\n\n    table.prototype.remove_port = function() {\n        this._Table.remove_port();\n    };\n\n    table.prototype._update_callback = function(port_id) {\n        let cache = {};\n        for (let e in this.update_callbacks) {\n            this.update_callbacks[e].callback(port_id, cache);\n        }\n    };\n\n    /**\n     * Returns the user-specified index column for this\n     * {@link module:perspective~table} or null if an index is not set.\n     */\n    table.prototype.get_index = function() {\n        return this.index;\n    };\n\n    /**\n     * Returns the user-specified limit column for this\n     * {@link module:perspective~table} or null if an limit is not set.\n     */\n    table.prototype.get_limit = function() {\n        return this.limit;\n    };\n\n    /**\n     * Remove all rows in this {@link module:perspective~table} while preserving\n     * the schema and construction options.\n     */\n    table.prototype.clear = function() {\n        _remove_process(this.get_id());\n        this._Table.reset_gnode(this.gnode_id);\n    };\n\n    /**\n     * Replace all rows in this {@link module:perspective~table} the input data.\n     */\n    table.prototype.replace = function(data) {\n        _remove_process(this.get_id());\n        this._Table.reset_gnode(this.gnode_id);\n        this.update(data);\n        _call_process(this.get_id());\n    };\n\n    /**\n     * Delete this {@link module:perspective~table} and clean up all resources\n     * associated with it. Table objects do not stop consuming resources or\n     * processing updates when they are garbage collected - you must call this\n     * method to reclaim these.\n     */\n    table.prototype.delete = function() {\n        if (this.views.length > 0) {\n            throw `Cannot delete Table as it still has ${this.views.length} registered View(s).`;\n        }\n        _remove_process(this.get_id());\n        this._Table.unregister_gnode(this.gnode_id);\n        this._Table.delete();\n\n        // Call delete callbacks\n        for (const callback of this._delete_callbacks) {\n            callback();\n        }\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~table}.  Whenever\n     * the {@link module:perspective~table} is deleted, this callback will be\n     * invoked.\n     *\n     * @param {function} callback A callback function with no parameters\n     *      that will be invoked on `delete()`.\n     */\n    table.prototype.on_delete = function(callback) {\n        this._delete_callbacks.push(callback);\n    };\n\n    /**\n     * Unregister a previously registered delete callback with this\n     * {@link module:perspective~table}.\n     *\n     * @param {function} callback A delete callback function to be removed\n     */\n    table.prototype.remove_delete = function(callback) {\n        const initial_length = this._delete_callbacks.length;\n        filterInPlace(this._delete_callbacks, cb => cb !== callback);\n        console.assert(initial_length > this._delete_callbacks.length, `\"callback\" does not match a registered delete callbacks`);\n    };\n\n    /**\n     * The number of accumulated rows in this {@link module:perspective~table}.\n     * This is affected by the \"index\" configuration parameter supplied to this\n     * {@link module:perspective~view}'s contructor - as rows will be\n     * overwritten when they share an idnex column.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of accumulated rows.\n     */\n    table.prototype.size = function() {\n        _call_process(this._Table.get_id());\n        return this._Table.size();\n    };\n\n    /**\n     * The schema of this {@link module:perspective~table}.  A schema is an\n     * Object whose keys are the columns of this\n     * {@link module:perspective~table}, and whose values are their string type\n     * names.\n     *\n     * @async\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~table}'s schema.\n     */\n    table.prototype.schema = function(override = true) {\n        let schema = this._Table.get_schema();\n        let columns = schema.columns();\n        let types = schema.types();\n        let new_schema = {};\n        for (let key = 0; key < columns.size(); key++) {\n            const name = columns.get(key);\n            if (name === \"psp_okey\") {\n                continue;\n            }\n            if (override && this.overridden_types[name]) {\n                new_schema[name] = this.overridden_types[name];\n            } else {\n                new_schema[name] = get_column_type(types.get(key).value);\n            }\n        }\n        schema.delete();\n        columns.delete();\n        types.delete();\n        return new_schema;\n    };\n\n    /**\n     * Transform an expression string into a vector that internally provides\n     * the engine with more metadata in order to efficiently compute the\n     * expression:\n     *\n     * v[0]: the expression string as typed by the user\n     * v[1]: the expression string with \"column\" replaced with col0, col1,\n     *  etc., which allows for faster lookup of column values.\n     * v[2]: a map of column keys (col0, col1) to actual column names,\n     *  which will be used in the engine to look up column values.\n     *\n     * @private\n     * @param {Array<String>} expressions\n     */\n    function parse_expression_strings(expressions) {\n        let validated_expressions = [];\n        const expression_idx_map = {};\n\n        for (let expression_string of expressions) {\n            if (expression_string.includes('\"\"')) {\n                console.error(`Skipping expression '${expression_string}', as it cannot reference an empty column!`);\n                continue;\n            }\n\n            // Map of column names to column IDs, so that we generate\n            // column IDs correctly without collision.\n            let column_name_map = {};\n\n            // Map of column IDs to column names, so the engine can look\n            // up the right column internally without more transforms.\n            let column_id_map = {};\n            let running_cidx = 0;\n\n            // First, look for a column alias, which is a // style comment\n            // on the first line of the expression.\n            let expression_alias;\n\n            let parsed_expression_string = expression_string.replace(/\\/\\/(.+?)$/m, (_, alias) => {\n                expression_alias = alias.trim();\n                return \"\";\n            });\n\n            // If an alias does not exist, the alias is the expression itself.\n            if (!expression_alias || expression_alias.length == 0) {\n                expression_alias = expression_string;\n            }\n\n            parsed_expression_string = parsed_expression_string.replace(/\\\"(.*?[^\\\\])\\\"/g, (_, cname) => {\n                // If the column name contains escaped double quotes, replace\n                // them and assume that they escape one double quote. If there\n                // are multiple double quotes being escaped, i.e. \\\"\"...well?\n                cname = cname.replace(/\\\\\"/g, '\"');\n\n                if (column_name_map[cname] === undefined) {\n                    let column_id = `COLUMN${running_cidx}`;\n                    column_name_map[cname] = column_id;\n                    column_id_map[column_id] = cname;\n                }\n\n                running_cidx++;\n                return column_name_map[cname];\n            });\n\n            // Replace single quote string literals and wrap them in a call to\n            // intern() which makes sure they don't leak\n            parsed_expression_string = parsed_expression_string.replace(/'(.*?[^\\\\])'/g, match => `intern(${match})`);\n\n            // Replace intern() for bucket, as it takes a string literal\n            // parameter and does not work if that param is interned. TODO:\n            // this is clumsy and we should have a better way of handling it.\n            parsed_expression_string = parsed_expression_string.replace(/bucket\\(.*?, (intern\\(\\'([smhDWMY])\\'\\))\\)/g, (match, full, value) => {\n                return `${match.substr(0, match.indexOf(full))}'${value}')`;\n            });\n\n            const validated = [expression_alias, expression_string, parsed_expression_string, column_id_map];\n\n            // Check if this expression is already in the array, if so then\n            // we need to replace the expression so the last expression tagged\n            // with the alias is the one that is applied to the engine.\n            if (expression_idx_map[expression_alias] !== undefined) {\n                const idx = expression_idx_map[expression_alias];\n                validated_expressions[idx] = validated;\n            } else {\n                validated_expressions.push(validated);\n                expression_idx_map[expression_alias] = validated_expressions.length - 1;\n            }\n        }\n\n        return validated_expressions;\n    }\n\n    /**\n     * Given an array of expressions, return an object containing `expressions`,\n     * which map expression aliases to data types, and `errors`, which\n     * maps expression aliases to error messages. If an expression that was\n     * passed in is not in `expressions`, it is guaranteed to be in `errors`.\n     *\n     * @async\n     * @param {Array<String>} expressions An array of string expressions to\n     * be validated.\n     *\n     * @returns {Promise<Object>}\n     *\n     * @example\n     * const results = await table.validate_expressions([\n     *  '\"Sales\" + \"Profit\"', \"invalid\", \"1 + 'string'\"\n     * ]);\n     *\n     * // {'\"Sales\" + \"Profit\"': \"float\"}\n     * console.log(results.expression_schema);\n     *\n     * // {\"invalid\": \"unknown token!\", \"1 + 'string'\": \"TypeError\"}\n     * console.log(results.errors);\n     */\n    table.prototype.validate_expressions = function(expressions, override = true) {\n        const validated = {\n            expression_schema: {},\n            errors: {}\n        };\n\n        if (!expressions || expressions.length === 0) return validated;\n        expressions = parse_expression_strings(expressions);\n\n        // Transform Array into a C++ vector that can be passed through\n        // Emscripten.\n        let vector = __MODULE__.make_2d_val_vector();\n\n        for (let expression of expressions) {\n            let inner = __MODULE__.make_val_vector();\n            for (let val of expression) {\n                inner.push_back(val);\n            }\n            vector.push_back(inner);\n        }\n\n        const validation_results = __MODULE__.validate_expressions(this._Table, vector);\n        const expression_schema = validation_results.get_expression_schema();\n        const expression_errors = validation_results.get_expression_errors();\n\n        const expression_aliases = expression_schema.keys();\n\n        for (let i = 0; i < expression_aliases.size(); i++) {\n            const alias = expression_aliases.get(i);\n            let dtype = expression_schema.get(alias);\n\n            if (override && this.overridden_types[alias]) {\n                dtype = this.overridden_types[alias];\n            }\n\n            validated.expression_schema[alias] = dtype;\n        }\n\n        const error_aliases = expression_errors.keys();\n\n        for (let i = 0; i < error_aliases.size(); i++) {\n            const alias = error_aliases.get(i);\n\n            // bound using `value_object` in embind so no need to manually\n            // convert to Object, or call delete() as memory is auto-managed.\n            const error_object = expression_errors.get(alias);\n            validated.errors[alias] = error_object;\n        }\n\n        error_aliases.delete();\n        expression_aliases.delete();\n        expression_errors.delete();\n        expression_schema.delete();\n        validation_results.delete();\n        return validated;\n    };\n\n    /**\n     * Validates a filter configuration, i.e. that the value to filter by is not\n     * null or undefined.\n     *\n     * @async\n     * @param {Array<string>} [filter] a filter configuration to test.\n     */\n    table.prototype.is_valid_filter = function(filter) {\n        // isNull and isNotNull filter operators are always valid and apply to\n        // all schema types\n        if (filter[1] === perspective.FILTER_OPERATORS.isNull || filter[1] === perspective.FILTER_OPERATORS.isNotNull) {\n            return true;\n        }\n\n        let value = filter[2];\n        if (value === null) {\n            return false;\n        }\n\n        const schema = this.schema();\n        const exists = schema[filter[0]];\n        if (exists && (schema[filter[0]] === \"date\" || schema[filter[0]] === \"datetime\")) {\n            return __MODULE__.is_valid_datetime(filter[2]);\n        }\n\n        return typeof value !== \"undefined\" && value !== null;\n    };\n\n    /* eslint-disable max-len */\n\n    /**\n     * Create a new {@link module:perspective~view} from this table with a\n     * specified configuration. For a better understanding of the View\n     * configuration options, see the\n     * [Documentation](https://perspective.finos.org/docs/md/view.html).\n     *\n     * @param {Object} [config] The configuration object for this\n     * {@link module:perspective~view}.\n     * @param {Array<string>} [config.row_pivots] An array of column names to\n     * use as {@link https://en.wikipedia.org/wiki/Pivot_table#Row_labels Row Pivots}.\n     * @param {Array<string>} [config.column_pivots] An array of column names to\n     * use as {@link https://en.wikipedia.org/wiki/Pivot_table#Column_labels Column Pivots}.\n     * @param {Array<Object>} [config.columns] An array of column names for the\n     * output columns. If none are provided, all columns are output.\n     * @param {Object} [config.aggregates] An object, the keys of which are\n     * column names, and their respective values are the aggregates calculations\n     * to use when this view has `row_pivots`. A column provided to\n     * `config.columns` without an aggregate in this object, will use the\n     * default aggregate calculation for its type.\n     * @param {Array<Array<string>>} [config.filter] An Array of Filter\n     * configurations to apply. A filter configuration is an array of 3\n     * elements: A column name, a supported filter comparison string (e.g.\n     * '===', '>'), and a value to compare.\n     * @param {Array<string>} [config.sort] An Array of Sort configurations to\n     * apply. A sort configuration is an array of 2 elements: A column name, and\n     * a sort direction, which are: \"none\", \"asc\", \"desc\", \"col asc\", \"col\n     * desc\", \"asc abs\", \"desc abs\", \"col asc abs\", \"col desc abs\".\n     *\n     * @example\n     * const view = await table.view({\n     *      row_pivots: [\"region\"],\n     *      columns: [\"region\"],\n     *      aggregates: {\"region\": \"dominant\"},\n     *      filter: [[\"client\", \"contains\", \"fred\"]],\n     *      sort: [[\"value\", \"asc\"]]\n     * });\n     *\n     * @returns {Promise<view>} A Promise that resolves to a new\n     * {@link module:perspective~view} object for the supplied configuration,\n     * bound to this table.\n     */\n    table.prototype.view = function(_config = {}) {\n        _call_process(this._Table.get_id());\n        let config = {};\n        for (const key of Object.keys(_config)) {\n            if (defaults.CONFIG_ALIASES[key]) {\n                if (!config[defaults.CONFIG_ALIASES[key]]) {\n                    if (!WARNED_KEYS.has(key)) {\n                        console.warn(`Deprecated: \"${key}\" config parameter, please use \"${defaults.CONFIG_ALIASES[key]}\" instead`);\n                        WARNED_KEYS.add(key);\n                    }\n                    config[defaults.CONFIG_ALIASES[key]] = _config[key];\n                } else {\n                    throw new Error(`Duplicate configuration parameter \"${key}\"`);\n                }\n            } else if (key === \"aggregate\") {\n                if (!WARNED_KEYS.has(\"aggregate\")) {\n                    console.warn(`Deprecated: \"aggregate\" config parameter has been replaced by \"aggregates\" and \"columns\"`);\n                    WARNED_KEYS.add(\"aggregate\");\n                }\n                // backwards compatibility: deconstruct `aggregate` into\n                // `aggregates` and `columns`\n                config[\"aggregates\"] = {};\n                config[\"columns\"] = [];\n                for (const agg of _config[\"aggregate\"]) {\n                    config[\"aggregates\"][agg[\"column\"]] = agg[\"op\"];\n                    config[\"columns\"].push(agg[\"column\"]);\n                }\n            } else if (defaults.CONFIG_VALID_KEYS.indexOf(key) > -1) {\n                config[key] = _config[key];\n            } else {\n                throw new Error(`Unrecognized config parameter \"${key}\"`);\n            }\n        }\n\n        config.row_pivots = config.row_pivots || [];\n        config.column_pivots = config.column_pivots || [];\n        config.aggregates = config.aggregates || {};\n        config.filter = config.filter || [];\n        config.sort = config.sort || [];\n        config.expressions = config.expressions || [];\n\n        const table_schema = this.schema();\n\n        if (config.expressions.length > 0) {\n            config.expressions = parse_expression_strings(config.expressions);\n        }\n\n        if (config.columns === undefined) {\n            // If columns are not provided, use all columns\n            config.columns = this.columns();\n\n            if (config.expressions.length > 0) {\n                for (const expr of config.expressions) {\n                    config.columns.push(expr[0]);\n                }\n            }\n        }\n\n        // convert date/datetime filters to Date() objects, so they are parsed\n        // as local time\n        if (config.filter.length > 0) {\n            for (let filter of config.filter) {\n                // TODO: this does not work for expressions\n                const dtype = table_schema[filter[0]];\n                const is_compare = filter[1] !== perspective.FILTER_OPERATORS.isNull && filter[1] !== perspective.FILTER_OPERATORS.isNotNull;\n                if (is_compare && (dtype === \"date\" || dtype === \"datetime\")) {\n                    // new Date() accepts strings and new Date() objects, so no\n                    // need to type check here.\n                    filter[2] = new Date(filter[2]);\n                }\n            }\n        }\n\n        let name = Math.random() + \"\";\n        let sides;\n\n        if (config.row_pivots.length > 0 || config.column_pivots.length > 0) {\n            if (config.column_pivots && config.column_pivots.length > 0) {\n                sides = 2;\n            } else {\n                sides = 1;\n            }\n        } else {\n            sides = 0;\n        }\n\n        let vc = new view_config(config);\n        let v = new view(this, sides, config, vc, name);\n        this.views.push(v);\n        return v;\n    };\n\n    /* eslint-enable max-len */\n\n    let meter;\n\n    function initialize_profile_thread() {\n        if (meter === undefined) {\n            let _msgs = 0;\n            let start = performance.now();\n            setTimeout(function poll() {\n                let now = performance.now();\n                console.log(`${((1000 * _msgs) / (now - start)).toFixed(2)} msgs/sec`);\n                _msgs = 0;\n                start = now;\n                setTimeout(poll, 5000);\n            }, 5000);\n            meter = function update(x) {\n                _msgs += x;\n            };\n            console.log(\"Profiling initialized\");\n        }\n    }\n\n    /**\n     * Updates the rows of a {@link module:perspective~table}. Updated rows are\n     * pushed down to any derived {@link module:perspective~view} objects.\n     *\n     * @param {Object<string, Array>|Array<Object>|string} data The input data\n     * for this table. {@link module:perspective~table}s are immutable after\n     * creation, so this method cannot be called with a schema.\n     *\n     * Otherwise, the supported input types are the same as the\n     * {@link module:perspective~table} constructor.\n     *\n     * @see {@link module:perspective~table}\n     */\n    table.prototype.update = function(data, options) {\n        options = options || {};\n        options.port_id = options.port_id || 0;\n\n        let pdata;\n        let cols = this.columns();\n        let schema = this._Table.get_schema();\n        let types = schema.types();\n        let is_arrow = false;\n        let is_csv = false;\n\n        pdata = accessor;\n\n        if (data instanceof ArrayBuffer) {\n            pdata = new Uint8Array(data);\n            is_arrow = true;\n        } else if (typeof data === \"string\") {\n            if (data[0] === \",\") {\n                data = \"_\" + data;\n            }\n            is_csv = true;\n            is_arrow = true;\n            pdata = data;\n        } else {\n            accessor.init(data);\n            accessor.names = cols.concat(accessor.names.filter(x => x === \"__INDEX__\"));\n            accessor.types = extract_vector(types).slice(0, cols.length);\n\n            if (meter) {\n                meter(accessor.row_count);\n            }\n        }\n\n        if (!is_arrow) {\n            if (pdata.row_count === 0) {\n                console.warn(\"table.update called with no data - ignoring\");\n                return;\n            }\n\n            // process implicit index column\n            const has_index = accessor.names.indexOf(\"__INDEX__\");\n            if (has_index != -1) {\n                const explicit_index = !!this.index;\n                if (explicit_index) {\n                    // find the type of the index column\n                    accessor.types.push(accessor.types[accessor.names.indexOf(this.index)]);\n                } else {\n                    // default index is an integer\n                    accessor.types.push(__MODULE__.t_dtype.DTYPE_INT32);\n                }\n            }\n        }\n\n        try {\n            const op = __MODULE__.t_op.OP_INSERT;\n            // update the Table in C++, but don't keep the returned C++ Table\n            // reference as it is identical\n            make_table(pdata, this._Table, this.index, this.limit, op, true, is_arrow, is_csv, options.port_id);\n            this.initialized = true;\n        } catch (e) {\n            console.error(`Update failed: ${e}`);\n        } finally {\n            schema.delete();\n        }\n    };\n\n    /**\n     * Removes the rows of a {@link module:perspective~table}. Removed rows are\n     * pushed down to any derived {@link module:perspective~view} objects.\n     *\n     * @param {Array<Object>} data An array of primary keys to remove.\n     *\n     * @see {@link module:perspective~table}\n     */\n    table.prototype.remove = function(data, options) {\n        if (!this.index) {\n            console.error(\"Cannot call `remove()` on a Table without a user-specified index.\");\n            return;\n        }\n\n        options = options || {};\n        options.port_id = options.port_id || 0;\n        let pdata;\n        let cols = this.columns();\n        let schema = this._Table.get_schema();\n        let types = schema.types();\n        let is_arrow = false;\n\n        data = data.map(idx => ({[this.index]: idx}));\n\n        if (data instanceof ArrayBuffer) {\n            pdata = new Uint8Array(data);\n            is_arrow = true;\n        } else {\n            accessor.init(data);\n            accessor.names = [this.index];\n            accessor.types = [extract_vector(types)[cols.indexOf(this.index)]];\n            pdata = accessor;\n        }\n\n        try {\n            const op = __MODULE__.t_op.OP_DELETE;\n            // update the Table in C++, but don't keep the returned Table\n            // reference as it is identical\n            make_table(pdata, this._Table, this.index, this.limit, op, false, is_arrow, false, options.port_id);\n            this.initialized = true;\n        } catch (e) {\n            console.error(`Remove failed`, e);\n        } finally {\n            schema.delete();\n        }\n    };\n\n    /**\n     * The column names of this table.\n     *\n     * @async\n     * @returns {Promise<Array<string>>} An array of column names for this\n     * table.\n     */\n    table.prototype.columns = function() {\n        let schema = this._Table.get_schema();\n        let cols = schema.columns();\n        let names = [];\n        for (let cidx = 0; cidx < cols.size(); cidx++) {\n            let name = cols.get(cidx);\n            if (name !== \"psp_okey\") {\n                names.push(name);\n            }\n        }\n        schema.delete();\n        cols.delete();\n        return names;\n    };\n\n    table.prototype.execute = function(f) {\n        f(this);\n    };\n\n    /***************************************************************************\n     *\n     * Perspective\n     *\n     */\n\n    const perspective = {\n        __module__: __MODULE__,\n\n        Server,\n\n        worker: function() {\n            return this;\n        },\n\n        initialize_profile_thread,\n\n        memory_usage,\n\n        /**\n         * A factory method for constructing {@link module:perspective~table}s.\n         *\n         * @example\n         * // Creating a table directly from node\n         * const table = await perspective.table([{x: 1}, {x: 2}]);\n         *\n         * @example\n         * // Creating a table from a Web Worker (instantiated via the worker()\n         * method).\n         * const table = await worker.table([{x: 1}, {x: 2}]);\n         *\n         * @param {Object<string, Array>|Object<string,\n         *     string>|Array<Object>|string} data The input data for this table.\n         *     When supplied an Object with string values, an empty table is\n         *     returned using this Object as a schema. When an Object with\n         *     Array values is supplied, a table is returned using this object's\n         *     key/value pairs as name/columns respectively. When an Array is\n         *     supplied, a table is constructed using this Array's objects as\n         *     rows. When a string is supplied, the parameter as parsed as a\n         *     CSV.\n         * @param {Object} [options] An optional options dictionary.\n         * @param {string} options.index The name of the column in the resulting\n         *     table to treat as an index. When updating this table, rows\n         *     sharing an index of a new row will be overwritten. `index`\n         *     cannot be applied at the same time as `limit`.\n         * @param {integer} options.limit The maximum number of rows that can be\n         *     added to this table. When exceeded, old rows will be overwritten\n         *     in the order they were inserted. `limit` cannot be applied at\n         *     the same time as `index`.\n         *\n         * @returns {Promise<table>} A Promise that will resolve to a new\n         * {@link module:perspective~table} object, or be rejected if an error\n         * happens during Table construction.\n         */\n        table: function(data, options) {\n            options = options || {};\n\n            // Always store index and limit as user-provided values or `null`.\n            options.index = options.index || null;\n            options.limit = options.limit || null;\n\n            let data_accessor;\n            let is_arrow = false;\n            let overridden_types = {};\n            let is_csv = false;\n\n            if (data instanceof ArrayBuffer || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\n                data_accessor = new Uint8Array(data);\n                is_arrow = true;\n            } else if (typeof data === \"string\") {\n                if (data[0] === \",\") {\n                    data = \"_\" + data;\n                }\n                is_csv = true;\n                is_arrow = true;\n                data_accessor = data;\n            } else {\n                accessor.clean();\n                overridden_types = accessor.init(data);\n                data_accessor = accessor;\n            }\n\n            if (options.index && options.limit) {\n                throw `Cannot specify both index '${options.index}' and limit '${options.limit}'.`;\n            }\n\n            let _Table;\n\n            try {\n                const op = __MODULE__.t_op.OP_INSERT;\n\n                // C++ Table constructor cannot take null values for index\n                // and limit, so `make_table` will convert null to default\n                // values of \"\" for index and 4294967295 for limit. Tables\n                // must be created on port 0.\n                _Table = make_table(data_accessor, undefined, options.index, options.limit, op, false, is_arrow, is_csv, 0);\n\n                // Pass through user-provided values or `null` to the\n                // Javascript Table constructor.\n                return new table(_Table, options.index, options.limit, overridden_types);\n            } catch (e) {\n                if (_Table) {\n                    _Table.delete();\n                }\n                console.error(`Table initialization failed: ${e}`);\n                throw e;\n            }\n        }\n    };\n\n    for (let prop of Object.keys(defaults)) {\n        perspective[prop] = defaults[prop];\n    }\n\n    /**\n     * Hosting Perspective\n     *\n     * Create a WebWorker API that loads perspective in `init` and extends\n     * `post` using the worker's `postMessage` method.\n     *\n     * If Perspective is running inside a Web Worker, use the WebSorkerServer as\n     * default.\n     *\n     * @extends Server\n     * @private\n     */\n    class WebWorkerServer extends Server {\n        /**\n         * On initialization, listen for messages posted from the client and\n         * send it to `Server.process()`.\n         *\n         * @param perspective a reference to the Perspective module, allowing\n         * the `Server` to access Perspective methods.\n         */\n        constructor(perspective) {\n            super(perspective);\n            self.addEventListener(\"message\", e => this.process(e.data), false);\n        }\n\n        /**\n         * Implements the `Server`'s `post()` method using the Web Worker\n         * `postMessage()` API.\n         *\n         * @param {Object} msg a message to pass to the client\n         * @param {*} transfer a transferable object to pass to the client, if\n         * needed\n         */\n        post(msg, transfer) {\n            self.postMessage(msg, transfer);\n        }\n\n        /**\n         * When initialized, replace Perspective's internal `__MODULE` variable\n         * with the WASM binary.\n         *\n         * @param {ArrayBuffer} buffer an ArrayBuffer or Buffer containing the\n         * Perspective WASM code\n         */\n        init(msg) {\n            if (typeof WebAssembly === \"undefined\") {\n                throw new Error(\"WebAssembly not supported\");\n            } else {\n                __MODULE__({\n                    wasmBinary: msg.buffer,\n                    wasmJSMethod: \"native-wasm\"\n                }).then(mod => {\n                    __MODULE__ = mod;\n                    super.init(msg);\n                });\n            }\n        }\n    }\n\n    /**\n     * Use WebSorkerServer as default inside a Web Worker, where `window` is\n     * replaced with `self`.\n     */\n    if (typeof self !== \"undefined\" && self.addEventListener) {\n        new WebWorkerServer(perspective);\n    }\n\n    return perspective;\n}\n"],"file":"perspective.js"}