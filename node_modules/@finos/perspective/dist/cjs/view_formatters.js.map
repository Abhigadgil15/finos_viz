{"version":3,"sources":["../../src/js/view_formatters.js"],"names":["jsonFormatter","initDataValue","initRowValue","initColumnValue","row","setColumnValue","addColumnValue","addRow","data","formatData","slice","csvFormatter","colName","delimiter","format","x","columns","Object","csv","column","jsonTableFormatter","new_data"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nconst jsonFormatter = {\n    initDataValue: () => [],\n    initRowValue: () => ({}),\n    initColumnValue: (data, row, colName) => (row[colName] = []),\n    setColumnValue: (data, row, colName, value) => (row[colName] = value),\n    addColumnValue: (data, row, colName, value) => row[colName].unshift(value),\n    addRow: (data, row) => data.push(row),\n    formatData: data => data,\n    slice: (data, start) => data.slice(start)\n};\n\nconst csvFormatter = Object.assign({}, jsonFormatter, {\n    addColumnValue: (data, row, colName, value) => row[colName.split(\"|\").join(\",\")].unshift(value),\n    setColumnValue: (data, row, colName, value) => (row[colName.split(\"|\").join(\",\")] = value),\n    formatData: function(data, {delimiter = \",\"} = {}) {\n        if (data.length === 0) {\n            return \"\";\n        }\n\n        const format = function(x) {\n            if (x === null) {\n                return \"\";\n            }\n            switch (typeof x) {\n                case \"object\":\n                case \"string\":\n                    // CSV escapes with double double quotes, for real.\n                    // Section 2.7 of the fake\n                    // [CSV spec](https://tools.ietf.org/html/rfc4180)\n                    return x.indexOf(delimiter) > -1 ? `\"${x.replace(/\\\"/g, '\"\"')}\"` : x.toString();\n                case \"number\":\n                    return x;\n                case \"boolean\":\n                    return x.toString();\n            }\n        };\n\n        const columns = Object.keys(data[0]);\n        let csv = columns.map(format).join(delimiter);\n        for (let x = 0; x < data.length; x++) {\n            csv += \"\\r\\n\" + columns.map(column => format(data[x][column])).join(delimiter);\n        }\n\n        return csv;\n    }\n});\n\nconst jsonTableFormatter = {\n    initDataValue: () => new Object(),\n    initRowValue: () => {},\n    setColumnValue: (data, row, colName, value) => {\n        data[colName] = data[colName] || [];\n        data[colName].push(value);\n    },\n    addColumnValue: (data, row, colName, value) => {\n        data[colName] = data[colName] || [];\n        data[colName][data[colName].length - 1].unshift(value);\n    },\n    initColumnValue: (data, row, colName) => {\n        data[colName] = data[colName] || [];\n        data[colName].push([]);\n    },\n    addRow: () => {},\n    formatData: data => data,\n    slice: (data, start) => {\n        let new_data = {};\n        for (let x in data) {\n            new_data[x] = data[x].slice(start);\n        }\n        return new_data;\n    }\n};\n\nexport default {\n    jsonFormatter,\n    jsonTableFormatter,\n    csvFormatter\n};\n"],"file":"view_formatters.js"}