{"version":3,"sources":["../../../src/js/websocket/manager.js"],"names":["Server","CLIENT_ID_GEN","WebSocketManager","constructor","args","requests_id_map","Map","requests","websockets","chunk_size","setInterval","Object","entries","forEach","id","ws","isAlive","terminate","add_connection","binaryType","on","msg","send","_pending_binary","binary","new_args","length","concat","slice","binary_length","JSON","parse","compoundId","set","process","e","console","error","clear_views","post","transferable","req","readyState","Error","get","binary_msg","byteLength","stringify","_post_chunked","subscribe","delete","request","start","end","setTimeout","_host","cache","name","input","undefined","on_delete","host_table","table","_tables","eject_table","eject_view","_views"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport {Server} from \"../api/server.js\";\n\nlet CLIENT_ID_GEN = 0;\n\n/**\n * A WebSocket Manager instance to host a Perspective server in NodeJS.\n */\nexport class WebSocketManager extends Server {\n    constructor(...args) {\n        super(...args);\n        this.requests_id_map = new Map();\n        this.requests = {};\n        this.websockets = {};\n\n        // Send chunks of this size (in bytes)\n        this.chunk_size = 50 * 1000 * 1000;\n\n        // clear invalid connections\n        setInterval(() => {\n            Object.entries(this.websockets).forEach(([id, ws]) => {\n                if (ws.isAlive === false) {\n                    delete this.websockets[id];\n                    return ws.terminate();\n                }\n                ws.isAlive = false;\n            });\n        }, 30000);\n    }\n\n    /**\n     * Add a new websocket connection to the manager, and define a handler\n     * for all incoming messages. If the incoming message has `binary_length`\n     * set, handle incoming `ArrayBuffers` correctly.\n     *\n     * The WebsocketManager manages the websocket connection and processes every\n     * message received from each connections. When a websocket connection is\n     * `closed`, the websocket manager will clear all subscriptions associated\n     * with the connection.\n     *\n     * @param {WebSocket} ws a websocket connection\n     */\n    add_connection(ws) {\n        ws.isAlive = true;\n        ws.binaryType = \"arraybuffer\";\n        ws.id = CLIENT_ID_GEN++;\n\n        // Parse incoming messages\n        ws.on(\"message\", msg => {\n            ws.isAlive = true;\n\n            if (msg === \"ping\") {\n                ws.send(\"pong\");\n                return;\n            }\n\n            if (this._pending_binary) {\n                // Combine ArrayBuffer and previous message so that metadata can\n                // be reconstituted for the server, as the server needs the\n                // whole message to correctly delegate commands.\n                const binary = msg;\n                let new_args = [binary];\n                msg = this._pending_binary;\n\n                if (msg.args && msg.args.length > 1) {\n                    new_args = new_args.concat(msg.args.slice(1));\n                }\n\n                msg.args = new_args;\n\n                delete msg.binary_length;\n                delete this._pending_binary;\n            } else {\n                msg = JSON.parse(msg);\n\n                if (msg.binary_length) {\n                    this._pending_binary = msg;\n                    return;\n                }\n            }\n\n            try {\n                // Send all messages to the handler defined in\n                // Perspective.Server\n                const compoundId = `${msg.id}/${ws.id}`;\n                this.requests_id_map.set(compoundId, msg.id);\n                msg.id = compoundId;\n                this.requests[msg.id] = {\n                    ws,\n                    msg\n                };\n                this.process(msg, ws.id);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n        ws.on(\"close\", () => {\n            this.clear_views(ws.id);\n        });\n        ws.on(\"error\", console.error);\n    }\n\n    /**\n     * Send an asynchronous message to the Perspective client through\n     * the websocket.\n     *\n     * If the `transferable` param is set, pass two messages: the string\n     * representation of the message and then the ArrayBuffer data that needs to\n     * be transferred. `binary_length` tells the client to expect the next\n     * message to be a transferable object.\n     *\n     * @param {Object} msg a valid JSON-serializable message to pass to the\n     * client\n     * @param {*} transferable a transferable object to be sent to the client\n     */\n    post(msg, transferable) {\n        const req = this.requests[msg.id];\n        const id = msg.id;\n        if (req.ws.readyState > 1) {\n            delete this.requests[id];\n            throw new Error(\"Connection closed\");\n        }\n        msg.id = this.requests_id_map.get(id);\n        if (transferable) {\n            const binary_msg = transferable[0];\n            msg.binary_length = binary_msg.byteLength;\n            req.ws.send(JSON.stringify(msg));\n            this._post_chunked(req, binary_msg, 0, this.chunk_size, binary_msg.byteLength);\n        } else {\n            req.ws.send(JSON.stringify(msg));\n        }\n        if (!req.msg.subscribe) {\n            this.requests_id_map.delete(id);\n            delete this.requests[id];\n        }\n    }\n\n    /**\n     * Send a binary message (in the transferable param) in chunks.\n     *\n     * @param {*} request\n     * @param {ArrayBuffer} binary\n     * @param {Number} start\n     * @param {Number} end\n     * @param {Number} length\n     */\n    _post_chunked(request, binary, start, end, length) {\n        if (start < length) {\n            end = start + this.chunk_size;\n            if (end > length) end = length;\n            request.ws.send(binary.slice(start, end));\n            start = end;\n            setTimeout(() => {\n                this._post_chunked(request, binary, start, end, length);\n            }, 0);\n        }\n    }\n\n    _host(cache, name, input) {\n        if (cache[name] !== undefined) {\n            throw new Error(`\"${name}\" already exists`);\n        }\n        input.on_delete(() => {\n            delete cache[name];\n        });\n        cache[name] = input;\n    }\n\n    /**\n     * Expose a Perspective `table` through the WebSocket, allowing\n     * it to be accessed by a unique name from a client.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     * @param {perspective.table} table `table` to host.\n     */\n    host_table(name, table) {\n        this._host(this._tables, name, table);\n    }\n\n    /**\n     * Cease hosting a `table` on this server.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     */\n    eject_table(name) {\n        delete this._tables[name];\n    }\n\n    /**\n     * Cease hosting a `view` on this server.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     */\n    eject_view(name) {\n        delete this._views[name];\n    }\n}\n"],"file":"manager.js"}