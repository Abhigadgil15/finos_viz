{"version":3,"sources":["../../src/js/perspective.js"],"names":["defaults","get_type_config","DataAccessor","extract_vector","extract_map","fill_vector","bindall","get_column_type","Server","formatters","global","performance","undefined","now","Date","self","WARNED_KEYS","Set","Module","__MODULE__","accessor","SIDES","_POOL_DEBOUNCES","_set_process","pool","table_id","setTimeout","_call_process","_process","_remove_process","memory_usage","mem","memory","JSON","parse","stringify","process","memoryUsage","wasmHeap","HEAP8","length","make_table","_Table","index","limit","op","is_update","is_arrow","is_csv","port_id","get_pool","get_id","t_op","OP_DELETE","view","table","sides","config","view_config","name","_View","is_unit_context","row_pivots","column_pivots","filter","sort","expressions","make_view_unit","COLUMN_SEPARATOR_STRING","make_view_zero","make_view_one","make_view_two","ctx","get_context","column_only","is_column_only","update_callbacks","overridden_types","_delete_callbacks","prototype","get_config","delete","views","splice","indexOf","i","j","val","forEach","cb","_num_hidden","hidden","columns","col_path_vector_to_string","vector","extracted","size","s","get","push","scalar_to_val","extract_vector_scalar","item","schema","override","key","Object","keys","colname","split","type","expression_schema","_column_names","skip","depth","column_names","map","x","join","column_paths","get_data_slice","start_row","end_row","start_col","end_col","get_data_slice_unit","num_sides","nidx","_parse_format_options","options","max_cols","num_columns","max_rows","num_rows","psp_offset","viewport","top","Math","min","height","left","width","floor","ceil","get_min_max","get_min_max_unit","to_format","formatter","bind","is_formatted","formatted","get_pkeys","get_ids","id","leaves_only","has_row_path","get_from_data_slice","get_from_data_slice_unit","slice","ns","get_column_names","col_names","data","initDataValue","ridx","row_path","get_row_path","row","initRowValue","initColumnValue","cidx","col_name","col_type","type_config","value","addColumnValue","toLocaleString","format","setColumnValue","addRow","formatData","column_to_format","format_function","names","idx","data_slice","get_slice","get_column_slice","dtype","get_column_dtype","rst","to_columns","call","jsonTableFormatter","to_json","jsonFormatter","to_csv","csvFormatter","col_to_js_typed_array","to_arrow","to_arrow_unit","to_arrow_zero","to_arrow_one","to_arrow_two","ncols","nhidden","get_row_expanded","expand","collapse","set_depth","_get_step_delta","delta","get_step_delta","cells","rows","results","Number","parseInt","concat","apply","_get_row_delta","get_row_delta_unit","on_update","callback","mode","Error","_get_deltas_enabled","_set_deltas_enabled","orig_callback","cache","updated","filterInPlace","a","condition","remove_update","total","console","assert","on_delete","remove_delete","initial_length","aggregates","filter_op","row_pivot_depth","column_pivot_depth","get_row_pivots","make_string_vector","get_column_pivots","get_columns","get_filter","make_2d_val_vector","filter_vector","make_val_vector","filled","push_back","get_sort","make_2d_string_vector","sort_vector","get_expressions","expression","inner","gnode_id","get_gnode","set_update_delegate","random","initialized","make_port","remove_port","_update_callback","e","get_index","get_limit","clear","reset_gnode","replace","update","unregister_gnode","get_schema","types","new_schema","parse_expression_strings","validated_expressions","expression_idx_map","expression_string","includes","error","column_name_map","column_id_map","running_cidx","expression_alias","parsed_expression_string","_","alias","trim","cname","column_id","match","full","substr","validated","validate_expressions","errors","validation_results","get_expression_schema","expression_errors","get_expression_errors","expression_aliases","error_aliases","error_object","is_valid_filter","perspective","FILTER_OPERATORS","isNull","isNotNull","exists","is_valid_datetime","_config","CONFIG_ALIASES","has","warn","add","agg","CONFIG_VALID_KEYS","table_schema","expr","is_compare","vc","v","meter","initialize_profile_thread","_msgs","start","poll","log","toFixed","pdata","cols","ArrayBuffer","Uint8Array","init","row_count","has_index","explicit_index","t_dtype","DTYPE_INT32","OP_INSERT","remove","execute","f","__module__","worker","data_accessor","Buffer","clean","prop","WebWorkerServer","constructor","addEventListener","post","msg","transfer","postMessage","WebAssembly","wasmBinary","buffer","wasmJSMethod","then","mod"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,QAAZ,MAA0B,uBAA1B;AACA,SAAQC,eAAR,QAA8B,mBAA9B;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,cAAR,EAAwBC,WAAxB,EAAqCC,WAArC,QAAuD,iBAAvD;AACA,SAAQC,OAAR,EAAiBC,eAAjB,QAAuC,YAAvC;AACA,SAAQC,MAAR,QAAqB,iBAArB;AAEA,OAAOC,UAAP,MAAuB,mBAAvB,C,CAEA;AACA;;AACA,IAAIC,MAAM,CAACC,WAAP,KAAuBC,SAA3B,EAAsC;AAClCF,EAAAA,MAAM,CAACC,WAAP,GAAqB;AAACE,IAAAA,GAAG,EAAEC,IAAI,CAACD;AAAX,GAArB;AACH;;AAED,IAAI,OAAOE,IAAP,KAAgB,WAAhB,IAA+BA,IAAI,CAACJ,WAAL,KAAqBC,SAAxD,EAAmE;AAC/DG,EAAAA,IAAI,CAACJ,WAAL,GAAmB;AAACE,IAAAA,GAAG,EAAEC,IAAI,CAACD;AAAX,GAAnB;AACH;;AAED,MAAMG,WAAW,GAAG,IAAIC,GAAJ,EAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,UAASC,MAAT,EAAiB;AAC5B,MAAIC,UAAU,GAAGD,MAAjB;AACA,MAAIE,QAAQ,GAAG,IAAIlB,YAAJ,EAAf;AACA,QAAMmB,KAAK,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,CAAd;AAEA;AACJ;AACA;AACA;AACA;;AAEI,MAAIC,eAAe,GAAG,EAAtB;;AAEA,WAASC,YAAT,CAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AAClC,QAAI,CAACH,eAAe,CAACG,QAAD,CAApB,EAAgC;AAC5BH,MAAAA,eAAe,CAACG,QAAD,CAAf,GAA4BD,IAA5B;AACAE,MAAAA,UAAU,CAAC,MAAMC,aAAa,CAACF,QAAD,CAApB,CAAV;AACH;AACJ;;AAED,WAASE,aAAT,CAAuBF,QAAvB,EAAiC;AAC7B,UAAMD,IAAI,GAAGF,eAAe,CAACG,QAAD,CAA5B;;AACA,QAAID,IAAJ,EAAU;AACNA,MAAAA,IAAI,CAACI,QAAL;;AACAC,MAAAA,eAAe,CAACJ,QAAD,CAAf;AACH;AACJ;;AAED,WAASI,eAAT,CAAyBJ,QAAzB,EAAmC;AAC/B,WAAOH,eAAe,CAACG,QAAD,CAAtB;AACH;;AAED,WAASK,YAAT,GAAwB;AACpB,UAAMC,GAAG,GAAGpB,WAAW,CAACqB,MAAZ,GAAqBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAexB,WAAW,CAACqB,MAA3B,EAAmC,CAAC,iBAAD,EAAoB,gBAApB,EAAsC,iBAAtC,CAAnC,CAAX,CAArB,GAAgII,OAAO,CAACC,WAAR,EAA5I;AACAN,IAAAA,GAAG,CAACO,QAAJ,GAAenB,UAAU,CAACoB,KAAX,CAAiBC,MAAhC;AACA,WAAOT,GAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASU,UAAT,CAAoBrB,QAApB,EAA8BsB,MAA9B,EAAsCC,KAAtC,EAA6CC,KAA7C,EAAoDC,EAApD,EAAwDC,SAAxD,EAAmEC,QAAnE,EAA6EC,MAA7E,EAAqFC,OAArF,EAA8F;AAC1F;AACA;AACA,QAAI,CAACN,KAAL,EAAY;AACRA,MAAAA,KAAK,GAAG,EAAR;AACH;;AAED,QAAI,CAACC,KAAL,EAAY;AACRA,MAAAA,KAAK,GAAG,UAAR;AACH;;AAEDF,IAAAA,MAAM,GAAGvB,UAAU,CAACsB,UAAX,CAAsBC,MAAtB,EAA8BtB,QAA9B,EAAwCwB,KAAxC,EAA+CD,KAA/C,EAAsDE,EAAtD,EAA0DC,SAA1D,EAAqEC,QAArE,EAA+EC,MAA/E,EAAuFC,OAAvF,CAAT;;AAEA,UAAMzB,IAAI,GAAGkB,MAAM,CAACQ,QAAP,EAAb;;AACA,UAAMzB,QAAQ,GAAGiB,MAAM,CAACS,MAAP,EAAjB;;AAEA,QAAIL,SAAS,IAAID,EAAE,IAAI1B,UAAU,CAACiC,IAAX,CAAgBC,SAAvC,EAAkD;AAC9C9B,MAAAA,YAAY,CAACC,IAAD,EAAOC,QAAP,CAAZ;AACH,KAFD,MAEO;AACHD,MAAAA,IAAI,CAACI,QAAL;AACH;;AAED,WAAOc,MAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASY,IAAT,CAAcC,KAAd,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,WAApC,EAAiDC,IAAjD,EAAuD;AACnD,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAahD,SAAb;AACA,SAAK2C,KAAL,GAAaA,KAAb;AAEA,SAAKE,MAAL,GAAcA,MAAM,IAAI,EAAxB;AACA,SAAKC,WAAL,GAAmBA,WAAW,IAAI,IAAIA,WAAJ,EAAlC;AAEA,SAAKG,eAAL,GACI,KAAKN,KAAL,CAAWZ,KAAX,KAAqB,EAArB,IACAa,KAAK,KAAK,CADV,IAEA,KAAKE,WAAL,CAAiBI,UAAjB,CAA4BtB,MAA5B,KAAuC,CAFvC,IAGA,KAAKkB,WAAL,CAAiBK,aAAjB,CAA+BvB,MAA/B,KAA0C,CAH1C,IAIA,KAAKkB,WAAL,CAAiBM,MAAjB,CAAwBxB,MAAxB,KAAmC,CAJnC,IAKA,KAAKkB,WAAL,CAAiBO,IAAjB,CAAsBzB,MAAtB,KAAiC,CALjC,IAMA,KAAKkB,WAAL,CAAiBQ,WAAjB,CAA6B1B,MAA7B,KAAwC,CAP5C;;AASA,QAAI,KAAKqB,eAAT,EAA0B;AACtB,WAAKD,KAAL,GAAazC,UAAU,CAACgD,cAAX,CAA0BZ,KAAK,CAACb,MAAhC,EAAwCiB,IAAxC,EAA8C3D,QAAQ,CAACoE,uBAAvD,EAAgF,KAAKV,WAArF,EAAkG,IAAlG,CAAb;AACH,KAFD,MAEO,IAAIF,KAAK,KAAK,CAAd,EAAiB;AACpB,WAAKI,KAAL,GAAazC,UAAU,CAACkD,cAAX,CAA0Bd,KAAK,CAACb,MAAhC,EAAwCiB,IAAxC,EAA8C3D,QAAQ,CAACoE,uBAAvD,EAAgF,KAAKV,WAArF,EAAkG,IAAlG,CAAb;AACH,KAFM,MAEA,IAAIF,KAAK,KAAK,CAAd,EAAiB;AACpB,WAAKI,KAAL,GAAazC,UAAU,CAACmD,aAAX,CAAyBf,KAAK,CAACb,MAA/B,EAAuCiB,IAAvC,EAA6C3D,QAAQ,CAACoE,uBAAtD,EAA+E,KAAKV,WAApF,EAAiG,IAAjG,CAAb;AACH,KAFM,MAEA,IAAIF,KAAK,KAAK,CAAd,EAAiB;AACpB,WAAKI,KAAL,GAAazC,UAAU,CAACoD,aAAX,CAAyBhB,KAAK,CAACb,MAA/B,EAAuCiB,IAAvC,EAA6C3D,QAAQ,CAACoE,uBAAtD,EAA+E,KAAKV,WAApF,EAAiG,IAAjG,CAAb;AACH;;AAED,SAAKc,GAAL,GAAW,KAAKZ,KAAL,CAAWa,WAAX,EAAX;AACA,SAAKC,WAAL,GAAmB,KAAKd,KAAL,CAAWe,cAAX,EAAnB;AACA,SAAKC,gBAAL,GAAwB,KAAKrB,KAAL,CAAWqB,gBAAnC;AACA,SAAKC,gBAAL,GAAwB,KAAKtB,KAAL,CAAWsB,gBAAnC;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACAxE,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIgD,EAAAA,IAAI,CAACyB,SAAL,CAAeC,UAAf,GAA4B,YAAW;AACnC,WAAO/C,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKsB,MAApB,CAAX,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIH,EAAAA,IAAI,CAACyB,SAAL,CAAeE,MAAf,GAAwB,YAAW;AAC/BpD,IAAAA,eAAe,CAAC,KAAK0B,KAAL,CAAWJ,MAAX,EAAD,CAAf;;AACA,SAAKS,KAAL,CAAWqB,MAAX;;AACA,SAAKT,GAAL,CAASS,MAAT;AAEA,SAAK1B,KAAL,CAAW2B,KAAX,CAAiBC,MAAjB,CAAwB,KAAK5B,KAAL,CAAW2B,KAAX,CAAiBE,OAAjB,CAAyB,IAAzB,CAAxB,EAAwD,CAAxD;AACA,SAAK7B,KAAL,GAAa3C,SAAb;AACA,QAAIyE,CAAC,GAAG,CAAR;AAAA,QACIC,CAAC,GAAG,CADR,CAP+B,CAU/B;;AACA,WAAOD,CAAC,GAAG,KAAKT,gBAAL,CAAsBpC,MAAjC,EAAyC;AACrC,UAAI+C,GAAG,GAAG,KAAKX,gBAAL,CAAsBS,CAAtB,CAAV;AACA,UAAIE,GAAG,CAACjC,IAAJ,KAAa,IAAjB,EAAuB,KAAKsB,gBAAL,CAAsBU,CAAC,EAAvB,IAA6BC,GAA7B;AACvBF,MAAAA,CAAC;AACJ;;AACD,SAAKT,gBAAL,CAAsBpC,MAAtB,GAA+B8C,CAA/B;;AACA,SAAKR,iBAAL,CAAuBU,OAAvB,CAA+BC,EAAE,IAAIA,EAAE,EAAvC;AACH,GAlBD;AAoBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACInC,EAAAA,IAAI,CAACyB,SAAL,CAAevB,KAAf,GAAuB,YAAW;AAC9B,WAAO,KAAKI,KAAL,CAAWJ,KAAX,EAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,IAAI,CAACyB,SAAL,CAAeW,WAAf,GAA6B,YAAW;AACpC;AACA,QAAIC,MAAM,GAAG,CAAb;;AACA,SAAK,MAAM1B,IAAX,IAAmB,KAAKR,MAAL,CAAYQ,IAA/B,EAAqC;AACjC,UAAI,KAAKR,MAAL,CAAYmC,OAAZ,CAAoBR,OAApB,CAA4BnB,IAAI,CAAC,CAAD,CAAhC,MAAyC,CAAC,CAA9C,EAAiD;AAC7C0B,QAAAA,MAAM;AACT;AACJ;;AACD,WAAOA,MAAP;AACH,GATD;;AAWA,WAASE,yBAAT,CAAmCC,MAAnC,EAA2C;AACvC,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,MAAM,CAACE,IAAP,EAApB,EAAmCX,CAAC,EAApC,EAAwC;AACpC,UAAIY,CAAC,GAAGH,MAAM,CAACI,GAAP,CAAWb,CAAX,CAAR;AACAU,MAAAA,SAAS,CAACI,IAAV,CAAehF,UAAU,CAACiF,aAAX,CAAyBH,CAAzB,EAA4B,KAA5B,EAAmC,IAAnC,CAAf;AACAA,MAAAA,CAAC,CAAChB,MAAF;AACH;;AACDa,IAAAA,MAAM,CAACb,MAAP;AACA,WAAOc,SAAP;AACH;;AAED,QAAMM,qBAAqB,GAAG,UAASP,MAAT,EAAiB;AAC3C;AACA;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,MAAM,CAACE,IAAP,EAApB,EAAmCX,CAAC,EAApC,EAAwC;AACpC,UAAIiB,IAAI,GAAGR,MAAM,CAACI,GAAP,CAAWb,CAAX,CAAX;AACAU,MAAAA,SAAS,CAACI,IAAV,CAAeN,yBAAyB,CAACS,IAAD,CAAxC;AACH;;AACDR,IAAAA,MAAM,CAACb,MAAP;AACA,WAAOc,SAAP;AACH,GAVD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzC,EAAAA,IAAI,CAACyB,SAAL,CAAewB,MAAf,GAAwB,UAASC,QAAQ,GAAG,IAApB,EAA0B;AAC9C,UAAMD,MAAM,GAAGnG,WAAW,CAAC,KAAKwD,KAAL,CAAW2C,MAAX,EAAD,CAA1B;;AACA,QAAIC,QAAJ,EAAc;AACV,WAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAlB,EAAuC;AACnC,YAAIK,OAAO,GAAGH,GAAG,CAACI,KAAJ,CAAU7G,QAAQ,CAACoE,uBAAnB,CAAd;AACAwC,QAAAA,OAAO,GAAGA,OAAO,CAACA,OAAO,CAACpE,MAAR,GAAiB,CAAlB,CAAjB;;AACA,YAAI,KAAKqC,gBAAL,CAAsB+B,OAAtB,KAAkC3G,eAAe,CAAC,KAAK4E,gBAAL,CAAsB+B,OAAtB,CAAD,CAAf,CAAgDE,IAAhD,KAAyDP,MAAM,CAACE,GAAD,CAArG,EAA4G;AACxGF,UAAAA,MAAM,CAACE,GAAD,CAAN,GAAc,KAAK5B,gBAAL,CAAsB+B,OAAtB,CAAd;AACH;AACJ;AACJ;;AACD,WAAOL,MAAP;AACH,GAZD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjD,EAAAA,IAAI,CAACyB,SAAL,CAAegC,iBAAf,GAAmC,UAASP,QAAQ,GAAG,IAApB,EAA0B;AACzD,UAAMD,MAAM,GAAGnG,WAAW,CAAC,KAAKwD,KAAL,CAAWmD,iBAAX,EAAD,CAA1B;;AACA,QAAIP,QAAJ,EAAc;AACV,WAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAlB,EAAuC;AACnC,YAAIK,OAAO,GAAGH,GAAG,CAACI,KAAJ,CAAU7G,QAAQ,CAACoE,uBAAnB,CAAd;AACAwC,QAAAA,OAAO,GAAGA,OAAO,CAACA,OAAO,CAACpE,MAAR,GAAiB,CAAlB,CAAjB;;AACA,YAAI,KAAKqC,gBAAL,CAAsB+B,OAAtB,KAAkC3G,eAAe,CAAC,KAAK4E,gBAAL,CAAsB+B,OAAtB,CAAD,CAAf,CAAgDE,IAAhD,KAAyDP,MAAM,CAACE,GAAD,CAArG,EAA4G;AACxGF,UAAAA,MAAM,CAACE,GAAD,CAAN,GAAc,KAAK5B,gBAAL,CAAsB+B,OAAtB,CAAd;AACH;AACJ;AACJ;;AACD,WAAOL,MAAP;AACH,GAZD;;AAcAjD,EAAAA,IAAI,CAACyB,SAAL,CAAeiC,aAAf,GAA+B,UAASC,IAAI,GAAG,KAAhB,EAAuBC,KAAK,GAAG,CAA/B,EAAkC;AAC7D,WAAOb,qBAAqB,CAAC,KAAKzC,KAAL,CAAWuD,YAAX,CAAwBF,IAAxB,EAA8BC,KAA9B,CAAD,CAArB,CAA4DE,GAA5D,CAAgEC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOtH,QAAQ,CAACoE,uBAAhB,CAArE,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACId,EAAAA,IAAI,CAACyB,SAAL,CAAewC,YAAf,GAA8B,YAAW;AACrC,WAAOlB,qBAAqB,CAAC,KAAKzC,KAAL,CAAW2D,YAAX,EAAD,CAArB,CAAiDH,GAAjD,CAAqDC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOtH,QAAQ,CAACoE,uBAAhB,CAA1D,CAAP;AACH,GAFD;;AAIAd,EAAAA,IAAI,CAACyB,SAAL,CAAeyC,cAAf,GAAgC,UAASC,SAAT,EAAoBC,OAApB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiD;AAC7E,QAAI,KAAK/D,eAAT,EAA0B;AACtB,aAAO1C,UAAU,CAAC0G,mBAAX,CAA+B,KAAKjE,KAApC,EAA2C6D,SAA3C,EAAsDC,OAAtD,EAA+DC,SAA/D,EAA0EC,OAA1E,CAAP;AACH,KAFD,MAEO;AACH,YAAME,SAAS,GAAG,KAAKtE,KAAL,EAAlB;AACA,YAAMuE,IAAI,GAAG1G,KAAK,CAACyG,SAAD,CAAlB;AACA,aAAO3G,UAAU,CAAE,kBAAiB4G,IAAK,EAAxB,CAAV,CAAqC,KAAKnE,KAA1C,EAAiD6D,SAAjD,EAA4DC,OAA5D,EAAqEC,SAArE,EAAgFC,OAAhF,CAAP;AACH;AACJ,GARD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMI,qBAAqB,GAAG,UAASC,OAAT,EAAkB;AAC5CA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAMC,QAAQ,GAAG,KAAKtE,KAAL,CAAWuE,WAAX,MAA4B,KAAK3E,KAAL,OAAiB,CAAjB,GAAqB,CAArB,GAAyB,CAArD,CAAjB;;AACA,UAAM4E,QAAQ,GAAG,KAAKxE,KAAL,CAAWyE,QAAX,EAAjB;;AACA,UAAM1C,MAAM,GAAG,KAAKD,WAAL,EAAf;;AACA,UAAM4C,UAAU,GAAG,KAAK9E,KAAL,KAAe,CAAf,IAAoB,KAAKkB,WAAzB,GAAuC,CAAvC,GAA2C,CAA9D;AAEA,UAAM6D,QAAQ,GAAG,KAAK9E,MAAL,CAAY8E,QAAZ,GAAuB,KAAK9E,MAAL,CAAY8E,QAAnC,GAA8C,EAA/D;AACA,UAAMd,SAAS,GAAGQ,OAAO,CAACR,SAAR,KAAsBc,QAAQ,CAACC,GAAT,GAAeD,QAAQ,CAACC,GAAxB,GAA8B,CAApD,CAAlB;AACA,UAAMd,OAAO,GAAGe,IAAI,CAACC,GAAL,CAASN,QAAT,EAAmBH,OAAO,CAACP,OAAR,KAAoB9G,SAApB,GAAgCqH,OAAO,CAACP,OAAxC,GAAkDa,QAAQ,CAACI,MAAT,GAAkBlB,SAAS,GAAGc,QAAQ,CAACI,MAAvC,GAAgDP,QAArH,CAAhB;AACA,UAAMT,SAAS,GAAGM,OAAO,CAACN,SAAR,KAAsBY,QAAQ,CAACK,IAAT,GAAgBL,QAAQ,CAACK,IAAzB,GAAgC,CAAtD,CAAlB;AACA,UAAMhB,OAAO,GAAGa,IAAI,CAACC,GAAL,CAASR,QAAT,EAAmB,CAACD,OAAO,CAACL,OAAR,KAAoBhH,SAApB,GAAgCqH,OAAO,CAACL,OAAR,GAAkBU,UAAlD,GAA+DC,QAAQ,CAACM,KAAT,GAAiBlB,SAAS,GAAGY,QAAQ,CAACM,KAAtC,GAA8CX,QAA9G,KAA2HvC,MAAM,GAAG,CAApI,CAAnB,CAAhB,CAX4C,CAa5C;;AACAsC,IAAAA,OAAO,CAACR,SAAR,GAAoBgB,IAAI,CAACK,KAAL,CAAWrB,SAAX,CAApB;AACAQ,IAAAA,OAAO,CAACP,OAAR,GAAkBe,IAAI,CAACM,IAAL,CAAUrB,OAAV,CAAlB;AACAO,IAAAA,OAAO,CAACN,SAAR,GAAoBc,IAAI,CAACK,KAAL,CAAWnB,SAAX,CAApB;AACAM,IAAAA,OAAO,CAACL,OAAR,GAAkBa,IAAI,CAACM,IAAL,CAAUnB,OAAV,CAAlB;AAEA,WAAOK,OAAP;AACH,GApBD;AAsBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI3E,EAAAA,IAAI,CAACyB,SAAL,CAAeiE,WAAf,GAA6B,UAASpC,OAAT,EAAkB;AAC3C,QAAI,KAAK/C,eAAT,EAA0B;AACtB,aAAO1C,UAAU,CAAC8H,gBAAX,CAA4B,KAAKrF,KAAjC,EAAwCgD,OAAxC,CAAP;AACH,KAFD,MAEO;AACH,YAAMkB,SAAS,GAAG,KAAKtE,KAAL,EAAlB;AACA,YAAMuE,IAAI,GAAG1G,KAAK,CAACyG,SAAD,CAAlB;AACA,aAAO3G,UAAU,CAAE,eAAc4G,IAAK,EAArB,CAAV,CAAkC,KAAKnE,KAAvC,EAA8CgD,OAA9C,CAAP;AACH;AACJ,GARD;AAUA;AACJ;AACA;AACA;AACA;;;AACI,QAAMsC,SAAS,GAAG,UAASjB,OAAT,EAAkBkB,SAAlB,EAA6B;AAC3CxH,IAAAA,aAAa,CAAC,KAAK4B,KAAL,CAAWJ,MAAX,EAAD,CAAb;;AACA8E,IAAAA,OAAO,GAAGD,qBAAqB,CAACoB,IAAtB,CAA2B,IAA3B,EAAiCnB,OAAjC,CAAV;AACA,UAAMR,SAAS,GAAGQ,OAAO,CAACR,SAA1B;AACA,UAAMC,OAAO,GAAGO,OAAO,CAACP,OAAxB;AACA,UAAMC,SAAS,GAAGM,OAAO,CAACN,SAA1B;AACA,UAAMC,OAAO,GAAGK,OAAO,CAACL,OAAxB;;AACA,UAAMjC,MAAM,GAAG,KAAKD,WAAL,EAAf;;AAEA,UAAM2D,YAAY,GAAGpB,OAAO,CAACqB,SAA7B;AACA,UAAMC,SAAS,GAAG,CAAC,CAACtB,OAAO,CAACtF,KAA5B;AACA,UAAM6G,OAAO,GAAG,CAAC,CAACvB,OAAO,CAACwB,EAA1B;AACA,UAAMC,WAAW,GAAG,CAAC,CAACzB,OAAO,CAACyB,WAA9B;AACA,UAAM5B,SAAS,GAAG,KAAKtE,KAAL,EAAlB;AACA,UAAMmG,YAAY,GAAG7B,SAAS,KAAK,CAAd,IAAmB,CAAC,KAAKpD,WAA9C;AACA,UAAMqD,IAAI,GAAG1G,KAAK,CAACyG,SAAD,CAAlB;AAEA,QAAI8B,mBAAJ;;AAEA,QAAI,KAAK/F,eAAT,EAA0B;AACtB+F,MAAAA,mBAAmB,GAAGzI,UAAU,CAAC0I,wBAAjC;AACH,KAFD,MAEO;AACHD,MAAAA,mBAAmB,GAAGzI,UAAU,CAAE,uBAAsB4G,IAAK,EAA7B,CAAhC;AACH;;AAED,UAAM+B,KAAK,GAAG,KAAKtC,cAAL,CAAoBC,SAApB,EAA+BC,OAA/B,EAAwCC,SAAxC,EAAmDC,OAAnD,CAAd;AACA,UAAMmC,EAAE,GAAGD,KAAK,CAACE,gBAAN,EAAX;AACA,UAAMC,SAAS,GAAG5D,qBAAqB,CAAC0D,EAAD,CAArB,CAA0B3C,GAA1B,CAA8BC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOtH,QAAQ,CAACoE,uBAAhB,CAAnC,CAAlB;AACA,UAAMmC,MAAM,GAAG,KAAKA,MAAL,EAAf;AAEA,QAAI2D,IAAI,GAAGf,SAAS,CAACgB,aAAV,EAAX;;AAEA,SAAK,IAAIC,IAAI,GAAG3C,SAAhB,EAA2B2C,IAAI,GAAG1C,OAAlC,EAA2C0C,IAAI,EAA/C,EAAmD;AAC/C,UAAIC,QAAQ,GAAGV,YAAY,GAAGG,KAAK,CAACQ,YAAN,CAAmBF,IAAnB,CAAH,GAA8BxJ,SAAzD;;AACA,UAAI+I,YAAY,IAAID,WAAhB,IAA+BW,QAAQ,CAACrE,IAAT,KAAkB,KAAKvC,MAAL,CAAYK,UAAZ,CAAuBtB,MAA5E,EAAoF;AAChF6H,QAAAA,QAAQ,CAACpF,MAAT;AACA;AACH;;AACD,UAAIsF,GAAG,GAAGpB,SAAS,CAACqB,YAAV,EAAV;;AAEA,UAAIhB,OAAJ,EAAa;AACTL,QAAAA,SAAS,CAACsB,eAAV,CAA0BP,IAA1B,EAAgCK,GAAhC,EAAqC,QAArC;AACH;;AAED,WAAK,IAAIG,IAAI,GAAG/C,SAAhB,EAA2B+C,IAAI,GAAG9C,OAAlC,EAA2C8C,IAAI,EAA/C,EAAmD;AAC/C,cAAMC,QAAQ,GAAGV,SAAS,CAACS,IAAD,CAA1B;AACA,cAAME,QAAQ,GAAGrE,MAAM,CAACoE,QAAD,CAAvB;AACA,cAAME,WAAW,GAAG5K,eAAe,CAAC2K,QAAD,CAAnC;;AACA,YAAIF,IAAI,KAAK/C,SAAT,IAAsBG,SAAS,KAAK,CAAxC,EAA2C;AACvC,cAAI,CAAC,KAAKpD,WAAV,EAAuB;AACnByE,YAAAA,SAAS,CAACsB,eAAV,CAA0BP,IAA1B,EAAgCK,GAAhC,EAAqC,cAArC;;AACA,iBAAK,IAAIlF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgF,QAAQ,CAACrE,IAAT,EAApB,EAAqCX,CAAC,EAAtC,EAA0C;AACtC,oBAAMY,CAAC,GAAGoE,QAAQ,CAACnE,GAAT,CAAab,CAAb,CAAV;;AACA,oBAAMyF,KAAK,GAAG3J,UAAU,CAACiF,aAAX,CAAyBH,CAAzB,EAA4B,KAA5B,EAAmC,KAAnC,CAAd;;AACAA,cAAAA,CAAC,CAAChB,MAAF;AACAkE,cAAAA,SAAS,CAAC4B,cAAV,CAAyBb,IAAzB,EAA+BK,GAA/B,EAAoC,cAApC,EAAoDO,KAApD;;AACA,kBAAItB,OAAJ,EAAa;AACTL,gBAAAA,SAAS,CAAC4B,cAAV,CAAyBb,IAAzB,EAA+BK,GAA/B,EAAoC,QAApC,EAA8CO,KAA9C;AACH;AACJ;AACJ;AACJ,SAbD,MAaO,IAAI,CAACJ,IAAI,IAAI5C,SAAS,GAAG,CAAZ,GAAgB,CAAhB,GAAoB,CAAxB,CAAL,KAAoC,KAAKrE,MAAL,CAAYmC,OAAZ,CAAoBpD,MAApB,GAA6BmD,MAAjE,KAA4E,KAAKlC,MAAL,CAAYmC,OAAZ,CAAoBpD,MAApG,EAA4G;AAC/G;AACA;AACA;AACH,SAJM,MAIA;AACH,cAAIsI,KAAK,GAAGlB,mBAAmB,CAACE,KAAD,EAAQM,IAAR,EAAcM,IAAd,CAA/B;;AACA,cAAIrB,YAAY,IAAIyB,KAAK,KAAK,IAA1B,IAAkCA,KAAK,KAAKlK,SAAhD,EAA2D;AACvD,gBAAIgK,QAAQ,KAAK,UAAb,IAA2BA,QAAQ,KAAK,MAA5C,EAAoD;AAChD;AACA;AACA;AACA;AACAE,cAAAA,KAAK,GAAG,IAAIhK,IAAJ,CAASgK,KAAT,CAAR;AACAA,cAAAA,KAAK,GAAGA,KAAK,CAACE,cAAN,CAAqB,OAArB,EAA8BH,WAAW,CAACI,MAA1C,CAAR;AACH;AACJ;;AACD9B,UAAAA,SAAS,CAAC+B,cAAV,CAAyBhB,IAAzB,EAA+BK,GAA/B,EAAoCI,QAApC,EAA8CG,KAA9C;AACH;AACJ;;AAED,UAAIvB,SAAJ,EAAe;AACX,cAAM5C,IAAI,GAAGmD,KAAK,CAACP,SAAN,CAAgBa,IAAhB,EAAsB,CAAtB,CAAb;AACAjB,QAAAA,SAAS,CAACsB,eAAV,CAA0BP,IAA1B,EAAgCK,GAAhC,EAAqC,WAArC;;AACA,aAAK,IAAIlF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,IAAI,CAACX,IAAL,EAApB,EAAiCX,CAAC,EAAlC,EAAsC;AAClC;AACA;AACA,gBAAMY,CAAC,GAAGU,IAAI,CAACT,GAAL,CAASb,CAAT,CAAV;;AACA,gBAAMyF,KAAK,GAAG3J,UAAU,CAACiF,aAAX,CAAyBH,CAAzB,EAA4B,KAA5B,EAAmC,KAAnC,CAAd;;AACAA,UAAAA,CAAC,CAAChB,MAAF;AACAkE,UAAAA,SAAS,CAAC4B,cAAV,CAAyBb,IAAzB,EAA+BK,GAA/B,EAAoC,WAApC,EAAiDO,KAAjD;AACH;;AACDnE,QAAAA,IAAI,CAAC1B,MAAL;AACH,OA7D8C,CA+D/C;AACA;;;AACA,UAAIuE,OAAO,IAAI1B,SAAS,KAAK,CAA7B,EAAgC;AAC5B,cAAMnB,IAAI,GAAGmD,KAAK,CAACP,SAAN,CAAgBa,IAAhB,EAAsB,CAAtB,CAAb;;AACA,aAAK,IAAI/E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,IAAI,CAACX,IAAL,EAApB,EAAiCX,CAAC,EAAlC,EAAsC;AAClC,gBAAMY,CAAC,GAAGU,IAAI,CAACT,GAAL,CAASb,CAAT,CAAV;;AACA,gBAAMyF,KAAK,GAAG3J,UAAU,CAACiF,aAAX,CAAyBH,CAAzB,EAA4B,KAA5B,EAAmC,KAAnC,CAAd;;AACAA,UAAAA,CAAC,CAAChB,MAAF;AACAkE,UAAAA,SAAS,CAAC4B,cAAV,CAAyBb,IAAzB,EAA+BK,GAA/B,EAAoC,QAApC,EAA8CO,KAA9C;AACH;;AACDnE,QAAAA,IAAI,CAAC1B,MAAL;AACH;;AAED,UAAIoF,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACpF,MAAT;AACH;;AACDkE,MAAAA,SAAS,CAACgC,MAAV,CAAiBjB,IAAjB,EAAuBK,GAAvB;AACH;;AAEDT,IAAAA,KAAK,CAAC7E,MAAN;AACA,WAAOkE,SAAS,CAACiC,UAAV,CAAqBlB,IAArB,EAA2BjC,OAAO,CAACxE,MAAnC,CAAP;AACH,GApHD;AAsHA;AACJ;AACA;AACA;AACA;;;AACI,QAAM4H,gBAAgB,GAAG,UAASV,QAAT,EAAmB1C,OAAnB,EAA4BqD,eAA5B,EAA6C;AAClE,UAAMjD,QAAQ,GAAG,KAAKA,QAAL,EAAjB;AACA,UAAMZ,SAAS,GAAGQ,OAAO,CAACR,SAAR,IAAqB,CAAvC;AACA,UAAMC,OAAO,GAAGO,OAAO,CAACP,OAAR,IAAmBW,QAAnC;;AACA,UAAMkD,KAAK,GAAG,KAAKvE,aAAL,EAAd;;AACA,QAAIwE,GAAG,GAAGD,KAAK,CAACnG,OAAN,CAAcuF,QAAd,CAAV;;AAEA,QAAIa,GAAG,KAAK,CAAC,CAAb,EAAgB;AACZ,aAAO5K,SAAP;AACH,KATiE,CAWlE;AACA;;;AACA,UAAMkH,SAAS,GAAG,KAAKtE,KAAL,EAAlB;;AACA,QAAIsE,SAAS,GAAG,CAAhB,EAAmB;AACf0D,MAAAA,GAAG;AACN,KAhBiE,CAkBlE;;;AACA,QAAI1B,KAAJ,EAAW2B,UAAX;;AAEA,QAAI,CAACxD,OAAO,CAACwD,UAAb,EAAyB;AACrBA,MAAAA,UAAU,GAAG,KAAKjE,cAAL,CAAoBC,SAApB,EAA+BC,OAA/B,EAAwC8D,GAAxC,EAA6CA,GAAG,GAAG,CAAnD,CAAb;AACA1B,MAAAA,KAAK,GAAG2B,UAAU,CAACC,SAAX,EAAR;AACH,KAHD,MAGO;AACH5B,MAAAA,KAAK,GAAG7B,OAAO,CAACwD,UAAR,CAAmBE,gBAAnB,CAAoCH,GAApC,CAAR;AACH;;AAED,UAAMI,KAAK,GAAG,KAAKhI,KAAL,CAAWiI,gBAAX,CAA4BL,GAA5B,CAAd;;AAEA,UAAMM,GAAG,GAAGR,eAAe,CAACxB,KAAD,EAAQ8B,KAAR,EAAeJ,GAAf,CAA3B;AACA1B,IAAAA,KAAK,CAAC7E,MAAN;;AACA,QAAIwG,UAAJ,EAAgB;AACZA,MAAAA,UAAU,CAACxG,MAAX;AACH;;AACD,WAAO6G,GAAP;AACH,GApCD;AAsCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIxI,EAAAA,IAAI,CAACyB,SAAL,CAAegH,UAAf,GAA4B,UAAS9D,OAAT,EAAkB;AAC1C,WAAOiB,SAAS,CAAC8C,IAAV,CAAe,IAAf,EAAqB/D,OAArB,EAA8BxH,UAAU,CAACwL,kBAAzC,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI3I,EAAAA,IAAI,CAACyB,SAAL,CAAemH,OAAf,GAAyB,UAASjE,OAAT,EAAkB;AACvC,WAAOiB,SAAS,CAAC8C,IAAV,CAAe,IAAf,EAAqB/D,OAArB,EAA8BxH,UAAU,CAAC0L,aAAzC,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7I,EAAAA,IAAI,CAACyB,SAAL,CAAeqH,MAAf,GAAwB,UAASnE,OAAT,EAAkB;AACtC,WAAOiB,SAAS,CAAC8C,IAAV,CAAe,IAAf,EAAqB/D,OAArB,EAA8BxH,UAAU,CAAC4L,YAAzC,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/I,EAAAA,IAAI,CAACyB,SAAL,CAAeuH,qBAAf,GAAuC,UAAS3B,QAAT,EAAmB1C,OAAO,GAAG,EAA7B,EAAiC;AACpE,UAAMqD,eAAe,GAAGnK,UAAU,CAAE,uBAAF,CAAlC;AACA,WAAOkK,gBAAgB,CAACW,IAAjB,CAAsB,IAAtB,EAA4BrB,QAA5B,EAAsC1C,OAAtC,EAA+CqD,eAA/C,CAAP;AACH,GAHD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIhI,EAAAA,IAAI,CAACyB,SAAL,CAAewH,QAAf,GAA0B,UAAStE,OAAO,GAAG,EAAnB,EAAuB;AAC7CtG,IAAAA,aAAa,CAAC,KAAK4B,KAAL,CAAWJ,MAAX,EAAD,CAAb;;AACA8E,IAAAA,OAAO,GAAGD,qBAAqB,CAACoB,IAAtB,CAA2B,IAA3B,EAAiCnB,OAAjC,CAAV;AACA,UAAMR,SAAS,GAAGQ,OAAO,CAACR,SAA1B;AACA,UAAMC,OAAO,GAAGO,OAAO,CAACP,OAAxB;AACA,UAAMC,SAAS,GAAGM,OAAO,CAACN,SAA1B;AACA,UAAMC,OAAO,GAAGK,OAAO,CAACL,OAAxB;AACA,UAAMpE,KAAK,GAAG,KAAKA,KAAL,EAAd;;AAEA,QAAI,KAAKK,eAAT,EAA0B;AACtB,aAAO1C,UAAU,CAACqL,aAAX,CAAyB,KAAK5I,KAA9B,EAAqC6D,SAArC,EAAgDC,OAAhD,EAAyDC,SAAzD,EAAoEC,OAApE,CAAP;AACH,KAFD,MAEO,IAAIpE,KAAK,KAAK,CAAd,EAAiB;AACpB,aAAOrC,UAAU,CAACsL,aAAX,CAAyB,KAAK7I,KAA9B,EAAqC6D,SAArC,EAAgDC,OAAhD,EAAyDC,SAAzD,EAAoEC,OAApE,CAAP;AACH,KAFM,MAEA,IAAIpE,KAAK,KAAK,CAAd,EAAiB;AACpB,aAAOrC,UAAU,CAACuL,YAAX,CAAwB,KAAK9I,KAA7B,EAAoC6D,SAApC,EAA+CC,OAA/C,EAAwDC,SAAxD,EAAmEC,OAAnE,CAAP;AACH,KAFM,MAEA,IAAIpE,KAAK,KAAK,CAAd,EAAiB;AACpB,aAAOrC,UAAU,CAACwL,YAAX,CAAwB,KAAK/I,KAA7B,EAAoC6D,SAApC,EAA+CC,OAA/C,EAAwDC,SAAxD,EAAmEC,OAAnE,CAAP;AACH;AACJ,GAlBD;AAoBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItE,EAAAA,IAAI,CAACyB,SAAL,CAAesD,QAAf,GAA0B,YAAW;AACjC,WAAO,KAAKzE,KAAL,CAAWyE,QAAX,EAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/E,EAAAA,IAAI,CAACyB,SAAL,CAAeoD,WAAf,GAA6B,YAAW;AACpC,UAAMyE,KAAK,GAAG,KAAKhJ,KAAL,CAAWuE,WAAX,EAAd;;AACA,UAAM0E,OAAO,GAAG,KAAKnH,WAAL,EAAhB;;AACA,WAAOkH,KAAK,GAAIA,KAAK,IAAI,KAAKnJ,MAAL,CAAYmC,OAAZ,CAAoBpD,MAApB,GAA6BqK,OAAjC,CAAN,GAAmDA,OAAlE;AACH,GAJD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIvJ,EAAAA,IAAI,CAACyB,SAAL,CAAe+H,gBAAf,GAAkC,UAAStB,GAAT,EAAc;AAC5C,WAAO,KAAK5H,KAAL,CAAWkJ,gBAAX,CAA4BtB,GAA5B,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIlI,EAAAA,IAAI,CAACyB,SAAL,CAAegI,MAAf,GAAwB,UAASvB,GAAT,EAAc;AAClC,WAAO,KAAK5H,KAAL,CAAWmJ,MAAX,CAAkBvB,GAAlB,EAAuB,KAAK/H,MAAL,CAAYK,UAAZ,CAAuBtB,MAA9C,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIc,EAAAA,IAAI,CAACyB,SAAL,CAAeiI,QAAf,GAA0B,UAASxB,GAAT,EAAc;AACpC,WAAO,KAAK5H,KAAL,CAAWoJ,QAAX,CAAoBxB,GAApB,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;;;AACIlI,EAAAA,IAAI,CAACyB,SAAL,CAAekI,SAAf,GAA2B,UAAS/F,KAAT,EAAgB;AACvC,WAAO,KAAKtD,KAAL,CAAWqJ,SAAX,CAAqB/F,KAArB,EAA4B,KAAKzD,MAAL,CAAYK,UAAZ,CAAuBtB,MAAnD,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;;;AACIc,EAAAA,IAAI,CAACyB,SAAL,CAAemI,eAAf,GAAiC,kBAAiB;AAC9C,QAAIC,KAAK,GAAG,KAAKvJ,KAAL,CAAWwJ,cAAX,CAA0B,CAA1B,EAA6B,UAA7B,CAAZ;;AACA,QAAIlD,IAAJ;;AACA,QAAIiD,KAAK,CAACE,KAAN,CAAYrH,IAAZ,OAAuB,CAA3B,EAA8B;AAC1B;AACAkE,MAAAA,IAAI,GAAG,KAAKgC,OAAL,EAAP;AACH,KAHD,MAGO;AACH,UAAIoB,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIjG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8F,KAAK,CAACE,KAAN,CAAYrH,IAAZ,EAApB,EAAwCqB,CAAC,EAAzC,EAA6C;AACzCiG,QAAAA,IAAI,CAACH,KAAK,CAACE,KAAN,CAAYnH,GAAZ,CAAgBmB,CAAhB,EAAmBkD,GAApB,CAAJ,GAA+B,IAA/B;AACH;;AACD+C,MAAAA,IAAI,GAAG5G,MAAM,CAACC,IAAP,CAAY2G,IAAZ,CAAP;AACA,YAAMC,OAAO,GAAGD,IAAI,CAAClG,GAAL,CAASmD,GAAG,IACxB,KAAK2B,OAAL,CAAa;AACTzE,QAAAA,SAAS,EAAE+F,MAAM,CAACC,QAAP,CAAgBlD,GAAhB,CADF;AAET7C,QAAAA,OAAO,EAAE8F,MAAM,CAACC,QAAP,CAAgBlD,GAAhB,IAAuB;AAFvB,OAAb,CADY,CAAhB;AAMAL,MAAAA,IAAI,GAAG,GAAGwD,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBJ,OAApB,CAAP;AACH;;AACDJ,IAAAA,KAAK,CAACE,KAAN,CAAYpI,MAAZ;AACA,WAAOiF,IAAP;AACH,GAtBD;AAwBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5G,EAAAA,IAAI,CAACyB,SAAL,CAAe6I,cAAf,GAAgC,kBAAiB;AAC7C,QAAI,KAAK/J,eAAT,EAA0B;AACtB,aAAO1C,UAAU,CAAC0M,kBAAX,CAA8B,KAAKjK,KAAnC,CAAP;AACH,KAFD,MAEO;AACH,YAAMJ,KAAK,GAAG,KAAKA,KAAL,EAAd;AACA,YAAMuE,IAAI,GAAG1G,KAAK,CAACmC,KAAD,CAAlB;AACA,aAAOrC,UAAU,CAAE,iBAAgB4G,IAAK,EAAvB,CAAV,CAAoC,KAAKnE,KAAzC,CAAP;AACH;AACJ,GARD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIN,EAAAA,IAAI,CAACyB,SAAL,CAAe+I,SAAf,GAA2B,UAASC,QAAT,EAAmB;AAACC,IAAAA,IAAI,GAAG;AAAR,MAAkB,EAArC,EAAyC;AAChErM,IAAAA,aAAa,CAAC,KAAK4B,KAAL,CAAWJ,MAAX,EAAD,CAAb;;AAEA,QAAI,CAAC,MAAD,EAAS,KAAT,EAAgBiC,OAAhB,CAAwB4I,IAAxB,MAAkC,CAAC,CAAvC,EAA0C;AACtC,YAAM,IAAIC,KAAJ,CAAW,wBAAuBD,IAAK,uCAAvC,CAAN;AACH;;AAED,QAAIA,IAAI,KAAK,KAAb,EAAoB;AAChB;AACA,UAAI,CAAC,KAAKpK,KAAL,CAAWsK,mBAAX,EAAL,EAAuC;AACnC,aAAKtK,KAAL,CAAWuK,mBAAX,CAA+B,IAA/B;AACH;AACJ;;AAED,SAAKvJ,gBAAL,CAAsBuB,IAAtB,CAA2B;AACvB7C,MAAAA,IAAI,EAAE,IADiB;AAEvB8K,MAAAA,aAAa,EAAEL,QAFQ;AAGvBA,MAAAA,QAAQ,EAAE,OAAO9K,OAAP,EAAgBoL,KAAhB,KAA0B;AAChC;AACA;AACA;AACA,YAAIA,KAAK,CAACpL,OAAD,CAAL,KAAmBrC,SAAvB,EAAkC;AAC9ByN,UAAAA,KAAK,CAACpL,OAAD,CAAL,GAAiB,EAAjB;AACH;;AAED,YAAIqL,OAAO,GAAG;AAACrL,UAAAA;AAAD,SAAd;;AAEA,YAAI+K,IAAI,KAAK,KAAb,EAAoB;AAChB,cAAIK,KAAK,CAACpL,OAAD,CAAL,CAAe,WAAf,MAAgCrC,SAApC,EAA+C;AAC3CyN,YAAAA,KAAK,CAACpL,OAAD,CAAL,CAAe,WAAf,IAA8B,MAAM,KAAK2K,cAAL,EAApC;AACH;;AACDU,UAAAA,OAAO,CAACnB,KAAR,GAAgBkB,KAAK,CAACpL,OAAD,CAAL,CAAe,WAAf,CAAhB;AACH,SAf+B,CAiBhC;AACA;;;AACA8K,QAAAA,QAAQ,CAACO,OAAD,CAAR;AACH;AAvBsB,KAA3B;AAyBH,GAvCD;;AAyCA,WAASC,aAAT,CAAuBC,CAAvB,EAA0BC,SAA1B,EAAqC;AACjC,QAAIpJ,CAAC,GAAG,CAAR;AAAA,QACIC,CAAC,GAAG,CADR;;AAGA,WAAOD,CAAC,GAAGmJ,CAAC,CAAChM,MAAb,EAAqB;AACjB,YAAM+C,GAAG,GAAGiJ,CAAC,CAACnJ,CAAD,CAAb;AACA,UAAIoJ,SAAS,CAAClJ,GAAD,EAAMF,CAAN,EAASmJ,CAAT,CAAb,EAA0BA,CAAC,CAAClJ,CAAC,EAAF,CAAD,GAASC,GAAT;AAC1BF,MAAAA,CAAC;AACJ;;AAEDmJ,IAAAA,CAAC,CAAChM,MAAF,GAAW8C,CAAX;AACA,WAAOkJ,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIlL,EAAAA,IAAI,CAACyB,SAAL,CAAe2J,aAAf,GAA+B,UAASX,QAAT,EAAmB;AAC9CpM,IAAAA,aAAa,CAAC,KAAK4B,KAAL,CAAWJ,MAAX,EAAD,CAAb;;AACA,UAAMwL,KAAK,GAAG,KAAK/J,gBAAL,CAAsBpC,MAApC;AACA+L,IAAAA,aAAa,CAAC,KAAK3J,gBAAN,EAAwByC,CAAC,IAAIA,CAAC,CAAC+G,aAAF,KAAoBL,QAAjD,CAAb;AACAa,IAAAA,OAAO,CAACC,MAAR,CAAeF,KAAK,GAAG,KAAK/J,gBAAL,CAAsBpC,MAA7C,EAAsD,gDAAtD;AACH,GALD;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIc,EAAAA,IAAI,CAACyB,SAAL,CAAe+J,SAAf,GAA2B,UAASf,QAAT,EAAmB;AAC1C,SAAKjJ,iBAAL,CAAuBqB,IAAvB,CAA4B4H,QAA5B;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzK,EAAAA,IAAI,CAACyB,SAAL,CAAegK,aAAf,GAA+B,UAAShB,QAAT,EAAmB;AAC9C,UAAMiB,cAAc,GAAG,KAAKlK,iBAAL,CAAuBtC,MAA9C;AACA+L,IAAAA,aAAa,CAAC,KAAKzJ,iBAAN,EAAyBW,EAAE,IAAIA,EAAE,KAAKsI,QAAtC,CAAb;AACAa,IAAAA,OAAO,CAACC,MAAR,CAAeG,cAAc,GAAG,KAAKlK,iBAAL,CAAuBtC,MAAvD,EAAgE,yDAAhE;AACH,GAJD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASkB,WAAT,CAAqBD,MAArB,EAA6B;AACzB,SAAKK,UAAL,GAAkBL,MAAM,CAACK,UAAP,IAAqB,EAAvC;AACA,SAAKC,aAAL,GAAqBN,MAAM,CAACM,aAAP,IAAwB,EAA7C;AACA,SAAKkL,UAAL,GAAkBxL,MAAM,CAACwL,UAAP,IAAqB,EAAvC;AACA,SAAKrJ,OAAL,GAAenC,MAAM,CAACmC,OAAtB;AACA,SAAK5B,MAAL,GAAcP,MAAM,CAACO,MAAP,IAAiB,EAA/B;AACA,SAAKC,IAAL,GAAYR,MAAM,CAACQ,IAAP,IAAe,EAA3B;AACA,SAAKC,WAAL,GAAmBT,MAAM,CAACS,WAAP,IAAsB,EAAzC;AACA,SAAKgL,SAAL,GAAiBzL,MAAM,CAACyL,SAAP,IAAoB,KAArC;AACA,SAAKC,eAAL,GAAuB1L,MAAM,CAAC0L,eAA9B;AACA,SAAKC,kBAAL,GAA0B3L,MAAM,CAAC2L,kBAAjC;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI1L,EAAAA,WAAW,CAACqB,SAAZ,CAAsBsK,cAAtB,GAAuC,YAAW;AAC9C,QAAIvJ,MAAM,GAAG3E,UAAU,CAACmO,kBAAX,EAAb;;AACA,WAAOjP,WAAW,CAACyF,MAAD,EAAS,KAAKhC,UAAd,CAAlB;AACH,GAHD;;AAKAJ,EAAAA,WAAW,CAACqB,SAAZ,CAAsBwK,iBAAtB,GAA0C,YAAW;AACjD,QAAIzJ,MAAM,GAAG3E,UAAU,CAACmO,kBAAX,EAAb;;AACA,WAAOjP,WAAW,CAACyF,MAAD,EAAS,KAAK/B,aAAd,CAAlB;AACH,GAHD;;AAKAL,EAAAA,WAAW,CAACqB,SAAZ,CAAsByK,WAAtB,GAAoC,YAAW;AAC3C,QAAI1J,MAAM,GAAG3E,UAAU,CAACmO,kBAAX,EAAb;;AACA,WAAOjP,WAAW,CAACyF,MAAD,EAAS,KAAKF,OAAd,CAAlB;AACH,GAHD;;AAKAlC,EAAAA,WAAW,CAACqB,SAAZ,CAAsB0K,UAAtB,GAAmC,YAAW;AAC1C,QAAI3J,MAAM,GAAG3E,UAAU,CAACuO,kBAAX,EAAb;;AACA,SAAK,IAAI1L,MAAT,IAAmB,KAAKA,MAAxB,EAAgC;AAC5B,UAAI2L,aAAa,GAAGxO,UAAU,CAACyO,eAAX,EAApB;;AACA,UAAIC,MAAM,GAAGxP,WAAW,CAACsP,aAAD,EAAgB3L,MAAhB,CAAxB;AACA8B,MAAAA,MAAM,CAACgK,SAAP,CAAiBD,MAAjB;AACH;;AACD,WAAO/J,MAAP;AACH,GARD;;AAUApC,EAAAA,WAAW,CAACqB,SAAZ,CAAsBgL,QAAtB,GAAiC,YAAW;AACxC,QAAIjK,MAAM,GAAG3E,UAAU,CAAC6O,qBAAX,EAAb;;AACA,SAAK,IAAI/L,IAAT,IAAiB,KAAKA,IAAtB,EAA4B;AACxB,UAAIgM,WAAW,GAAG9O,UAAU,CAACmO,kBAAX,EAAlB;;AACA,UAAIO,MAAM,GAAGxP,WAAW,CAAC4P,WAAD,EAAchM,IAAd,CAAxB;AACA6B,MAAAA,MAAM,CAACgK,SAAP,CAAiBD,MAAjB;AACH;;AACD,WAAO/J,MAAP;AACH,GARD;;AAUApC,EAAAA,WAAW,CAACqB,SAAZ,CAAsBmL,eAAtB,GAAwC,YAAW;AAC/C,QAAIpK,MAAM,GAAG3E,UAAU,CAACuO,kBAAX,EAAb;;AACA,SAAK,IAAIS,UAAT,IAAuB,KAAKjM,WAA5B,EAAyC;AACrC,UAAIkM,KAAK,GAAGjP,UAAU,CAACyO,eAAX,EAAZ;;AACA,WAAK,IAAIrK,GAAT,IAAgB4K,UAAhB,EAA4B;AACxBC,QAAAA,KAAK,CAACN,SAAN,CAAgBvK,GAAhB;AACH;;AACDO,MAAAA,MAAM,CAACgK,SAAP,CAAiBM,KAAjB;AACH;;AACD,WAAOtK,MAAP;AACH,GAVD;AAYA;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASvC,KAAT,CAAeb,MAAf,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqCiC,gBAArC,EAAuD;AACnD,SAAKnC,MAAL,GAAcA,MAAd;AACA,SAAK2N,QAAL,GAAgB,KAAK3N,MAAL,CAAY4N,SAAZ,GAAwBnN,MAAxB,EAAhB;;AACA,SAAKT,MAAL,CAAYQ,QAAZ,GAAuBqN,mBAAvB,CAA2C,IAA3C;;AACA,SAAK5M,IAAL,GAAY8E,IAAI,CAAC+H,MAAL,KAAgB,EAA5B;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAK9N,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKgC,gBAAL,GAAwB,EAAxB;AACA,SAAKE,iBAAL,GAAyB,EAAzB;AACA,SAAKI,KAAL,GAAa,EAAb;AACA,SAAKL,gBAAL,GAAwBA,gBAAxB;AACAvE,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH;;AAEDiD,EAAAA,KAAK,CAACwB,SAAN,CAAgB5B,MAAhB,GAAyB,YAAW;AAChC,WAAO,KAAKT,MAAL,CAAYS,MAAZ,EAAP;AACH,GAFD;;AAIAI,EAAAA,KAAK,CAACwB,SAAN,CAAgB7B,QAAhB,GAA2B,YAAW;AAClC,WAAO,KAAKR,MAAL,CAAYQ,QAAZ,EAAP;AACH,GAFD;;AAIAK,EAAAA,KAAK,CAACwB,SAAN,CAAgB2L,SAAhB,GAA4B,YAAW;AACnC,WAAO,KAAKhO,MAAL,CAAYgO,SAAZ,EAAP;AACH,GAFD;;AAIAnN,EAAAA,KAAK,CAACwB,SAAN,CAAgB4L,WAAhB,GAA8B,YAAW;AACrC,SAAKjO,MAAL,CAAYiO,WAAZ;AACH,GAFD;;AAIApN,EAAAA,KAAK,CAACwB,SAAN,CAAgB6L,gBAAhB,GAAmC,UAAS3N,OAAT,EAAkB;AACjD,QAAIoL,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIwC,CAAT,IAAc,KAAKjM,gBAAnB,EAAqC;AACjC,WAAKA,gBAAL,CAAsBiM,CAAtB,EAAyB9C,QAAzB,CAAkC9K,OAAlC,EAA2CoL,KAA3C;AACH;AACJ,GALD;AAOA;AACJ;AACA;AACA;;;AACI9K,EAAAA,KAAK,CAACwB,SAAN,CAAgB+L,SAAhB,GAA4B,YAAW;AACnC,WAAO,KAAKnO,KAAZ;AACH,GAFD;AAIA;AACJ;AACA;AACA;;;AACIY,EAAAA,KAAK,CAACwB,SAAN,CAAgBgM,SAAhB,GAA4B,YAAW;AACnC,WAAO,KAAKnO,KAAZ;AACH,GAFD;AAIA;AACJ;AACA;AACA;;;AACIW,EAAAA,KAAK,CAACwB,SAAN,CAAgBiM,KAAhB,GAAwB,YAAW;AAC/BnP,IAAAA,eAAe,CAAC,KAAKsB,MAAL,EAAD,CAAf;;AACA,SAAKT,MAAL,CAAYuO,WAAZ,CAAwB,KAAKZ,QAA7B;AACH,GAHD;AAKA;AACJ;AACA;;;AACI9M,EAAAA,KAAK,CAACwB,SAAN,CAAgBmM,OAAhB,GAA0B,UAAShH,IAAT,EAAe;AACrCrI,IAAAA,eAAe,CAAC,KAAKsB,MAAL,EAAD,CAAf;;AACA,SAAKT,MAAL,CAAYuO,WAAZ,CAAwB,KAAKZ,QAA7B;;AACA,SAAKc,MAAL,CAAYjH,IAAZ;;AACAvI,IAAAA,aAAa,CAAC,KAAKwB,MAAL,EAAD,CAAb;AACH,GALD;AAOA;AACJ;AACA;AACA;AACA;AACA;;;AACII,EAAAA,KAAK,CAACwB,SAAN,CAAgBE,MAAhB,GAAyB,YAAW;AAChC,QAAI,KAAKC,KAAL,CAAW1C,MAAX,GAAoB,CAAxB,EAA2B;AACvB,YAAO,uCAAsC,KAAK0C,KAAL,CAAW1C,MAAO,sBAA/D;AACH;;AACDX,IAAAA,eAAe,CAAC,KAAKsB,MAAL,EAAD,CAAf;;AACA,SAAKT,MAAL,CAAY0O,gBAAZ,CAA6B,KAAKf,QAAlC;;AACA,SAAK3N,MAAL,CAAYuC,MAAZ,GANgC,CAQhC;;;AACA,SAAK,MAAM8I,QAAX,IAAuB,KAAKjJ,iBAA5B,EAA+C;AAC3CiJ,MAAAA,QAAQ;AACX;AACJ,GAZD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIxK,EAAAA,KAAK,CAACwB,SAAN,CAAgB+J,SAAhB,GAA4B,UAASf,QAAT,EAAmB;AAC3C,SAAKjJ,iBAAL,CAAuBqB,IAAvB,CAA4B4H,QAA5B;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACIxK,EAAAA,KAAK,CAACwB,SAAN,CAAgBgK,aAAhB,GAAgC,UAAShB,QAAT,EAAmB;AAC/C,UAAMiB,cAAc,GAAG,KAAKlK,iBAAL,CAAuBtC,MAA9C;AACA+L,IAAAA,aAAa,CAAC,KAAKzJ,iBAAN,EAAyBW,EAAE,IAAIA,EAAE,KAAKsI,QAAtC,CAAb;AACAa,IAAAA,OAAO,CAACC,MAAR,CAAeG,cAAc,GAAG,KAAKlK,iBAAL,CAAuBtC,MAAvD,EAAgE,yDAAhE;AACH,GAJD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIe,EAAAA,KAAK,CAACwB,SAAN,CAAgBiB,IAAhB,GAAuB,YAAW;AAC9BrE,IAAAA,aAAa,CAAC,KAAKe,MAAL,CAAYS,MAAZ,EAAD,CAAb;;AACA,WAAO,KAAKT,MAAL,CAAYsD,IAAZ,EAAP;AACH,GAHD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzC,EAAAA,KAAK,CAACwB,SAAN,CAAgBwB,MAAhB,GAAyB,UAASC,QAAQ,GAAG,IAApB,EAA0B;AAC/C,QAAID,MAAM,GAAG,KAAK7D,MAAL,CAAY2O,UAAZ,EAAb;;AACA,QAAIzL,OAAO,GAAGW,MAAM,CAACX,OAAP,EAAd;AACA,QAAI0L,KAAK,GAAG/K,MAAM,CAAC+K,KAAP,EAAZ;AACA,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAI9K,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGb,OAAO,CAACI,IAAR,EAAxB,EAAwCS,GAAG,EAA3C,EAA+C;AAC3C,YAAM9C,IAAI,GAAGiC,OAAO,CAACM,GAAR,CAAYO,GAAZ,CAAb;;AACA,UAAI9C,IAAI,KAAK,UAAb,EAAyB;AACrB;AACH;;AACD,UAAI6C,QAAQ,IAAI,KAAK3B,gBAAL,CAAsBlB,IAAtB,CAAhB,EAA6C;AACzC4N,QAAAA,UAAU,CAAC5N,IAAD,CAAV,GAAmB,KAAKkB,gBAAL,CAAsBlB,IAAtB,CAAnB;AACH,OAFD,MAEO;AACH4N,QAAAA,UAAU,CAAC5N,IAAD,CAAV,GAAmBpD,eAAe,CAAC+Q,KAAK,CAACpL,GAAN,CAAUO,GAAV,EAAeqE,KAAhB,CAAlC;AACH;AACJ;;AACDvE,IAAAA,MAAM,CAACtB,MAAP;AACAW,IAAAA,OAAO,CAACX,MAAR;AACAqM,IAAAA,KAAK,CAACrM,MAAN;AACA,WAAOsM,UAAP;AACH,GApBD;AAsBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASC,wBAAT,CAAkCtN,WAAlC,EAA+C;AAC3C,QAAIuN,qBAAqB,GAAG,EAA5B;AACA,UAAMC,kBAAkB,GAAG,EAA3B;;AAEA,SAAK,IAAIC,iBAAT,IAA8BzN,WAA9B,EAA2C;AACvC,UAAIyN,iBAAiB,CAACC,QAAlB,CAA2B,IAA3B,CAAJ,EAAsC;AAClChD,QAAAA,OAAO,CAACiD,KAAR,CAAe,wBAAuBF,iBAAkB,4CAAxD;AACA;AACH,OAJsC,CAMvC;AACA;;;AACA,UAAIG,eAAe,GAAG,EAAtB,CARuC,CAUvC;AACA;;AACA,UAAIC,aAAa,GAAG,EAApB;AACA,UAAIC,YAAY,GAAG,CAAnB,CAbuC,CAevC;AACA;;AACA,UAAIC,gBAAJ;AAEA,UAAIC,wBAAwB,GAAGP,iBAAiB,CAACT,OAAlB,CAA0B,aAA1B,EAAyC,CAACiB,CAAD,EAAIC,KAAJ,KAAc;AAClFH,QAAAA,gBAAgB,GAAGG,KAAK,CAACC,IAAN,EAAnB;AACA,eAAO,EAAP;AACH,OAH8B,CAA/B,CAnBuC,CAwBvC;;AACA,UAAI,CAACJ,gBAAD,IAAqBA,gBAAgB,CAACzP,MAAjB,IAA2B,CAApD,EAAuD;AACnDyP,QAAAA,gBAAgB,GAAGN,iBAAnB;AACH;;AAEDO,MAAAA,wBAAwB,GAAGA,wBAAwB,CAAChB,OAAzB,CAAiC,iBAAjC,EAAoD,CAACiB,CAAD,EAAIG,KAAJ,KAAc;AACzF;AACA;AACA;AACAA,QAAAA,KAAK,GAAGA,KAAK,CAACpB,OAAN,CAAc,MAAd,EAAsB,GAAtB,CAAR;;AAEA,YAAIY,eAAe,CAACQ,KAAD,CAAf,KAA2B1R,SAA/B,EAA0C;AACtC,cAAI2R,SAAS,GAAI,SAAQP,YAAa,EAAtC;AACAF,UAAAA,eAAe,CAACQ,KAAD,CAAf,GAAyBC,SAAzB;AACAR,UAAAA,aAAa,CAACQ,SAAD,CAAb,GAA2BD,KAA3B;AACH;;AAEDN,QAAAA,YAAY;AACZ,eAAOF,eAAe,CAACQ,KAAD,CAAtB;AACH,OAd0B,CAA3B,CA7BuC,CA6CvC;AACA;;AACAJ,MAAAA,wBAAwB,GAAGA,wBAAwB,CAAChB,OAAzB,CAAiC,eAAjC,EAAkDsB,KAAK,IAAK,UAASA,KAAM,GAA3E,CAA3B,CA/CuC,CAiDvC;AACA;AACA;;AACAN,MAAAA,wBAAwB,GAAGA,wBAAwB,CAAChB,OAAzB,CAAiC,6CAAjC,EAAgF,CAACsB,KAAD,EAAQC,IAAR,EAAc3H,KAAd,KAAwB;AAC/H,eAAQ,GAAE0H,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBF,KAAK,CAACpN,OAAN,CAAcqN,IAAd,CAAhB,CAAqC,IAAG3H,KAAM,IAAxD;AACH,OAF0B,CAA3B;AAIA,YAAM6H,SAAS,GAAG,CAACV,gBAAD,EAAmBN,iBAAnB,EAAsCO,wBAAtC,EAAgEH,aAAhE,CAAlB,CAxDuC,CA0DvC;AACA;AACA;;AACA,UAAIL,kBAAkB,CAACO,gBAAD,CAAlB,KAAyCrR,SAA7C,EAAwD;AACpD,cAAM4K,GAAG,GAAGkG,kBAAkB,CAACO,gBAAD,CAA9B;AACAR,QAAAA,qBAAqB,CAACjG,GAAD,CAArB,GAA6BmH,SAA7B;AACH,OAHD,MAGO;AACHlB,QAAAA,qBAAqB,CAACtL,IAAtB,CAA2BwM,SAA3B;AACAjB,QAAAA,kBAAkB,CAACO,gBAAD,CAAlB,GAAuCR,qBAAqB,CAACjP,MAAtB,GAA+B,CAAtE;AACH;AACJ;;AAED,WAAOiP,qBAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIlO,EAAAA,KAAK,CAACwB,SAAN,CAAgB6N,oBAAhB,GAAuC,UAAS1O,WAAT,EAAsBsC,QAAQ,GAAG,IAAjC,EAAuC;AAC1E,UAAMmM,SAAS,GAAG;AACd5L,MAAAA,iBAAiB,EAAE,EADL;AAEd8L,MAAAA,MAAM,EAAE;AAFM,KAAlB;AAKA,QAAI,CAAC3O,WAAD,IAAgBA,WAAW,CAAC1B,MAAZ,KAAuB,CAA3C,EAA8C,OAAOmQ,SAAP;AAC9CzO,IAAAA,WAAW,GAAGsN,wBAAwB,CAACtN,WAAD,CAAtC,CAP0E,CAS1E;AACA;;AACA,QAAI4B,MAAM,GAAG3E,UAAU,CAACuO,kBAAX,EAAb;;AAEA,SAAK,IAAIS,UAAT,IAAuBjM,WAAvB,EAAoC;AAChC,UAAIkM,KAAK,GAAGjP,UAAU,CAACyO,eAAX,EAAZ;;AACA,WAAK,IAAIrK,GAAT,IAAgB4K,UAAhB,EAA4B;AACxBC,QAAAA,KAAK,CAACN,SAAN,CAAgBvK,GAAhB;AACH;;AACDO,MAAAA,MAAM,CAACgK,SAAP,CAAiBM,KAAjB;AACH;;AAED,UAAM0C,kBAAkB,GAAG3R,UAAU,CAACyR,oBAAX,CAAgC,KAAKlQ,MAArC,EAA6CoD,MAA7C,CAA3B;;AACA,UAAMiB,iBAAiB,GAAG+L,kBAAkB,CAACC,qBAAnB,EAA1B;AACA,UAAMC,iBAAiB,GAAGF,kBAAkB,CAACG,qBAAnB,EAA1B;AAEA,UAAMC,kBAAkB,GAAGnM,iBAAiB,CAACJ,IAAlB,EAA3B;;AAEA,SAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6N,kBAAkB,CAAClN,IAAnB,EAApB,EAA+CX,CAAC,EAAhD,EAAoD;AAChD,YAAM+M,KAAK,GAAGc,kBAAkB,CAAChN,GAAnB,CAAuBb,CAAvB,CAAd;AACA,UAAIuG,KAAK,GAAG7E,iBAAiB,CAACb,GAAlB,CAAsBkM,KAAtB,CAAZ;;AAEA,UAAI5L,QAAQ,IAAI,KAAK3B,gBAAL,CAAsBuN,KAAtB,CAAhB,EAA8C;AAC1CxG,QAAAA,KAAK,GAAG,KAAK/G,gBAAL,CAAsBuN,KAAtB,CAAR;AACH;;AAEDO,MAAAA,SAAS,CAAC5L,iBAAV,CAA4BqL,KAA5B,IAAqCxG,KAArC;AACH;;AAED,UAAMuH,aAAa,GAAGH,iBAAiB,CAACrM,IAAlB,EAAtB;;AAEA,SAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8N,aAAa,CAACnN,IAAd,EAApB,EAA0CX,CAAC,EAA3C,EAA+C;AAC3C,YAAM+M,KAAK,GAAGe,aAAa,CAACjN,GAAd,CAAkBb,CAAlB,CAAd,CAD2C,CAG3C;AACA;;AACA,YAAM+N,YAAY,GAAGJ,iBAAiB,CAAC9M,GAAlB,CAAsBkM,KAAtB,CAArB;AACAO,MAAAA,SAAS,CAACE,MAAV,CAAiBT,KAAjB,IAA0BgB,YAA1B;AACH;;AAEDD,IAAAA,aAAa,CAAClO,MAAd;AACAiO,IAAAA,kBAAkB,CAACjO,MAAnB;AACA+N,IAAAA,iBAAiB,CAAC/N,MAAlB;AACA8B,IAAAA,iBAAiB,CAAC9B,MAAlB;AACA6N,IAAAA,kBAAkB,CAAC7N,MAAnB;AACA,WAAO0N,SAAP;AACH,GAvDD;AAyDA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIpP,EAAAA,KAAK,CAACwB,SAAN,CAAgBsO,eAAhB,GAAkC,UAASrP,MAAT,EAAiB;AAC/C;AACA;AACA,QAAIA,MAAM,CAAC,CAAD,CAAN,KAAcsP,WAAW,CAACC,gBAAZ,CAA6BC,MAA3C,IAAqDxP,MAAM,CAAC,CAAD,CAAN,KAAcsP,WAAW,CAACC,gBAAZ,CAA6BE,SAApG,EAA+G;AAC3G,aAAO,IAAP;AACH;;AAED,QAAI3I,KAAK,GAAG9G,MAAM,CAAC,CAAD,CAAlB;;AACA,QAAI8G,KAAK,KAAK,IAAd,EAAoB;AAChB,aAAO,KAAP;AACH;;AAED,UAAMvE,MAAM,GAAG,KAAKA,MAAL,EAAf;AACA,UAAMmN,MAAM,GAAGnN,MAAM,CAACvC,MAAM,CAAC,CAAD,CAAP,CAArB;;AACA,QAAI0P,MAAM,KAAKnN,MAAM,CAACvC,MAAM,CAAC,CAAD,CAAP,CAAN,KAAsB,MAAtB,IAAgCuC,MAAM,CAACvC,MAAM,CAAC,CAAD,CAAP,CAAN,KAAsB,UAA3D,CAAV,EAAkF;AAC9E,aAAO7C,UAAU,CAACwS,iBAAX,CAA6B3P,MAAM,CAAC,CAAD,CAAnC,CAAP;AACH;;AAED,WAAO,OAAO8G,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAAjD;AACH,GAnBD;AAqBA;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvH,EAAAA,KAAK,CAACwB,SAAN,CAAgBzB,IAAhB,GAAuB,UAASsQ,OAAO,GAAG,EAAnB,EAAuB;AAC1CjS,IAAAA,aAAa,CAAC,KAAKe,MAAL,CAAYS,MAAZ,EAAD,CAAb;;AACA,QAAIM,MAAM,GAAG,EAAb;;AACA,SAAK,MAAMgD,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYiN,OAAZ,CAAlB,EAAwC;AACpC,UAAI5T,QAAQ,CAAC6T,cAAT,CAAwBpN,GAAxB,CAAJ,EAAkC;AAC9B,YAAI,CAAChD,MAAM,CAACzD,QAAQ,CAAC6T,cAAT,CAAwBpN,GAAxB,CAAD,CAAX,EAA2C;AACvC,cAAI,CAACzF,WAAW,CAAC8S,GAAZ,CAAgBrN,GAAhB,CAAL,EAA2B;AACvBmI,YAAAA,OAAO,CAACmF,IAAR,CAAc,gBAAetN,GAAI,mCAAkCzG,QAAQ,CAAC6T,cAAT,CAAwBpN,GAAxB,CAA6B,WAAhG;AACAzF,YAAAA,WAAW,CAACgT,GAAZ,CAAgBvN,GAAhB;AACH;;AACDhD,UAAAA,MAAM,CAACzD,QAAQ,CAAC6T,cAAT,CAAwBpN,GAAxB,CAAD,CAAN,GAAuCmN,OAAO,CAACnN,GAAD,CAA9C;AACH,SAND,MAMO;AACH,gBAAM,IAAIwH,KAAJ,CAAW,sCAAqCxH,GAAI,GAApD,CAAN;AACH;AACJ,OAVD,MAUO,IAAIA,GAAG,KAAK,WAAZ,EAAyB;AAC5B,YAAI,CAACzF,WAAW,CAAC8S,GAAZ,CAAgB,WAAhB,CAAL,EAAmC;AAC/BlF,UAAAA,OAAO,CAACmF,IAAR,CAAc,0FAAd;AACA/S,UAAAA,WAAW,CAACgT,GAAZ,CAAgB,WAAhB;AACH,SAJ2B,CAK5B;AACA;;;AACAvQ,QAAAA,MAAM,CAAC,YAAD,CAAN,GAAuB,EAAvB;AACAA,QAAAA,MAAM,CAAC,SAAD,CAAN,GAAoB,EAApB;;AACA,aAAK,MAAMwQ,GAAX,IAAkBL,OAAO,CAAC,WAAD,CAAzB,EAAwC;AACpCnQ,UAAAA,MAAM,CAAC,YAAD,CAAN,CAAqBwQ,GAAG,CAAC,QAAD,CAAxB,IAAsCA,GAAG,CAAC,IAAD,CAAzC;AACAxQ,UAAAA,MAAM,CAAC,SAAD,CAAN,CAAkB0C,IAAlB,CAAuB8N,GAAG,CAAC,QAAD,CAA1B;AACH;AACJ,OAbM,MAaA,IAAIjU,QAAQ,CAACkU,iBAAT,CAA2B9O,OAA3B,CAAmCqB,GAAnC,IAA0C,CAAC,CAA/C,EAAkD;AACrDhD,QAAAA,MAAM,CAACgD,GAAD,CAAN,GAAcmN,OAAO,CAACnN,GAAD,CAArB;AACH,OAFM,MAEA;AACH,cAAM,IAAIwH,KAAJ,CAAW,kCAAiCxH,GAAI,GAAhD,CAAN;AACH;AACJ;;AAEDhD,IAAAA,MAAM,CAACK,UAAP,GAAoBL,MAAM,CAACK,UAAP,IAAqB,EAAzC;AACAL,IAAAA,MAAM,CAACM,aAAP,GAAuBN,MAAM,CAACM,aAAP,IAAwB,EAA/C;AACAN,IAAAA,MAAM,CAACwL,UAAP,GAAoBxL,MAAM,CAACwL,UAAP,IAAqB,EAAzC;AACAxL,IAAAA,MAAM,CAACO,MAAP,GAAgBP,MAAM,CAACO,MAAP,IAAiB,EAAjC;AACAP,IAAAA,MAAM,CAACQ,IAAP,GAAcR,MAAM,CAACQ,IAAP,IAAe,EAA7B;AACAR,IAAAA,MAAM,CAACS,WAAP,GAAqBT,MAAM,CAACS,WAAP,IAAsB,EAA3C;AAEA,UAAMiQ,YAAY,GAAG,KAAK5N,MAAL,EAArB;;AAEA,QAAI9C,MAAM,CAACS,WAAP,CAAmB1B,MAAnB,GAA4B,CAAhC,EAAmC;AAC/BiB,MAAAA,MAAM,CAACS,WAAP,GAAqBsN,wBAAwB,CAAC/N,MAAM,CAACS,WAAR,CAA7C;AACH;;AAED,QAAIT,MAAM,CAACmC,OAAP,KAAmBhF,SAAvB,EAAkC;AAC9B;AACA6C,MAAAA,MAAM,CAACmC,OAAP,GAAiB,KAAKA,OAAL,EAAjB;;AAEA,UAAInC,MAAM,CAACS,WAAP,CAAmB1B,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,aAAK,MAAM4R,IAAX,IAAmB3Q,MAAM,CAACS,WAA1B,EAAuC;AACnCT,UAAAA,MAAM,CAACmC,OAAP,CAAeO,IAAf,CAAoBiO,IAAI,CAAC,CAAD,CAAxB;AACH;AACJ;AACJ,KAxDyC,CA0D1C;AACA;;;AACA,QAAI3Q,MAAM,CAACO,MAAP,CAAcxB,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,WAAK,IAAIwB,MAAT,IAAmBP,MAAM,CAACO,MAA1B,EAAkC;AAC9B;AACA,cAAM4H,KAAK,GAAGuI,YAAY,CAACnQ,MAAM,CAAC,CAAD,CAAP,CAA1B;AACA,cAAMqQ,UAAU,GAAGrQ,MAAM,CAAC,CAAD,CAAN,KAAcsP,WAAW,CAACC,gBAAZ,CAA6BC,MAA3C,IAAqDxP,MAAM,CAAC,CAAD,CAAN,KAAcsP,WAAW,CAACC,gBAAZ,CAA6BE,SAAnH;;AACA,YAAIY,UAAU,KAAKzI,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,UAAnC,CAAd,EAA8D;AAC1D;AACA;AACA5H,UAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,IAAIlD,IAAJ,CAASkD,MAAM,CAAC,CAAD,CAAf,CAAZ;AACH;AACJ;AACJ;;AAED,QAAIL,IAAI,GAAG8E,IAAI,CAAC+H,MAAL,KAAgB,EAA3B;AACA,QAAIhN,KAAJ;;AAEA,QAAIC,MAAM,CAACK,UAAP,CAAkBtB,MAAlB,GAA2B,CAA3B,IAAgCiB,MAAM,CAACM,aAAP,CAAqBvB,MAArB,GAA8B,CAAlE,EAAqE;AACjE,UAAIiB,MAAM,CAACM,aAAP,IAAwBN,MAAM,CAACM,aAAP,CAAqBvB,MAArB,GAA8B,CAA1D,EAA6D;AACzDgB,QAAAA,KAAK,GAAG,CAAR;AACH,OAFD,MAEO;AACHA,QAAAA,KAAK,GAAG,CAAR;AACH;AACJ,KAND,MAMO;AACHA,MAAAA,KAAK,GAAG,CAAR;AACH;;AAED,QAAI8Q,EAAE,GAAG,IAAI5Q,WAAJ,CAAgBD,MAAhB,CAAT;AACA,QAAI8Q,CAAC,GAAG,IAAIjR,IAAJ,CAAS,IAAT,EAAeE,KAAf,EAAsBC,MAAtB,EAA8B6Q,EAA9B,EAAkC3Q,IAAlC,CAAR;AACA,SAAKuB,KAAL,CAAWiB,IAAX,CAAgBoO,CAAhB;AACA,WAAOA,CAAP;AACH,GA1FD;AA4FA;;;AAEA,MAAIC,KAAJ;;AAEA,WAASC,yBAAT,GAAqC;AACjC,QAAID,KAAK,KAAK5T,SAAd,EAAyB;AACrB,UAAI8T,KAAK,GAAG,CAAZ;AACA,UAAIC,KAAK,GAAGhU,WAAW,CAACE,GAAZ,EAAZ;AACAa,MAAAA,UAAU,CAAC,SAASkT,IAAT,GAAgB;AACvB,YAAI/T,GAAG,GAAGF,WAAW,CAACE,GAAZ,EAAV;AACA+N,QAAAA,OAAO,CAACiG,GAAR,CAAa,GAAE,CAAE,OAAOH,KAAR,IAAkB7T,GAAG,GAAG8T,KAAxB,CAAD,EAAiCG,OAAjC,CAAyC,CAAzC,CAA4C,WAA3D;AACAJ,QAAAA,KAAK,GAAG,CAAR;AACAC,QAAAA,KAAK,GAAG9T,GAAR;AACAa,QAAAA,UAAU,CAACkT,IAAD,EAAO,IAAP,CAAV;AACH,OANS,EAMP,IANO,CAAV;;AAOAJ,MAAAA,KAAK,GAAG,SAASrD,MAAT,CAAgB9J,CAAhB,EAAmB;AACvBqN,QAAAA,KAAK,IAAIrN,CAAT;AACH,OAFD;;AAGAuH,MAAAA,OAAO,CAACiG,GAAR,CAAY,uBAAZ;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItR,EAAAA,KAAK,CAACwB,SAAN,CAAgBoM,MAAhB,GAAyB,UAASjH,IAAT,EAAejC,OAAf,EAAwB;AAC7CA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAAChF,OAAR,GAAkBgF,OAAO,CAAChF,OAAR,IAAmB,CAArC;AAEA,QAAI8R,KAAJ;AACA,QAAIC,IAAI,GAAG,KAAKpP,OAAL,EAAX;;AACA,QAAIW,MAAM,GAAG,KAAK7D,MAAL,CAAY2O,UAAZ,EAAb;;AACA,QAAIC,KAAK,GAAG/K,MAAM,CAAC+K,KAAP,EAAZ;AACA,QAAIvO,QAAQ,GAAG,KAAf;AACA,QAAIC,MAAM,GAAG,KAAb;AAEA+R,IAAAA,KAAK,GAAG3T,QAAR;;AAEA,QAAI8I,IAAI,YAAY+K,WAApB,EAAiC;AAC7BF,MAAAA,KAAK,GAAG,IAAIG,UAAJ,CAAehL,IAAf,CAAR;AACAnH,MAAAA,QAAQ,GAAG,IAAX;AACH,KAHD,MAGO,IAAI,OAAOmH,IAAP,KAAgB,QAApB,EAA8B;AACjC,UAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACjBA,QAAAA,IAAI,GAAG,MAAMA,IAAb;AACH;;AACDlH,MAAAA,MAAM,GAAG,IAAT;AACAD,MAAAA,QAAQ,GAAG,IAAX;AACAgS,MAAAA,KAAK,GAAG7K,IAAR;AACH,KAPM,MAOA;AACH9I,MAAAA,QAAQ,CAAC+T,IAAT,CAAcjL,IAAd;AACA9I,MAAAA,QAAQ,CAACmK,KAAT,GAAiByJ,IAAI,CAACtH,MAAL,CAAYtM,QAAQ,CAACmK,KAAT,CAAevH,MAAf,CAAsBqD,CAAC,IAAIA,CAAC,KAAK,WAAjC,CAAZ,CAAjB;AACAjG,MAAAA,QAAQ,CAACkQ,KAAT,GAAiBnR,cAAc,CAACmR,KAAD,CAAd,CAAsBxH,KAAtB,CAA4B,CAA5B,EAA+BkL,IAAI,CAACxS,MAApC,CAAjB;;AAEA,UAAIgS,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAACpT,QAAQ,CAACgU,SAAV,CAAL;AACH;AACJ;;AAED,QAAI,CAACrS,QAAL,EAAe;AACX,UAAIgS,KAAK,CAACK,SAAN,KAAoB,CAAxB,EAA2B;AACvBxG,QAAAA,OAAO,CAACmF,IAAR,CAAa,6CAAb;AACA;AACH,OAJU,CAMX;;;AACA,YAAMsB,SAAS,GAAGjU,QAAQ,CAACmK,KAAT,CAAenG,OAAf,CAAuB,WAAvB,CAAlB;;AACA,UAAIiQ,SAAS,IAAI,CAAC,CAAlB,EAAqB;AACjB,cAAMC,cAAc,GAAG,CAAC,CAAC,KAAK3S,KAA9B;;AACA,YAAI2S,cAAJ,EAAoB;AAChB;AACAlU,UAAAA,QAAQ,CAACkQ,KAAT,CAAenL,IAAf,CAAoB/E,QAAQ,CAACkQ,KAAT,CAAelQ,QAAQ,CAACmK,KAAT,CAAenG,OAAf,CAAuB,KAAKzC,KAA5B,CAAf,CAApB;AACH,SAHD,MAGO;AACH;AACAvB,UAAAA,QAAQ,CAACkQ,KAAT,CAAenL,IAAf,CAAoBhF,UAAU,CAACoU,OAAX,CAAmBC,WAAvC;AACH;AACJ;AACJ;;AAED,QAAI;AACA,YAAM3S,EAAE,GAAG1B,UAAU,CAACiC,IAAX,CAAgBqS,SAA3B,CADA,CAEA;AACA;;AACAhT,MAAAA,UAAU,CAACsS,KAAD,EAAQ,KAAKrS,MAAb,EAAqB,KAAKC,KAA1B,EAAiC,KAAKC,KAAtC,EAA6CC,EAA7C,EAAiD,IAAjD,EAAuDE,QAAvD,EAAiEC,MAAjE,EAAyEiF,OAAO,CAAChF,OAAjF,CAAV;AACA,WAAKwN,WAAL,GAAmB,IAAnB;AACH,KAND,CAME,OAAOI,CAAP,EAAU;AACRjC,MAAAA,OAAO,CAACiD,KAAR,CAAe,kBAAiBhB,CAAE,EAAlC;AACH,KARD,SAQU;AACNtK,MAAAA,MAAM,CAACtB,MAAP;AACH;AACJ,GAhED;AAkEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI1B,EAAAA,KAAK,CAACwB,SAAN,CAAgB2Q,MAAhB,GAAyB,UAASxL,IAAT,EAAejC,OAAf,EAAwB;AAC7C,QAAI,CAAC,KAAKtF,KAAV,EAAiB;AACbiM,MAAAA,OAAO,CAACiD,KAAR,CAAc,mEAAd;AACA;AACH;;AAED5J,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAAChF,OAAR,GAAkBgF,OAAO,CAAChF,OAAR,IAAmB,CAArC;AACA,QAAI8R,KAAJ;AACA,QAAIC,IAAI,GAAG,KAAKpP,OAAL,EAAX;;AACA,QAAIW,MAAM,GAAG,KAAK7D,MAAL,CAAY2O,UAAZ,EAAb;;AACA,QAAIC,KAAK,GAAG/K,MAAM,CAAC+K,KAAP,EAAZ;AACA,QAAIvO,QAAQ,GAAG,KAAf;AAEAmH,IAAAA,IAAI,GAAGA,IAAI,CAAC9C,GAAL,CAASoE,GAAG,KAAK;AAAC,OAAC,KAAK7I,KAAN,GAAc6I;AAAf,KAAL,CAAZ,CAAP;;AAEA,QAAItB,IAAI,YAAY+K,WAApB,EAAiC;AAC7BF,MAAAA,KAAK,GAAG,IAAIG,UAAJ,CAAehL,IAAf,CAAR;AACAnH,MAAAA,QAAQ,GAAG,IAAX;AACH,KAHD,MAGO;AACH3B,MAAAA,QAAQ,CAAC+T,IAAT,CAAcjL,IAAd;AACA9I,MAAAA,QAAQ,CAACmK,KAAT,GAAiB,CAAC,KAAK5I,KAAN,CAAjB;AACAvB,MAAAA,QAAQ,CAACkQ,KAAT,GAAiB,CAACnR,cAAc,CAACmR,KAAD,CAAd,CAAsB0D,IAAI,CAAC5P,OAAL,CAAa,KAAKzC,KAAlB,CAAtB,CAAD,CAAjB;AACAoS,MAAAA,KAAK,GAAG3T,QAAR;AACH;;AAED,QAAI;AACA,YAAMyB,EAAE,GAAG1B,UAAU,CAACiC,IAAX,CAAgBC,SAA3B,CADA,CAEA;AACA;;AACAZ,MAAAA,UAAU,CAACsS,KAAD,EAAQ,KAAKrS,MAAb,EAAqB,KAAKC,KAA1B,EAAiC,KAAKC,KAAtC,EAA6CC,EAA7C,EAAiD,KAAjD,EAAwDE,QAAxD,EAAkE,KAAlE,EAAyEkF,OAAO,CAAChF,OAAjF,CAAV;AACA,WAAKwN,WAAL,GAAmB,IAAnB;AACH,KAND,CAME,OAAOI,CAAP,EAAU;AACRjC,MAAAA,OAAO,CAACiD,KAAR,CAAe,eAAf,EAA+BhB,CAA/B;AACH,KARD,SAQU;AACNtK,MAAAA,MAAM,CAACtB,MAAP;AACH;AACJ,GArCD;AAuCA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI1B,EAAAA,KAAK,CAACwB,SAAN,CAAgBa,OAAhB,GAA0B,YAAW;AACjC,QAAIW,MAAM,GAAG,KAAK7D,MAAL,CAAY2O,UAAZ,EAAb;;AACA,QAAI2D,IAAI,GAAGzO,MAAM,CAACX,OAAP,EAAX;AACA,QAAI2F,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIb,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGsK,IAAI,CAAChP,IAAL,EAA1B,EAAuC0E,IAAI,EAA3C,EAA+C;AAC3C,UAAI/G,IAAI,GAAGqR,IAAI,CAAC9O,GAAL,CAASwE,IAAT,CAAX;;AACA,UAAI/G,IAAI,KAAK,UAAb,EAAyB;AACrB4H,QAAAA,KAAK,CAACpF,IAAN,CAAWxC,IAAX;AACH;AACJ;;AACD4C,IAAAA,MAAM,CAACtB,MAAP;AACA+P,IAAAA,IAAI,CAAC/P,MAAL;AACA,WAAOsG,KAAP;AACH,GAbD;;AAeAhI,EAAAA,KAAK,CAACwB,SAAN,CAAgB4Q,OAAhB,GAA0B,UAASC,CAAT,EAAY;AAClCA,IAAAA,CAAC,CAAC,IAAD,CAAD;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;;;AAEI,QAAMtC,WAAW,GAAG;AAChBuC,IAAAA,UAAU,EAAE1U,UADI;AAGhBX,IAAAA,MAHgB;AAKhBsV,IAAAA,MAAM,EAAE,YAAW;AACf,aAAO,IAAP;AACH,KAPe;AAShBrB,IAAAA,yBATgB;AAWhB3S,IAAAA,YAXgB;;AAahB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQyB,IAAAA,KAAK,EAAE,UAAS2G,IAAT,EAAejC,OAAf,EAAwB;AAC3BA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAD2B,CAG3B;;AACAA,MAAAA,OAAO,CAACtF,KAAR,GAAgBsF,OAAO,CAACtF,KAAR,IAAiB,IAAjC;AACAsF,MAAAA,OAAO,CAACrF,KAAR,GAAgBqF,OAAO,CAACrF,KAAR,IAAiB,IAAjC;AAEA,UAAImT,aAAJ;AACA,UAAIhT,QAAQ,GAAG,KAAf;AACA,UAAI8B,gBAAgB,GAAG,EAAvB;AACA,UAAI7B,MAAM,GAAG,KAAb;;AAEA,UAAIkH,IAAI,YAAY+K,WAAhB,IAAgC,OAAOe,MAAP,KAAkB,WAAlB,IAAiC9L,IAAI,YAAY8L,MAArF,EAA8F;AAC1FD,QAAAA,aAAa,GAAG,IAAIb,UAAJ,CAAehL,IAAf,CAAhB;AACAnH,QAAAA,QAAQ,GAAG,IAAX;AACH,OAHD,MAGO,IAAI,OAAOmH,IAAP,KAAgB,QAApB,EAA8B;AACjC,YAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACjBA,UAAAA,IAAI,GAAG,MAAMA,IAAb;AACH;;AACDlH,QAAAA,MAAM,GAAG,IAAT;AACAD,QAAAA,QAAQ,GAAG,IAAX;AACAgT,QAAAA,aAAa,GAAG7L,IAAhB;AACH,OAPM,MAOA;AACH9I,QAAAA,QAAQ,CAAC6U,KAAT;AACApR,QAAAA,gBAAgB,GAAGzD,QAAQ,CAAC+T,IAAT,CAAcjL,IAAd,CAAnB;AACA6L,QAAAA,aAAa,GAAG3U,QAAhB;AACH;;AAED,UAAI6G,OAAO,CAACtF,KAAR,IAAiBsF,OAAO,CAACrF,KAA7B,EAAoC;AAChC,cAAO,8BAA6BqF,OAAO,CAACtF,KAAM,gBAAesF,OAAO,CAACrF,KAAM,IAA/E;AACH;;AAED,UAAIF,MAAJ;;AAEA,UAAI;AACA,cAAMG,EAAE,GAAG1B,UAAU,CAACiC,IAAX,CAAgBqS,SAA3B,CADA,CAGA;AACA;AACA;AACA;;AACA/S,QAAAA,MAAM,GAAGD,UAAU,CAACsT,aAAD,EAAgBnV,SAAhB,EAA2BqH,OAAO,CAACtF,KAAnC,EAA0CsF,OAAO,CAACrF,KAAlD,EAAyDC,EAAzD,EAA6D,KAA7D,EAAoEE,QAApE,EAA8EC,MAA9E,EAAsF,CAAtF,CAAnB,CAPA,CASA;AACA;;AACA,eAAO,IAAIO,KAAJ,CAAUb,MAAV,EAAkBuF,OAAO,CAACtF,KAA1B,EAAiCsF,OAAO,CAACrF,KAAzC,EAAgDiC,gBAAhD,CAAP;AACH,OAZD,CAYE,OAAOgM,CAAP,EAAU;AACR,YAAInO,MAAJ,EAAY;AACRA,UAAAA,MAAM,CAACuC,MAAP;AACH;;AACD2J,QAAAA,OAAO,CAACiD,KAAR,CAAe,gCAA+BhB,CAAE,EAAhD;AACA,cAAMA,CAAN;AACH;AACJ;AArGe,GAApB;;AAwGA,OAAK,IAAIqF,IAAT,IAAiBxP,MAAM,CAACC,IAAP,CAAY3G,QAAZ,CAAjB,EAAwC;AACpCsT,IAAAA,WAAW,CAAC4C,IAAD,CAAX,GAAoBlW,QAAQ,CAACkW,IAAD,CAA5B;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMC,eAAN,SAA8B3V,MAA9B,CAAqC;AACjC;AACR;AACA;AACA;AACA;AACA;AACA;AACQ4V,IAAAA,WAAW,CAAC9C,WAAD,EAAc;AACrB,YAAMA,WAAN;AACAvS,MAAAA,IAAI,CAACsV,gBAAL,CAAsB,SAAtB,EAAiCxF,CAAC,IAAI,KAAKzO,OAAL,CAAayO,CAAC,CAAC3G,IAAf,CAAtC,EAA4D,KAA5D;AACH;AAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQoM,IAAAA,IAAI,CAACC,GAAD,EAAMC,QAAN,EAAgB;AAChBzV,MAAAA,IAAI,CAAC0V,WAAL,CAAiBF,GAAjB,EAAsBC,QAAtB;AACH;AAED;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQrB,IAAAA,IAAI,CAACoB,GAAD,EAAM;AACN,UAAI,OAAOG,WAAP,KAAuB,WAA3B,EAAwC;AACpC,cAAM,IAAIzI,KAAJ,CAAU,2BAAV,CAAN;AACH,OAFD,MAEO;AACH9M,QAAAA,UAAU,CAAC;AACPwV,UAAAA,UAAU,EAAEJ,GAAG,CAACK,MADT;AAEPC,UAAAA,YAAY,EAAE;AAFP,SAAD,CAAV,CAGGC,IAHH,CAGQC,GAAG,IAAI;AACX5V,UAAAA,UAAU,GAAG4V,GAAb;AACA,gBAAM5B,IAAN,CAAWoB,GAAX;AACH,SAND;AAOH;AACJ;;AA5CgC;AA+CrC;AACJ;AACA;AACA;;;AACI,MAAI,OAAOxV,IAAP,KAAgB,WAAhB,IAA+BA,IAAI,CAACsV,gBAAxC,EAA0D;AACtD,QAAIF,eAAJ,CAAoB7C,WAApB;AACH;;AAED,SAAOA,WAAP;AACH","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport * as defaults from \"./config/constants.js\";\nimport {get_type_config} from \"./config/index.js\";\nimport {DataAccessor} from \"./data_accessor\";\nimport {extract_vector, extract_map, fill_vector} from \"./emscripten.js\";\nimport {bindall, get_column_type} from \"./utils.js\";\nimport {Server} from \"./api/server.js\";\n\nimport formatters from \"./view_formatters\";\n\n// IE fix - chrono::steady_clock depends on performance.now() which does not\n// exist in IE workers\nif (global.performance === undefined) {\n    global.performance = {now: Date.now};\n}\n\nif (typeof self !== \"undefined\" && self.performance === undefined) {\n    self.performance = {now: Date.now};\n}\n\nconst WARNED_KEYS = new Set();\n\n/**\n * The main API module for `@finos/perspective`.\n *\n * For more information, see the\n * [Javascript user guide](https://perspective.finos.org/docs/md/js.html).\n *\n * @module perspective\n */\nexport default function(Module) {\n    let __MODULE__ = Module;\n    let accessor = new DataAccessor();\n    const SIDES = [\"zero\", \"one\", \"two\"];\n\n    /***************************************************************************\n     *\n     * Private\n     *\n     */\n\n    let _POOL_DEBOUNCES = {};\n\n    function _set_process(pool, table_id) {\n        if (!_POOL_DEBOUNCES[table_id]) {\n            _POOL_DEBOUNCES[table_id] = pool;\n            setTimeout(() => _call_process(table_id));\n        }\n    }\n\n    function _call_process(table_id) {\n        const pool = _POOL_DEBOUNCES[table_id];\n        if (pool) {\n            pool._process();\n            _remove_process(table_id);\n        }\n    }\n\n    function _remove_process(table_id) {\n        delete _POOL_DEBOUNCES[table_id];\n    }\n\n    function memory_usage() {\n        const mem = performance.memory ? JSON.parse(JSON.stringify(performance.memory, [\"totalJSHeapSize\", \"usedJSHeapSize\", \"jsHeapSizeLimit\"])) : process.memoryUsage();\n        mem.wasmHeap = __MODULE__.HEAP8.length;\n        return mem;\n    }\n\n    /**\n     * Common logic for creating and registering a Table.\n     *\n     * @param {DataAccessor|Object[]} accessor - the data we provide to the\n     * Table\n     * @param {Object} _Table - `undefined` if a new table will be created, or\n     * an `std::shared_ptr<Table>` if updating.\n     * @param {String} index - A column name to be used as a primary key.\n     * @param {Number} limit - an upper bound on the number of rows in the\n     * table. If set, new rows that exceed the limit start overwriting old ones\n     * from row 0.\n     * @param {t_op} op - either `OP_INSERT` or `OP_DELETE`\n     * @param {boolean} is_update - true if we are updating an already-created\n     * table\n     * @param {boolean} is_arrow - true if the dataset is in the Arrow format\n     * @param {Number} port_id - an integer indicating the internal `t_port`\n     * which should receive this update.\n     *\n     * @private\n     * @returns {Table} An `std::shared_ptr<Table>` to a `Table` inside C++.\n     */\n    function make_table(accessor, _Table, index, limit, op, is_update, is_arrow, is_csv, port_id) {\n        // C++ constructor cannot take null values - use default values if\n        // index or limit are null.\n        if (!index) {\n            index = \"\";\n        }\n\n        if (!limit) {\n            limit = 4294967295;\n        }\n\n        _Table = __MODULE__.make_table(_Table, accessor, limit, index, op, is_update, is_arrow, is_csv, port_id);\n\n        const pool = _Table.get_pool();\n        const table_id = _Table.get_id();\n\n        if (is_update || op == __MODULE__.t_op.OP_DELETE) {\n            _set_process(pool, table_id);\n        } else {\n            pool._process();\n        }\n\n        return _Table;\n    }\n\n    /***************************************************************************\n     *\n     * View\n     *\n     */\n\n    /**\n     * A View object represents a specific transform (configuration or pivot,\n     * filter, sort, etc) configuration on an underlying\n     * {@link module:perspective~table}. A View receives all updates from the\n     * {@link module:perspective~table} from which it is derived, and can be\n     * serialized to JSON or trigger a callback when it is updated.  View\n     * objects are immutable, and will remain in memory and actively process\n     * updates until its {@link module:perspective~view#delete} method is\n     * called.\n     *\n     * <strong>Note</strong> This constructor is not public - Views are created\n     * by invoking the {@link module:perspective~table#view} method.\n     *\n     * @example\n     * // Returns a new View, pivoted in the row space by the \"name\" column.\n     * await table.view({row_pivots: [\"name\"]});\n     *\n     * @class\n     * @hideconstructor\n     */\n    function view(table, sides, config, view_config, name) {\n        this.name = name;\n        this._View = undefined;\n        this.table = table;\n\n        this.config = config || {};\n        this.view_config = view_config || new view_config();\n\n        this.is_unit_context =\n            this.table.index === \"\" &&\n            sides === 0 &&\n            this.view_config.row_pivots.length === 0 &&\n            this.view_config.column_pivots.length === 0 &&\n            this.view_config.filter.length === 0 &&\n            this.view_config.sort.length === 0 &&\n            this.view_config.expressions.length === 0;\n\n        if (this.is_unit_context) {\n            this._View = __MODULE__.make_view_unit(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, null);\n        } else if (sides === 0) {\n            this._View = __MODULE__.make_view_zero(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, null);\n        } else if (sides === 1) {\n            this._View = __MODULE__.make_view_one(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, null);\n        } else if (sides === 2) {\n            this._View = __MODULE__.make_view_two(table._Table, name, defaults.COLUMN_SEPARATOR_STRING, this.view_config, null);\n        }\n\n        this.ctx = this._View.get_context();\n        this.column_only = this._View.is_column_only();\n        this.update_callbacks = this.table.update_callbacks;\n        this.overridden_types = this.table.overridden_types;\n        this._delete_callbacks = [];\n        bindall(this);\n    }\n\n    /**\n     * A copy of the config object passed to the {@link table#view} method which\n     * created this {@link module:perspective~view}.\n     *\n     * @returns {Promise<object>} Shared the same key/values properties as\n     * {@link module:perspective~view}\n     */\n    view.prototype.get_config = function() {\n        return JSON.parse(JSON.stringify(this.config));\n    };\n\n    /**\n     * Delete this {@link module:perspective~view} and clean up all resources\n     * associated with it. View objects do not stop consuming resources or\n     * processing updates when they are garbage collected - you must call this\n     * method to reclaim these.\n     *\n     * @async\n     */\n    view.prototype.delete = function() {\n        _remove_process(this.table.get_id());\n        this._View.delete();\n        this.ctx.delete();\n\n        this.table.views.splice(this.table.views.indexOf(this), 1);\n        this.table = undefined;\n        let i = 0,\n            j = 0;\n\n        // Remove old update callbacks from the Table.\n        while (i < this.update_callbacks.length) {\n            let val = this.update_callbacks[i];\n            if (val.view !== this) this.update_callbacks[j++] = val;\n            i++;\n        }\n        this.update_callbacks.length = j;\n        this._delete_callbacks.forEach(cb => cb());\n    };\n\n    /**\n     * How many pivoted sides does this {@link module:perspective~view} have?\n     *\n     * @private\n     * @returns {number} sides The number of sides of this\n     * {@link module:perspective~view}.\n     */\n    view.prototype.sides = function() {\n        return this._View.sides();\n    };\n\n    /**\n     * Counts hidden columns in the {@link module:perspective~view}. A hidden\n     * column is a column used as a sort column, but not shown in the view.\n     *\n     * @private\n     * @returns {number} sides The number of hidden columns in this\n     * {@link module:perspective~view}.\n     */\n    view.prototype._num_hidden = function() {\n        // Count hidden columns.\n        let hidden = 0;\n        for (const sort of this.config.sort) {\n            if (this.config.columns.indexOf(sort[0]) === -1) {\n                hidden++;\n            }\n        }\n        return hidden;\n    };\n\n    function col_path_vector_to_string(vector) {\n        let extracted = [];\n        for (let i = 0; i < vector.size(); i++) {\n            let s = vector.get(i);\n            extracted.push(__MODULE__.scalar_to_val(s, false, true));\n            s.delete();\n        }\n        vector.delete();\n        return extracted;\n    }\n\n    const extract_vector_scalar = function(vector) {\n        // handles deletion already - do not call delete() on the input vector\n        // again\n        let extracted = [];\n        for (let i = 0; i < vector.size(); i++) {\n            let item = vector.get(i);\n            extracted.push(col_path_vector_to_string(item));\n        }\n        vector.delete();\n        return extracted;\n    };\n\n    /**\n     * The schema of this {@link module:perspective~view}.\n     *\n     * A schema is an Object, the keys of which are the columns of this\n     * {@link module:perspective~view}, and the values are their string type\n     * names. If this {@link module:perspective~view} is aggregated, theses will\n     * be the aggregated types; otherwise these types will be the same as the\n     * columns in the underlying {@link module:perspective~table}.\n     *\n     * @example\n     * // Create a view\n     * const view = await table.view({\n     *      columns: [\"a\", \"b\"]\n     * });\n     * const schema = await view.schema(); // {a: \"float\", b: \"string\"}\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~view}'s schema.\n     */\n    view.prototype.schema = function(override = true) {\n        const schema = extract_map(this._View.schema());\n        if (override) {\n            for (const key of Object.keys(schema)) {\n                let colname = key.split(defaults.COLUMN_SEPARATOR_STRING);\n                colname = colname[colname.length - 1];\n                if (this.overridden_types[colname] && get_type_config(this.overridden_types[colname]).type === schema[key]) {\n                    schema[key] = this.overridden_types[colname];\n                }\n            }\n        }\n        return schema;\n    };\n\n    /**\n     * The expression schema of this {@link module:perspective~view},\n     * which contains only the expressions created on this view.\n     *\n     * A schema is an Object, the keys of which are the columns of this\n     * {@link module:perspective~view}, and the values are their string type\n     * names. If this {@link module:perspective~view} is aggregated, these will\n     * be the aggregated types; otherwise these types will be the same as the\n     * columns in the underlying {@link module:perspective~table}.\n     *\n     * @example\n     * // Create a view with expressions\n     * const view = table.view({\n     *      expressions: ['\"x\" + \"y\" - 100']\n     * });\n     *\n     * await view.expression_schema(); // {'\"x\" + \"y\" - 100': \"float\"}\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~view}'s expression schema.\n     */\n    view.prototype.expression_schema = function(override = true) {\n        const schema = extract_map(this._View.expression_schema());\n        if (override) {\n            for (const key of Object.keys(schema)) {\n                let colname = key.split(defaults.COLUMN_SEPARATOR_STRING);\n                colname = colname[colname.length - 1];\n                if (this.overridden_types[colname] && get_type_config(this.overridden_types[colname]).type === schema[key]) {\n                    schema[key] = this.overridden_types[colname];\n                }\n            }\n        }\n        return schema;\n    };\n\n    view.prototype._column_names = function(skip = false, depth = 0) {\n        return extract_vector_scalar(this._View.column_names(skip, depth)).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n    };\n\n    /**\n     * Returns an array of strings containing the column paths of the View\n     * without any of the source columns.\n     *\n     * A column path shows the columns that a given cell belongs to after pivots\n     * are applied.\n     *\n     * @returns {Array<String>} an Array of Strings containing the column paths.\n     */\n    view.prototype.column_paths = function() {\n        return extract_vector_scalar(this._View.column_paths()).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n    };\n\n    view.prototype.get_data_slice = function(start_row, end_row, start_col, end_col) {\n        if (this.is_unit_context) {\n            return __MODULE__.get_data_slice_unit(this._View, start_row, end_row, start_col, end_col);\n        } else {\n            const num_sides = this.sides();\n            const nidx = SIDES[num_sides];\n            return __MODULE__[`get_data_slice_${nidx}`](this._View, start_row, end_row, start_col, end_col);\n        }\n    };\n\n    /**\n     * Given an `options` Object, calculate the correct start/end rows and\n     * columns, as well as other metadata required by the data formatter.\n     *\n     * @private\n     * @param {Object} options User-provided options for `to_format`.\n     * @returns {Object} an Object containing the parsed options.\n     */\n    const _parse_format_options = function(options) {\n        options = options || {};\n        const max_cols = this._View.num_columns() + (this.sides() === 0 ? 0 : 1);\n        const max_rows = this._View.num_rows();\n        const hidden = this._num_hidden();\n        const psp_offset = this.sides() > 0 || this.column_only ? 1 : 0;\n\n        const viewport = this.config.viewport ? this.config.viewport : {};\n        const start_row = options.start_row || (viewport.top ? viewport.top : 0);\n        const end_row = Math.min(max_rows, options.end_row !== undefined ? options.end_row : viewport.height ? start_row + viewport.height : max_rows);\n        const start_col = options.start_col || (viewport.left ? viewport.left : 0);\n        const end_col = Math.min(max_cols, (options.end_col !== undefined ? options.end_col + psp_offset : viewport.width ? start_col + viewport.width : max_cols) * (hidden + 1));\n\n        // Return the calculated values\n        options.start_row = Math.floor(start_row);\n        options.end_row = Math.ceil(end_row);\n        options.start_col = Math.floor(start_col);\n        options.end_col = Math.ceil(end_col);\n\n        return options;\n    };\n\n    /**\n     * Calculates the [min, max] of the leaf nodes of a column `colname`.\n     *\n     * @param {String} colname A column name in this `View`.\n     * @returns {Array<Object>} A tuple of [min, max], whose types are column\n     * and aggregate dependent.\n     */\n    view.prototype.get_min_max = function(colname) {\n        if (this.is_unit_context) {\n            return __MODULE__.get_min_max_unit(this._View, colname);\n        } else {\n            const num_sides = this.sides();\n            const nidx = SIDES[num_sides];\n            return __MODULE__[`get_min_max_${nidx}`](this._View, colname);\n        }\n    };\n\n    /**\n     * Generic base function from which `to_json`, `to_columns` etc. derives.\n     *\n     * @private\n     */\n    const to_format = function(options, formatter) {\n        _call_process(this.table.get_id());\n        options = _parse_format_options.bind(this)(options);\n        const start_row = options.start_row;\n        const end_row = options.end_row;\n        const start_col = options.start_col;\n        const end_col = options.end_col;\n        const hidden = this._num_hidden();\n\n        const is_formatted = options.formatted;\n        const get_pkeys = !!options.index;\n        const get_ids = !!options.id;\n        const leaves_only = !!options.leaves_only;\n        const num_sides = this.sides();\n        const has_row_path = num_sides !== 0 && !this.column_only;\n        const nidx = SIDES[num_sides];\n\n        let get_from_data_slice;\n\n        if (this.is_unit_context) {\n            get_from_data_slice = __MODULE__.get_from_data_slice_unit;\n        } else {\n            get_from_data_slice = __MODULE__[`get_from_data_slice_${nidx}`];\n        }\n\n        const slice = this.get_data_slice(start_row, end_row, start_col, end_col);\n        const ns = slice.get_column_names();\n        const col_names = extract_vector_scalar(ns).map(x => x.join(defaults.COLUMN_SEPARATOR_STRING));\n        const schema = this.schema();\n\n        let data = formatter.initDataValue();\n\n        for (let ridx = start_row; ridx < end_row; ridx++) {\n            let row_path = has_row_path ? slice.get_row_path(ridx) : undefined;\n            if (has_row_path && leaves_only && row_path.size() < this.config.row_pivots.length) {\n                row_path.delete();\n                continue;\n            }\n            let row = formatter.initRowValue();\n\n            if (get_ids) {\n                formatter.initColumnValue(data, row, \"__ID__\");\n            }\n\n            for (let cidx = start_col; cidx < end_col; cidx++) {\n                const col_name = col_names[cidx];\n                const col_type = schema[col_name];\n                const type_config = get_type_config(col_type);\n                if (cidx === start_col && num_sides !== 0) {\n                    if (!this.column_only) {\n                        formatter.initColumnValue(data, row, \"__ROW_PATH__\");\n                        for (let i = 0; i < row_path.size(); i++) {\n                            const s = row_path.get(i);\n                            const value = __MODULE__.scalar_to_val(s, false, false);\n                            s.delete();\n                            formatter.addColumnValue(data, row, \"__ROW_PATH__\", value);\n                            if (get_ids) {\n                                formatter.addColumnValue(data, row, \"__ID__\", value);\n                            }\n                        }\n                    }\n                } else if ((cidx - (num_sides > 0 ? 1 : 0)) % (this.config.columns.length + hidden) >= this.config.columns.length) {\n                    // Hidden columns are always at the end, so don't emit\n                    // these.\n                    continue;\n                } else {\n                    let value = get_from_data_slice(slice, ridx, cidx);\n                    if (is_formatted && value !== null && value !== undefined) {\n                        if (col_type === \"datetime\" || col_type === \"date\") {\n                            // TODO Annoyingly, CSV occupies the gray area of\n                            // needing formatting _just_ for Date and Datetime -\n                            // e.g., 10000 will format as CSV `\"10,000.00\"\n                            // Otherwise, this would not need to be conditional.\n                            value = new Date(value);\n                            value = value.toLocaleString(\"en-us\", type_config.format);\n                        }\n                    }\n                    formatter.setColumnValue(data, row, col_name, value);\n                }\n            }\n\n            if (get_pkeys) {\n                const keys = slice.get_pkeys(ridx, 0);\n                formatter.initColumnValue(data, row, \"__INDEX__\");\n                for (let i = 0; i < keys.size(); i++) {\n                    // TODO: if __INDEX__ and set index have the same value,\n                    // don't we need to make sure that it only emits one?\n                    const s = keys.get(i);\n                    const value = __MODULE__.scalar_to_val(s, false, false);\n                    s.delete();\n                    formatter.addColumnValue(data, row, \"__INDEX__\", value);\n                }\n                keys.delete();\n            }\n\n            // we could add an api to just clone the index column if\n            // it's already calculated\n            if (get_ids && num_sides === 0) {\n                const keys = slice.get_pkeys(ridx, 0);\n                for (let i = 0; i < keys.size(); i++) {\n                    const s = keys.get(i);\n                    const value = __MODULE__.scalar_to_val(s, false, false);\n                    s.delete();\n                    formatter.addColumnValue(data, row, \"__ID__\", value);\n                }\n                keys.delete();\n            }\n\n            if (row_path) {\n                row_path.delete();\n            }\n            formatter.addRow(data, row);\n        }\n\n        slice.delete();\n        return formatter.formatData(data, options.config);\n    };\n\n    /**\n     * Generic base function for returning serialized data for a single column.\n     *\n     * @private\n     */\n    const column_to_format = function(col_name, options, format_function) {\n        const num_rows = this.num_rows();\n        const start_row = options.start_row || 0;\n        const end_row = options.end_row || num_rows;\n        const names = this._column_names();\n        let idx = names.indexOf(col_name);\n\n        if (idx === -1) {\n            return undefined;\n        }\n\n        // mutate the column index if necessary: in pivoted views, columns start\n        // at 1\n        const num_sides = this.sides();\n        if (num_sides > 0) {\n            idx++;\n        }\n\n        // use a specified data slice, if provided\n        let slice, data_slice;\n\n        if (!options.data_slice) {\n            data_slice = this.get_data_slice(start_row, end_row, idx, idx + 1);\n            slice = data_slice.get_slice();\n        } else {\n            slice = options.data_slice.get_column_slice(idx);\n        }\n\n        const dtype = this._View.get_column_dtype(idx);\n\n        const rst = format_function(slice, dtype, idx);\n        slice.delete();\n        if (data_slice) {\n            data_slice.delete();\n        }\n        return rst;\n    };\n\n    /**\n     * Serializes this view to JSON data in a column-oriented format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     * @param {boolean} [config.index=false] Should the index from the\n     * underlying {@link module:perspective~table} be in the output (as\n     * `\"__INDEX__\"`).\n     *\n     * @returns {Promise<Array>} A Promise resolving to An array of Objects\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row Object will have a \"__ROW_PATH__\"\n     * key, whose value specifies this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_columns = function(options) {\n        return to_format.call(this, options, formatters.jsonTableFormatter);\n    };\n\n    /**\n     * Serializes this view to JSON data in a row-oriented format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     *\n     * @returns {Promise<Array>} A Promise resolving to An array of Objects\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row Object will have a \"__ROW_PATH__\"\n     * key, whose value specifies this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_json = function(options) {\n        return to_format.call(this, options, formatters.jsonFormatter);\n    };\n\n    /**\n     * Serializes this view to CSV data in a standard format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     * @returns {Promise<string>} A Promise resolving to a string in CSV format\n     * representing the rows of this {@link module:perspective~view}.  If this\n     * {@link module:perspective~view} had a \"row_pivots\" config parameter\n     * supplied when constructed, each row will have prepended those values\n     * specified by this row's aggregated path.  If this\n     * {@link module:perspective~view} had a \"column_pivots\" config parameter\n     * supplied, the keys of this object will be comma-prepended with their\n     * comma-separated column paths.\n     */\n    view.prototype.to_csv = function(options) {\n        return to_format.call(this, options, formatters.csvFormatter);\n    };\n\n    /**\n     * Serializes a view column into a TypedArray.\n     *\n     * @async\n     *\n     * @param {string} column_name The name of the column to serialize.\n     *\n     * @param {Object} options An optional configuration object.\n     *\n     * @param {*} options.data_slice A data slice object from which to\n     * serialize.\n     *\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     *\n     * @returns {Promise<TypedArray>} A promise resolving to a TypedArray\n     * representing the data of the column as retrieved from the\n     * {@link module:perspective~view} - all pivots, aggregates, sorts, and\n     * filters have been applied onto the values inside the TypedArray. The\n     * TypedArray will be constructed based on data type - integers will resolve\n     * to Int8Array, Int16Array, or Int32Array. Floats resolve to Float32Array\n     * or Float64Array. If the column cannot be found, or is not of an\n     * integer/float type, the Promise returns undefined.\n     */\n    view.prototype.col_to_js_typed_array = function(col_name, options = {}) {\n        const format_function = __MODULE__[`col_to_js_typed_array`];\n        return column_to_format.call(this, col_name, options, format_function);\n    };\n\n    /**\n     * Serializes a view to the Apache Arrow data format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     *\n     * @param {number} options.start_row The starting row index from which to\n     * serialize.\n     * @param {number} options.end_row The ending row index from which to\n     * serialize.\n     * @param {number} options.start_col The starting column index from which to\n     * serialize.\n     * @param {number} options.end_col The ending column index from which to\n     * serialize.\n     *\n     * @returns {Promise<ArrayBuffer>} An `ArrayBuffer` in the Apache Arrow\n     * format containing data from the view.\n     */\n    view.prototype.to_arrow = function(options = {}) {\n        _call_process(this.table.get_id());\n        options = _parse_format_options.bind(this)(options);\n        const start_row = options.start_row;\n        const end_row = options.end_row;\n        const start_col = options.start_col;\n        const end_col = options.end_col;\n        const sides = this.sides();\n\n        if (this.is_unit_context) {\n            return __MODULE__.to_arrow_unit(this._View, start_row, end_row, start_col, end_col);\n        } else if (sides === 0) {\n            return __MODULE__.to_arrow_zero(this._View, start_row, end_row, start_col, end_col);\n        } else if (sides === 1) {\n            return __MODULE__.to_arrow_one(this._View, start_row, end_row, start_col, end_col);\n        } else if (sides === 2) {\n            return __MODULE__.to_arrow_two(this._View, start_row, end_row, start_col, end_col);\n        }\n    };\n\n    /**\n     * The number of aggregated rows in this {@link module:perspective~view}.\n     * This is affected by the \"row_pivots\" configuration parameter supplied to\n     * this {@link module:perspective~view}'s contructor.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of aggregated rows.\n     */\n    view.prototype.num_rows = function() {\n        return this._View.num_rows();\n    };\n\n    /**\n     * The number of aggregated columns in this {@link view}.  This is affected\n     * by the \"column_pivots\" configuration parameter supplied to this\n     * {@link view}'s contructor.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of aggregated columns.\n     */\n    view.prototype.num_columns = function() {\n        const ncols = this._View.num_columns();\n        const nhidden = this._num_hidden();\n        return ncols - (ncols / (this.config.columns.length + nhidden)) * nhidden;\n    };\n\n    /**\n     * Whether this row at index `idx` is in an expanded or collapsed state.\n     *\n     * @async\n     *\n     * @returns {Promise<bool>} Whether this row is expanded.\n     */\n    view.prototype.get_row_expanded = function(idx) {\n        return this._View.get_row_expanded(idx);\n    };\n\n    /**\n     * Expands the row at index `idx`.\n     *\n     * @async\n     *\n     * @returns {Promise<void>}\n     */\n    view.prototype.expand = function(idx) {\n        return this._View.expand(idx, this.config.row_pivots.length);\n    };\n\n    /**\n     * Collapses the row at index `idx`.\n     *\n     * @async\n     *\n     * @returns {Promise<void>}\n     */\n    view.prototype.collapse = function(idx) {\n        return this._View.collapse(idx);\n    };\n\n    /**\n     * Set expansion `depth` of the pivot tree.\n     *\n     */\n    view.prototype.set_depth = function(depth) {\n        return this._View.set_depth(depth, this.config.row_pivots.length);\n    };\n\n    /**\n     * Returns the data of all changed rows in JSON format, or for 1+ sided\n     * contexts the entire dataset of the view.\n     * @private\n     */\n    view.prototype._get_step_delta = async function() {\n        let delta = this._View.get_step_delta(0, 2147483647);\n        let data;\n        if (delta.cells.size() === 0) {\n            // FIXME This is currently not implemented for 1+ sided contexts.\n            data = this.to_json();\n        } else {\n            let rows = {};\n            for (let x = 0; x < delta.cells.size(); x++) {\n                rows[delta.cells.get(x).row] = true;\n            }\n            rows = Object.keys(rows);\n            const results = rows.map(row =>\n                this.to_json({\n                    start_row: Number.parseInt(row),\n                    end_row: Number.parseInt(row) + 1\n                })\n            );\n            data = [].concat.apply([], results);\n        }\n        delta.cells.delete();\n        return data;\n    };\n\n    /**\n     * Returns an Arrow-serialized dataset that contains the data from updated\n     * rows. Do not call this function directly, instead use the\n     * {@link module:perspective~view}'s `on_update` method with `{mode: \"row\"}`\n     * in order to access the row deltas.\n     *\n     * @private\n     */\n    view.prototype._get_row_delta = async function() {\n        if (this.is_unit_context) {\n            return __MODULE__.get_row_delta_unit(this._View);\n        } else {\n            const sides = this.sides();\n            const nidx = SIDES[sides];\n            return __MODULE__[`get_row_delta_${nidx}`](this._View);\n        }\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~view}. Whenever\n     * the {@link module:perspective~view}'s underlying table emits an update,\n     * this callback will be invoked with an object containing `port_id`,\n     * indicating which port the update fired on, and optionally `delta`, which\n     * is the new data that was updated for each cell or each row.\n     *\n     * @example\n     * // Attach an `on_update` callback\n     * view.on_update(updated => console.log(updated.port_id));\n     *\n     * @example\n     * // `on_update` with row deltas\n     * view.on_update(updated => console.log(updated.delta), {mode: \"row\"});\n     *\n     * @param {function} callback A callback function invoked on update, which\n     * receives an object with two keys: `port_id`, indicating which port the\n     * update was triggered on, and `delta`, whose value is dependent on the\n     * `mode` parameter:\n     *     - \"none\" (default): `delta` is `undefined`.\n     *     - \"row\": `delta` is an Arrow of the updated rows.\n     */\n    view.prototype.on_update = function(callback, {mode = \"none\"} = {}) {\n        _call_process(this.table.get_id());\n\n        if ([\"none\", \"row\"].indexOf(mode) === -1) {\n            throw new Error(`Invalid update mode \"${mode}\" - valid modes are \"none\" and \"row\".`);\n        }\n\n        if (mode === \"row\") {\n            // Enable deltas only if needed by callback\n            if (!this._View._get_deltas_enabled()) {\n                this._View._set_deltas_enabled(true);\n            }\n        }\n\n        this.update_callbacks.push({\n            view: this,\n            orig_callback: callback,\n            callback: async (port_id, cache) => {\n                // Cache prevents repeated calls to expensive delta functions\n                // for on_update callbacks triggered sequentially from the same\n                // update delta.\n                if (cache[port_id] === undefined) {\n                    cache[port_id] = {};\n                }\n\n                let updated = {port_id};\n\n                if (mode === \"row\") {\n                    if (cache[port_id][\"row_delta\"] === undefined) {\n                        cache[port_id][\"row_delta\"] = await this._get_row_delta();\n                    }\n                    updated.delta = cache[port_id][\"row_delta\"];\n                }\n\n                // Call the callback with the updated object containing\n                // `port_id` and `delta`.\n                callback(updated);\n            }\n        });\n    };\n\n    function filterInPlace(a, condition) {\n        let i = 0,\n            j = 0;\n\n        while (i < a.length) {\n            const val = a[i];\n            if (condition(val, i, a)) a[j++] = val;\n            i++;\n        }\n\n        a.length = j;\n        return a;\n    }\n\n    /*\n     * Unregister a previously registered update callback with this\n     * {@link module:perspective~view}.\n     *\n     * @example\n     * // remove an `on_update` callback\n     * const callback = updated => console.log(updated);\n     * view.remove_update(callback);\n     *\n     * @param {function} callback A update callback function to be removed\n     */\n    view.prototype.remove_update = function(callback) {\n        _call_process(this.table.get_id());\n        const total = this.update_callbacks.length;\n        filterInPlace(this.update_callbacks, x => x.orig_callback !== callback);\n        console.assert(total > this.update_callbacks.length, `\"callback\" does not match a registered updater`);\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~view}.  Whenever\n     * the {@link module:perspective~view} is deleted, this callback will be\n     * invoked.\n     *\n     * @example\n     * // attach an `on_delete` callback\n     * view.on_delete(() => console.log(\"Deleted!\"));\n     *\n     * @param {function} callback A callback function invoked on delete.\n     */\n    view.prototype.on_delete = function(callback) {\n        this._delete_callbacks.push(callback);\n    };\n\n    /**\n     * Unregister a previously registered delete callback with this\n     * {@link module:perspective~view}.\n     *\n     * @example\n     * // remove an `on_delete` callback\n     * const callback = () => console.log(\"Deleted!\")\n     * view.remove_delete(callback);\n     *\n     * @param {function} callback A delete callback function to be removed\n     */\n    view.prototype.remove_delete = function(callback) {\n        const initial_length = this._delete_callbacks.length;\n        filterInPlace(this._delete_callbacks, cb => cb !== callback);\n        console.assert(initial_length > this._delete_callbacks.length, `\"callback\" does not match a registered delete callbacks`);\n    };\n\n    /**\n     * A view config is a set of options that configures the underlying\n     * {@link module:perspective~view}, specifying its pivots, columns to show,\n     * aggregates, filters, and sorts.\n     *\n     * The view config receives an `Object` containing configuration options,\n     * and the `view_config` transforms it into a canonical format for\n     * interfacing with the core engine.\n     *\n     * <strong>Note</strong> This constructor is not public - view config\n     * objects should be created using standard Javascript `Object`s in the\n     * {@link module:perspective~table#view} method, which has an `options`\n     * parameter.\n     *\n     * @param {Object} config the configuration `Object` passed by the user to\n     * the {@link module:perspective~table#view} method.\n     * @private\n     * @class\n     * @hideconstructor\n     */\n    function view_config(config) {\n        this.row_pivots = config.row_pivots || [];\n        this.column_pivots = config.column_pivots || [];\n        this.aggregates = config.aggregates || {};\n        this.columns = config.columns;\n        this.filter = config.filter || [];\n        this.sort = config.sort || [];\n        this.expressions = config.expressions || [];\n        this.filter_op = config.filter_op || \"and\";\n        this.row_pivot_depth = config.row_pivot_depth;\n        this.column_pivot_depth = config.column_pivot_depth;\n    }\n\n    /**\n     * Transform configuration items into `std::vector` objects for interface\n     * with C++. `this.aggregates` is not transformed into a C++ map, as the use\n     * of `ordered_map` in the engine makes binding more difficult.\n     *\n     * @private\n     */\n    view_config.prototype.get_row_pivots = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.row_pivots);\n    };\n\n    view_config.prototype.get_column_pivots = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.column_pivots);\n    };\n\n    view_config.prototype.get_columns = function() {\n        let vector = __MODULE__.make_string_vector();\n        return fill_vector(vector, this.columns);\n    };\n\n    view_config.prototype.get_filter = function() {\n        let vector = __MODULE__.make_2d_val_vector();\n        for (let filter of this.filter) {\n            let filter_vector = __MODULE__.make_val_vector();\n            let filled = fill_vector(filter_vector, filter);\n            vector.push_back(filled);\n        }\n        return vector;\n    };\n\n    view_config.prototype.get_sort = function() {\n        let vector = __MODULE__.make_2d_string_vector();\n        for (let sort of this.sort) {\n            let sort_vector = __MODULE__.make_string_vector();\n            let filled = fill_vector(sort_vector, sort);\n            vector.push_back(filled);\n        }\n        return vector;\n    };\n\n    view_config.prototype.get_expressions = function() {\n        let vector = __MODULE__.make_2d_val_vector();\n        for (let expression of this.expressions) {\n            let inner = __MODULE__.make_val_vector();\n            for (let val of expression) {\n                inner.push_back(val);\n            }\n            vector.push_back(inner);\n        }\n        return vector;\n    };\n\n    /***************************************************************************\n     *\n     * Table\n     *\n     */\n\n    /**\n     * A Table object is the basic data container in Perspective.  Tables are\n     * typed - they have an immutable set of column names, and a known type for\n     * each.\n     *\n     * <strong>Note</strong> This constructor is not public - Tables are created\n     * by invoking the {@link module:perspective~table} factory method, either\n     * on the perspective module object, or an a\n     * {@link module:perspective~worker} instance.\n     *\n     * @class\n     * @hideconstructor\n     */\n    function table(_Table, index, limit, overridden_types) {\n        this._Table = _Table;\n        this.gnode_id = this._Table.get_gnode().get_id();\n        this._Table.get_pool().set_update_delegate(this);\n        this.name = Math.random() + \"\";\n        this.initialized = false;\n        this.index = index;\n        this.limit = limit;\n        this.update_callbacks = [];\n        this._delete_callbacks = [];\n        this.views = [];\n        this.overridden_types = overridden_types;\n        bindall(this);\n    }\n\n    table.prototype.get_id = function() {\n        return this._Table.get_id();\n    };\n\n    table.prototype.get_pool = function() {\n        return this._Table.get_pool();\n    };\n\n    table.prototype.make_port = function() {\n        return this._Table.make_port();\n    };\n\n    table.prototype.remove_port = function() {\n        this._Table.remove_port();\n    };\n\n    table.prototype._update_callback = function(port_id) {\n        let cache = {};\n        for (let e in this.update_callbacks) {\n            this.update_callbacks[e].callback(port_id, cache);\n        }\n    };\n\n    /**\n     * Returns the user-specified index column for this\n     * {@link module:perspective~table} or null if an index is not set.\n     */\n    table.prototype.get_index = function() {\n        return this.index;\n    };\n\n    /**\n     * Returns the user-specified limit column for this\n     * {@link module:perspective~table} or null if an limit is not set.\n     */\n    table.prototype.get_limit = function() {\n        return this.limit;\n    };\n\n    /**\n     * Remove all rows in this {@link module:perspective~table} while preserving\n     * the schema and construction options.\n     */\n    table.prototype.clear = function() {\n        _remove_process(this.get_id());\n        this._Table.reset_gnode(this.gnode_id);\n    };\n\n    /**\n     * Replace all rows in this {@link module:perspective~table} the input data.\n     */\n    table.prototype.replace = function(data) {\n        _remove_process(this.get_id());\n        this._Table.reset_gnode(this.gnode_id);\n        this.update(data);\n        _call_process(this.get_id());\n    };\n\n    /**\n     * Delete this {@link module:perspective~table} and clean up all resources\n     * associated with it. Table objects do not stop consuming resources or\n     * processing updates when they are garbage collected - you must call this\n     * method to reclaim these.\n     */\n    table.prototype.delete = function() {\n        if (this.views.length > 0) {\n            throw `Cannot delete Table as it still has ${this.views.length} registered View(s).`;\n        }\n        _remove_process(this.get_id());\n        this._Table.unregister_gnode(this.gnode_id);\n        this._Table.delete();\n\n        // Call delete callbacks\n        for (const callback of this._delete_callbacks) {\n            callback();\n        }\n    };\n\n    /**\n     * Register a callback with this {@link module:perspective~table}.  Whenever\n     * the {@link module:perspective~table} is deleted, this callback will be\n     * invoked.\n     *\n     * @param {function} callback A callback function with no parameters\n     *      that will be invoked on `delete()`.\n     */\n    table.prototype.on_delete = function(callback) {\n        this._delete_callbacks.push(callback);\n    };\n\n    /**\n     * Unregister a previously registered delete callback with this\n     * {@link module:perspective~table}.\n     *\n     * @param {function} callback A delete callback function to be removed\n     */\n    table.prototype.remove_delete = function(callback) {\n        const initial_length = this._delete_callbacks.length;\n        filterInPlace(this._delete_callbacks, cb => cb !== callback);\n        console.assert(initial_length > this._delete_callbacks.length, `\"callback\" does not match a registered delete callbacks`);\n    };\n\n    /**\n     * The number of accumulated rows in this {@link module:perspective~table}.\n     * This is affected by the \"index\" configuration parameter supplied to this\n     * {@link module:perspective~view}'s contructor - as rows will be\n     * overwritten when they share an idnex column.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of accumulated rows.\n     */\n    table.prototype.size = function() {\n        _call_process(this._Table.get_id());\n        return this._Table.size();\n    };\n\n    /**\n     * The schema of this {@link module:perspective~table}.  A schema is an\n     * Object whose keys are the columns of this\n     * {@link module:perspective~table}, and whose values are their string type\n     * names.\n     *\n     * @async\n     * @returns {Promise<Object>} A Promise of this\n     * {@link module:perspective~table}'s schema.\n     */\n    table.prototype.schema = function(override = true) {\n        let schema = this._Table.get_schema();\n        let columns = schema.columns();\n        let types = schema.types();\n        let new_schema = {};\n        for (let key = 0; key < columns.size(); key++) {\n            const name = columns.get(key);\n            if (name === \"psp_okey\") {\n                continue;\n            }\n            if (override && this.overridden_types[name]) {\n                new_schema[name] = this.overridden_types[name];\n            } else {\n                new_schema[name] = get_column_type(types.get(key).value);\n            }\n        }\n        schema.delete();\n        columns.delete();\n        types.delete();\n        return new_schema;\n    };\n\n    /**\n     * Transform an expression string into a vector that internally provides\n     * the engine with more metadata in order to efficiently compute the\n     * expression:\n     *\n     * v[0]: the expression string as typed by the user\n     * v[1]: the expression string with \"column\" replaced with col0, col1,\n     *  etc., which allows for faster lookup of column values.\n     * v[2]: a map of column keys (col0, col1) to actual column names,\n     *  which will be used in the engine to look up column values.\n     *\n     * @private\n     * @param {Array<String>} expressions\n     */\n    function parse_expression_strings(expressions) {\n        let validated_expressions = [];\n        const expression_idx_map = {};\n\n        for (let expression_string of expressions) {\n            if (expression_string.includes('\"\"')) {\n                console.error(`Skipping expression '${expression_string}', as it cannot reference an empty column!`);\n                continue;\n            }\n\n            // Map of column names to column IDs, so that we generate\n            // column IDs correctly without collision.\n            let column_name_map = {};\n\n            // Map of column IDs to column names, so the engine can look\n            // up the right column internally without more transforms.\n            let column_id_map = {};\n            let running_cidx = 0;\n\n            // First, look for a column alias, which is a // style comment\n            // on the first line of the expression.\n            let expression_alias;\n\n            let parsed_expression_string = expression_string.replace(/\\/\\/(.+?)$/m, (_, alias) => {\n                expression_alias = alias.trim();\n                return \"\";\n            });\n\n            // If an alias does not exist, the alias is the expression itself.\n            if (!expression_alias || expression_alias.length == 0) {\n                expression_alias = expression_string;\n            }\n\n            parsed_expression_string = parsed_expression_string.replace(/\\\"(.*?[^\\\\])\\\"/g, (_, cname) => {\n                // If the column name contains escaped double quotes, replace\n                // them and assume that they escape one double quote. If there\n                // are multiple double quotes being escaped, i.e. \\\"\"...well?\n                cname = cname.replace(/\\\\\"/g, '\"');\n\n                if (column_name_map[cname] === undefined) {\n                    let column_id = `COLUMN${running_cidx}`;\n                    column_name_map[cname] = column_id;\n                    column_id_map[column_id] = cname;\n                }\n\n                running_cidx++;\n                return column_name_map[cname];\n            });\n\n            // Replace single quote string literals and wrap them in a call to\n            // intern() which makes sure they don't leak\n            parsed_expression_string = parsed_expression_string.replace(/'(.*?[^\\\\])'/g, match => `intern(${match})`);\n\n            // Replace intern() for bucket, as it takes a string literal\n            // parameter and does not work if that param is interned. TODO:\n            // this is clumsy and we should have a better way of handling it.\n            parsed_expression_string = parsed_expression_string.replace(/bucket\\(.*?, (intern\\(\\'([smhDWMY])\\'\\))\\)/g, (match, full, value) => {\n                return `${match.substr(0, match.indexOf(full))}'${value}')`;\n            });\n\n            const validated = [expression_alias, expression_string, parsed_expression_string, column_id_map];\n\n            // Check if this expression is already in the array, if so then\n            // we need to replace the expression so the last expression tagged\n            // with the alias is the one that is applied to the engine.\n            if (expression_idx_map[expression_alias] !== undefined) {\n                const idx = expression_idx_map[expression_alias];\n                validated_expressions[idx] = validated;\n            } else {\n                validated_expressions.push(validated);\n                expression_idx_map[expression_alias] = validated_expressions.length - 1;\n            }\n        }\n\n        return validated_expressions;\n    }\n\n    /**\n     * Given an array of expressions, return an object containing `expressions`,\n     * which map expression aliases to data types, and `errors`, which\n     * maps expression aliases to error messages. If an expression that was\n     * passed in is not in `expressions`, it is guaranteed to be in `errors`.\n     *\n     * @async\n     * @param {Array<String>} expressions An array of string expressions to\n     * be validated.\n     *\n     * @returns {Promise<Object>}\n     *\n     * @example\n     * const results = await table.validate_expressions([\n     *  '\"Sales\" + \"Profit\"', \"invalid\", \"1 + 'string'\"\n     * ]);\n     *\n     * // {'\"Sales\" + \"Profit\"': \"float\"}\n     * console.log(results.expression_schema);\n     *\n     * // {\"invalid\": \"unknown token!\", \"1 + 'string'\": \"TypeError\"}\n     * console.log(results.errors);\n     */\n    table.prototype.validate_expressions = function(expressions, override = true) {\n        const validated = {\n            expression_schema: {},\n            errors: {}\n        };\n\n        if (!expressions || expressions.length === 0) return validated;\n        expressions = parse_expression_strings(expressions);\n\n        // Transform Array into a C++ vector that can be passed through\n        // Emscripten.\n        let vector = __MODULE__.make_2d_val_vector();\n\n        for (let expression of expressions) {\n            let inner = __MODULE__.make_val_vector();\n            for (let val of expression) {\n                inner.push_back(val);\n            }\n            vector.push_back(inner);\n        }\n\n        const validation_results = __MODULE__.validate_expressions(this._Table, vector);\n        const expression_schema = validation_results.get_expression_schema();\n        const expression_errors = validation_results.get_expression_errors();\n\n        const expression_aliases = expression_schema.keys();\n\n        for (let i = 0; i < expression_aliases.size(); i++) {\n            const alias = expression_aliases.get(i);\n            let dtype = expression_schema.get(alias);\n\n            if (override && this.overridden_types[alias]) {\n                dtype = this.overridden_types[alias];\n            }\n\n            validated.expression_schema[alias] = dtype;\n        }\n\n        const error_aliases = expression_errors.keys();\n\n        for (let i = 0; i < error_aliases.size(); i++) {\n            const alias = error_aliases.get(i);\n\n            // bound using `value_object` in embind so no need to manually\n            // convert to Object, or call delete() as memory is auto-managed.\n            const error_object = expression_errors.get(alias);\n            validated.errors[alias] = error_object;\n        }\n\n        error_aliases.delete();\n        expression_aliases.delete();\n        expression_errors.delete();\n        expression_schema.delete();\n        validation_results.delete();\n        return validated;\n    };\n\n    /**\n     * Validates a filter configuration, i.e. that the value to filter by is not\n     * null or undefined.\n     *\n     * @async\n     * @param {Array<string>} [filter] a filter configuration to test.\n     */\n    table.prototype.is_valid_filter = function(filter) {\n        // isNull and isNotNull filter operators are always valid and apply to\n        // all schema types\n        if (filter[1] === perspective.FILTER_OPERATORS.isNull || filter[1] === perspective.FILTER_OPERATORS.isNotNull) {\n            return true;\n        }\n\n        let value = filter[2];\n        if (value === null) {\n            return false;\n        }\n\n        const schema = this.schema();\n        const exists = schema[filter[0]];\n        if (exists && (schema[filter[0]] === \"date\" || schema[filter[0]] === \"datetime\")) {\n            return __MODULE__.is_valid_datetime(filter[2]);\n        }\n\n        return typeof value !== \"undefined\" && value !== null;\n    };\n\n    /* eslint-disable max-len */\n\n    /**\n     * Create a new {@link module:perspective~view} from this table with a\n     * specified configuration. For a better understanding of the View\n     * configuration options, see the\n     * [Documentation](https://perspective.finos.org/docs/md/view.html).\n     *\n     * @param {Object} [config] The configuration object for this\n     * {@link module:perspective~view}.\n     * @param {Array<string>} [config.row_pivots] An array of column names to\n     * use as {@link https://en.wikipedia.org/wiki/Pivot_table#Row_labels Row Pivots}.\n     * @param {Array<string>} [config.column_pivots] An array of column names to\n     * use as {@link https://en.wikipedia.org/wiki/Pivot_table#Column_labels Column Pivots}.\n     * @param {Array<Object>} [config.columns] An array of column names for the\n     * output columns. If none are provided, all columns are output.\n     * @param {Object} [config.aggregates] An object, the keys of which are\n     * column names, and their respective values are the aggregates calculations\n     * to use when this view has `row_pivots`. A column provided to\n     * `config.columns` without an aggregate in this object, will use the\n     * default aggregate calculation for its type.\n     * @param {Array<Array<string>>} [config.filter] An Array of Filter\n     * configurations to apply. A filter configuration is an array of 3\n     * elements: A column name, a supported filter comparison string (e.g.\n     * '===', '>'), and a value to compare.\n     * @param {Array<string>} [config.sort] An Array of Sort configurations to\n     * apply. A sort configuration is an array of 2 elements: A column name, and\n     * a sort direction, which are: \"none\", \"asc\", \"desc\", \"col asc\", \"col\n     * desc\", \"asc abs\", \"desc abs\", \"col asc abs\", \"col desc abs\".\n     *\n     * @example\n     * const view = await table.view({\n     *      row_pivots: [\"region\"],\n     *      columns: [\"region\"],\n     *      aggregates: {\"region\": \"dominant\"},\n     *      filter: [[\"client\", \"contains\", \"fred\"]],\n     *      sort: [[\"value\", \"asc\"]]\n     * });\n     *\n     * @returns {Promise<view>} A Promise that resolves to a new\n     * {@link module:perspective~view} object for the supplied configuration,\n     * bound to this table.\n     */\n    table.prototype.view = function(_config = {}) {\n        _call_process(this._Table.get_id());\n        let config = {};\n        for (const key of Object.keys(_config)) {\n            if (defaults.CONFIG_ALIASES[key]) {\n                if (!config[defaults.CONFIG_ALIASES[key]]) {\n                    if (!WARNED_KEYS.has(key)) {\n                        console.warn(`Deprecated: \"${key}\" config parameter, please use \"${defaults.CONFIG_ALIASES[key]}\" instead`);\n                        WARNED_KEYS.add(key);\n                    }\n                    config[defaults.CONFIG_ALIASES[key]] = _config[key];\n                } else {\n                    throw new Error(`Duplicate configuration parameter \"${key}\"`);\n                }\n            } else if (key === \"aggregate\") {\n                if (!WARNED_KEYS.has(\"aggregate\")) {\n                    console.warn(`Deprecated: \"aggregate\" config parameter has been replaced by \"aggregates\" and \"columns\"`);\n                    WARNED_KEYS.add(\"aggregate\");\n                }\n                // backwards compatibility: deconstruct `aggregate` into\n                // `aggregates` and `columns`\n                config[\"aggregates\"] = {};\n                config[\"columns\"] = [];\n                for (const agg of _config[\"aggregate\"]) {\n                    config[\"aggregates\"][agg[\"column\"]] = agg[\"op\"];\n                    config[\"columns\"].push(agg[\"column\"]);\n                }\n            } else if (defaults.CONFIG_VALID_KEYS.indexOf(key) > -1) {\n                config[key] = _config[key];\n            } else {\n                throw new Error(`Unrecognized config parameter \"${key}\"`);\n            }\n        }\n\n        config.row_pivots = config.row_pivots || [];\n        config.column_pivots = config.column_pivots || [];\n        config.aggregates = config.aggregates || {};\n        config.filter = config.filter || [];\n        config.sort = config.sort || [];\n        config.expressions = config.expressions || [];\n\n        const table_schema = this.schema();\n\n        if (config.expressions.length > 0) {\n            config.expressions = parse_expression_strings(config.expressions);\n        }\n\n        if (config.columns === undefined) {\n            // If columns are not provided, use all columns\n            config.columns = this.columns();\n\n            if (config.expressions.length > 0) {\n                for (const expr of config.expressions) {\n                    config.columns.push(expr[0]);\n                }\n            }\n        }\n\n        // convert date/datetime filters to Date() objects, so they are parsed\n        // as local time\n        if (config.filter.length > 0) {\n            for (let filter of config.filter) {\n                // TODO: this does not work for expressions\n                const dtype = table_schema[filter[0]];\n                const is_compare = filter[1] !== perspective.FILTER_OPERATORS.isNull && filter[1] !== perspective.FILTER_OPERATORS.isNotNull;\n                if (is_compare && (dtype === \"date\" || dtype === \"datetime\")) {\n                    // new Date() accepts strings and new Date() objects, so no\n                    // need to type check here.\n                    filter[2] = new Date(filter[2]);\n                }\n            }\n        }\n\n        let name = Math.random() + \"\";\n        let sides;\n\n        if (config.row_pivots.length > 0 || config.column_pivots.length > 0) {\n            if (config.column_pivots && config.column_pivots.length > 0) {\n                sides = 2;\n            } else {\n                sides = 1;\n            }\n        } else {\n            sides = 0;\n        }\n\n        let vc = new view_config(config);\n        let v = new view(this, sides, config, vc, name);\n        this.views.push(v);\n        return v;\n    };\n\n    /* eslint-enable max-len */\n\n    let meter;\n\n    function initialize_profile_thread() {\n        if (meter === undefined) {\n            let _msgs = 0;\n            let start = performance.now();\n            setTimeout(function poll() {\n                let now = performance.now();\n                console.log(`${((1000 * _msgs) / (now - start)).toFixed(2)} msgs/sec`);\n                _msgs = 0;\n                start = now;\n                setTimeout(poll, 5000);\n            }, 5000);\n            meter = function update(x) {\n                _msgs += x;\n            };\n            console.log(\"Profiling initialized\");\n        }\n    }\n\n    /**\n     * Updates the rows of a {@link module:perspective~table}. Updated rows are\n     * pushed down to any derived {@link module:perspective~view} objects.\n     *\n     * @param {Object<string, Array>|Array<Object>|string} data The input data\n     * for this table. {@link module:perspective~table}s are immutable after\n     * creation, so this method cannot be called with a schema.\n     *\n     * Otherwise, the supported input types are the same as the\n     * {@link module:perspective~table} constructor.\n     *\n     * @see {@link module:perspective~table}\n     */\n    table.prototype.update = function(data, options) {\n        options = options || {};\n        options.port_id = options.port_id || 0;\n\n        let pdata;\n        let cols = this.columns();\n        let schema = this._Table.get_schema();\n        let types = schema.types();\n        let is_arrow = false;\n        let is_csv = false;\n\n        pdata = accessor;\n\n        if (data instanceof ArrayBuffer) {\n            pdata = new Uint8Array(data);\n            is_arrow = true;\n        } else if (typeof data === \"string\") {\n            if (data[0] === \",\") {\n                data = \"_\" + data;\n            }\n            is_csv = true;\n            is_arrow = true;\n            pdata = data;\n        } else {\n            accessor.init(data);\n            accessor.names = cols.concat(accessor.names.filter(x => x === \"__INDEX__\"));\n            accessor.types = extract_vector(types).slice(0, cols.length);\n\n            if (meter) {\n                meter(accessor.row_count);\n            }\n        }\n\n        if (!is_arrow) {\n            if (pdata.row_count === 0) {\n                console.warn(\"table.update called with no data - ignoring\");\n                return;\n            }\n\n            // process implicit index column\n            const has_index = accessor.names.indexOf(\"__INDEX__\");\n            if (has_index != -1) {\n                const explicit_index = !!this.index;\n                if (explicit_index) {\n                    // find the type of the index column\n                    accessor.types.push(accessor.types[accessor.names.indexOf(this.index)]);\n                } else {\n                    // default index is an integer\n                    accessor.types.push(__MODULE__.t_dtype.DTYPE_INT32);\n                }\n            }\n        }\n\n        try {\n            const op = __MODULE__.t_op.OP_INSERT;\n            // update the Table in C++, but don't keep the returned C++ Table\n            // reference as it is identical\n            make_table(pdata, this._Table, this.index, this.limit, op, true, is_arrow, is_csv, options.port_id);\n            this.initialized = true;\n        } catch (e) {\n            console.error(`Update failed: ${e}`);\n        } finally {\n            schema.delete();\n        }\n    };\n\n    /**\n     * Removes the rows of a {@link module:perspective~table}. Removed rows are\n     * pushed down to any derived {@link module:perspective~view} objects.\n     *\n     * @param {Array<Object>} data An array of primary keys to remove.\n     *\n     * @see {@link module:perspective~table}\n     */\n    table.prototype.remove = function(data, options) {\n        if (!this.index) {\n            console.error(\"Cannot call `remove()` on a Table without a user-specified index.\");\n            return;\n        }\n\n        options = options || {};\n        options.port_id = options.port_id || 0;\n        let pdata;\n        let cols = this.columns();\n        let schema = this._Table.get_schema();\n        let types = schema.types();\n        let is_arrow = false;\n\n        data = data.map(idx => ({[this.index]: idx}));\n\n        if (data instanceof ArrayBuffer) {\n            pdata = new Uint8Array(data);\n            is_arrow = true;\n        } else {\n            accessor.init(data);\n            accessor.names = [this.index];\n            accessor.types = [extract_vector(types)[cols.indexOf(this.index)]];\n            pdata = accessor;\n        }\n\n        try {\n            const op = __MODULE__.t_op.OP_DELETE;\n            // update the Table in C++, but don't keep the returned Table\n            // reference as it is identical\n            make_table(pdata, this._Table, this.index, this.limit, op, false, is_arrow, false, options.port_id);\n            this.initialized = true;\n        } catch (e) {\n            console.error(`Remove failed`, e);\n        } finally {\n            schema.delete();\n        }\n    };\n\n    /**\n     * The column names of this table.\n     *\n     * @async\n     * @returns {Promise<Array<string>>} An array of column names for this\n     * table.\n     */\n    table.prototype.columns = function() {\n        let schema = this._Table.get_schema();\n        let cols = schema.columns();\n        let names = [];\n        for (let cidx = 0; cidx < cols.size(); cidx++) {\n            let name = cols.get(cidx);\n            if (name !== \"psp_okey\") {\n                names.push(name);\n            }\n        }\n        schema.delete();\n        cols.delete();\n        return names;\n    };\n\n    table.prototype.execute = function(f) {\n        f(this);\n    };\n\n    /***************************************************************************\n     *\n     * Perspective\n     *\n     */\n\n    const perspective = {\n        __module__: __MODULE__,\n\n        Server,\n\n        worker: function() {\n            return this;\n        },\n\n        initialize_profile_thread,\n\n        memory_usage,\n\n        /**\n         * A factory method for constructing {@link module:perspective~table}s.\n         *\n         * @example\n         * // Creating a table directly from node\n         * const table = await perspective.table([{x: 1}, {x: 2}]);\n         *\n         * @example\n         * // Creating a table from a Web Worker (instantiated via the worker()\n         * method).\n         * const table = await worker.table([{x: 1}, {x: 2}]);\n         *\n         * @param {Object<string, Array>|Object<string,\n         *     string>|Array<Object>|string} data The input data for this table.\n         *     When supplied an Object with string values, an empty table is\n         *     returned using this Object as a schema. When an Object with\n         *     Array values is supplied, a table is returned using this object's\n         *     key/value pairs as name/columns respectively. When an Array is\n         *     supplied, a table is constructed using this Array's objects as\n         *     rows. When a string is supplied, the parameter as parsed as a\n         *     CSV.\n         * @param {Object} [options] An optional options dictionary.\n         * @param {string} options.index The name of the column in the resulting\n         *     table to treat as an index. When updating this table, rows\n         *     sharing an index of a new row will be overwritten. `index`\n         *     cannot be applied at the same time as `limit`.\n         * @param {integer} options.limit The maximum number of rows that can be\n         *     added to this table. When exceeded, old rows will be overwritten\n         *     in the order they were inserted. `limit` cannot be applied at\n         *     the same time as `index`.\n         *\n         * @returns {Promise<table>} A Promise that will resolve to a new\n         * {@link module:perspective~table} object, or be rejected if an error\n         * happens during Table construction.\n         */\n        table: function(data, options) {\n            options = options || {};\n\n            // Always store index and limit as user-provided values or `null`.\n            options.index = options.index || null;\n            options.limit = options.limit || null;\n\n            let data_accessor;\n            let is_arrow = false;\n            let overridden_types = {};\n            let is_csv = false;\n\n            if (data instanceof ArrayBuffer || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\n                data_accessor = new Uint8Array(data);\n                is_arrow = true;\n            } else if (typeof data === \"string\") {\n                if (data[0] === \",\") {\n                    data = \"_\" + data;\n                }\n                is_csv = true;\n                is_arrow = true;\n                data_accessor = data;\n            } else {\n                accessor.clean();\n                overridden_types = accessor.init(data);\n                data_accessor = accessor;\n            }\n\n            if (options.index && options.limit) {\n                throw `Cannot specify both index '${options.index}' and limit '${options.limit}'.`;\n            }\n\n            let _Table;\n\n            try {\n                const op = __MODULE__.t_op.OP_INSERT;\n\n                // C++ Table constructor cannot take null values for index\n                // and limit, so `make_table` will convert null to default\n                // values of \"\" for index and 4294967295 for limit. Tables\n                // must be created on port 0.\n                _Table = make_table(data_accessor, undefined, options.index, options.limit, op, false, is_arrow, is_csv, 0);\n\n                // Pass through user-provided values or `null` to the\n                // Javascript Table constructor.\n                return new table(_Table, options.index, options.limit, overridden_types);\n            } catch (e) {\n                if (_Table) {\n                    _Table.delete();\n                }\n                console.error(`Table initialization failed: ${e}`);\n                throw e;\n            }\n        }\n    };\n\n    for (let prop of Object.keys(defaults)) {\n        perspective[prop] = defaults[prop];\n    }\n\n    /**\n     * Hosting Perspective\n     *\n     * Create a WebWorker API that loads perspective in `init` and extends\n     * `post` using the worker's `postMessage` method.\n     *\n     * If Perspective is running inside a Web Worker, use the WebSorkerServer as\n     * default.\n     *\n     * @extends Server\n     * @private\n     */\n    class WebWorkerServer extends Server {\n        /**\n         * On initialization, listen for messages posted from the client and\n         * send it to `Server.process()`.\n         *\n         * @param perspective a reference to the Perspective module, allowing\n         * the `Server` to access Perspective methods.\n         */\n        constructor(perspective) {\n            super(perspective);\n            self.addEventListener(\"message\", e => this.process(e.data), false);\n        }\n\n        /**\n         * Implements the `Server`'s `post()` method using the Web Worker\n         * `postMessage()` API.\n         *\n         * @param {Object} msg a message to pass to the client\n         * @param {*} transfer a transferable object to pass to the client, if\n         * needed\n         */\n        post(msg, transfer) {\n            self.postMessage(msg, transfer);\n        }\n\n        /**\n         * When initialized, replace Perspective's internal `__MODULE` variable\n         * with the WASM binary.\n         *\n         * @param {ArrayBuffer} buffer an ArrayBuffer or Buffer containing the\n         * Perspective WASM code\n         */\n        init(msg) {\n            if (typeof WebAssembly === \"undefined\") {\n                throw new Error(\"WebAssembly not supported\");\n            } else {\n                __MODULE__({\n                    wasmBinary: msg.buffer,\n                    wasmJSMethod: \"native-wasm\"\n                }).then(mod => {\n                    __MODULE__ = mod;\n                    super.init(msg);\n                });\n            }\n        }\n    }\n\n    /**\n     * Use WebSorkerServer as default inside a Web Worker, where `window` is\n     * replaced with `self`.\n     */\n    if (typeof self !== \"undefined\" && self.addEventListener) {\n        new WebWorkerServer(perspective);\n    }\n\n    return perspective;\n}\n"],"file":"perspective.js"}