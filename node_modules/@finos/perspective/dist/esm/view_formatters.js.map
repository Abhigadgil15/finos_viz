{"version":3,"sources":["../../src/js/view_formatters.js"],"names":["jsonFormatter","initDataValue","initRowValue","initColumnValue","data","row","colName","setColumnValue","value","addColumnValue","unshift","addRow","push","formatData","slice","start","csvFormatter","Object","assign","split","join","delimiter","length","format","x","indexOf","replace","toString","columns","keys","csv","map","column","jsonTableFormatter","new_data"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nconst jsonFormatter = {\n    initDataValue: () => [],\n    initRowValue: () => ({}),\n    initColumnValue: (data, row, colName) => (row[colName] = []),\n    setColumnValue: (data, row, colName, value) => (row[colName] = value),\n    addColumnValue: (data, row, colName, value) => row[colName].unshift(value),\n    addRow: (data, row) => data.push(row),\n    formatData: data => data,\n    slice: (data, start) => data.slice(start)\n};\n\nconst csvFormatter = Object.assign({}, jsonFormatter, {\n    addColumnValue: (data, row, colName, value) => row[colName.split(\"|\").join(\",\")].unshift(value),\n    setColumnValue: (data, row, colName, value) => (row[colName.split(\"|\").join(\",\")] = value),\n    formatData: function(data, {delimiter = \",\"} = {}) {\n        if (data.length === 0) {\n            return \"\";\n        }\n\n        const format = function(x) {\n            if (x === null) {\n                return \"\";\n            }\n            switch (typeof x) {\n                case \"object\":\n                case \"string\":\n                    // CSV escapes with double double quotes, for real.\n                    // Section 2.7 of the fake\n                    // [CSV spec](https://tools.ietf.org/html/rfc4180)\n                    return x.indexOf(delimiter) > -1 ? `\"${x.replace(/\\\"/g, '\"\"')}\"` : x.toString();\n                case \"number\":\n                    return x;\n                case \"boolean\":\n                    return x.toString();\n            }\n        };\n\n        const columns = Object.keys(data[0]);\n        let csv = columns.map(format).join(delimiter);\n        for (let x = 0; x < data.length; x++) {\n            csv += \"\\r\\n\" + columns.map(column => format(data[x][column])).join(delimiter);\n        }\n\n        return csv;\n    }\n});\n\nconst jsonTableFormatter = {\n    initDataValue: () => new Object(),\n    initRowValue: () => {},\n    setColumnValue: (data, row, colName, value) => {\n        data[colName] = data[colName] || [];\n        data[colName].push(value);\n    },\n    addColumnValue: (data, row, colName, value) => {\n        data[colName] = data[colName] || [];\n        data[colName][data[colName].length - 1].unshift(value);\n    },\n    initColumnValue: (data, row, colName) => {\n        data[colName] = data[colName] || [];\n        data[colName].push([]);\n    },\n    addRow: () => {},\n    formatData: data => data,\n    slice: (data, start) => {\n        let new_data = {};\n        for (let x in data) {\n            new_data[x] = data[x].slice(start);\n        }\n        return new_data;\n    }\n};\n\nexport default {\n    jsonFormatter,\n    jsonTableFormatter,\n    csvFormatter\n};\n"],"file":"view_formatters.js"}