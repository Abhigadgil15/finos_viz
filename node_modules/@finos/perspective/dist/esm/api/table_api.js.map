{"version":3,"sources":["../../../src/js/api/table_api.js"],"names":["unsubscribe","subscribe","async_queue","view","bindall","table","worker","data","options","Promise","resolve","reject","_worker","_name","name","Math","random","to_arrow","post","cmd","args","then","arrow","on_update","updated","update","delta","mode","_initialized","_features","wait_for_response","prototype","type","proxy_table","config","get_index","get_limit","make_port","remove_port","schema","validate_expressions","is_valid_filter","size","columns","clear","replace","delete","on_delete","remove","remove_delete","method","execute","f","toString"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {unsubscribe, subscribe, async_queue} from \"./dispatch.js\";\nimport {view} from \"./view_api.js\";\nimport {bindall} from \"../utils.js\";\n\n/**\n * Construct a proxy for the table object by creating a \"table\" message and\n * sending it through the worker.\n *\n * @param {*} worker\n * @param {*} data\n * @param {*} options\n */\nexport function table(worker, data, options) {\n    return new Promise((resolve, reject) => {\n        this._worker = worker;\n        this._name = options.name || Math.random() + \"\";\n\n        bindall(this);\n\n        if (data.to_arrow) {\n            this._worker.post({\n                cmd: \"table\",\n                name: this._name,\n                args: [],\n                options: options || {}\n            });\n            data.to_arrow().then(arrow => {\n                this._worker.post(\n                    {\n                        cmd: \"table\",\n                        name: this._name,\n                        args: [arrow],\n                        options: options || {}\n                    },\n                    () => {\n                        data.on_update(\n                            updated => {\n                                this.update(updated.delta);\n                            },\n                            {mode: \"row\"}\n                        );\n                        resolve(this);\n                    },\n                    reject\n                );\n            });\n        } else {\n            this._worker.post(\n                {\n                    cmd: \"table\",\n                    name: this._name,\n                    args: [data],\n                    options: options || {}\n                },\n                () => {\n                    resolve(this);\n                },\n                reject\n            );\n        }\n\n        if (this._worker._initialized === true && !this._worker._features?.wait_for_response) {\n            resolve(this);\n        }\n    });\n}\n\ntable.prototype.type = \"table\";\n\n/**\n * Create a reference to a Perspective table at `worker` for use by remote\n * clients.\n *\n * @param {worker} worker the Web Worker at which the table is located.\n * @param {String} name a unique name for the table.\n */\nexport function proxy_table(worker, name) {\n    this._worker = worker;\n    this._name = name;\n}\n\nproxy_table.prototype = table.prototype;\n\n// Dispatch table methods that create new objects to the worker\ntable.prototype.view = function(config) {\n    return new view(this._worker, this._name, config);\n};\n\n// Dispatch table methods that do not create new objects (getters, setters etc.)\n// to the queue for processing.\ntable.prototype.get_index = async_queue(\"get_index\", \"table_method\");\n\ntable.prototype.get_limit = async_queue(\"get_limit\", \"table_method\");\n\ntable.prototype.make_port = async_queue(\"make_port\", \"table_method\");\n\ntable.prototype.remove_port = async_queue(\"remove_port\", \"table_method\");\n\ntable.prototype.schema = async_queue(\"schema\", \"table_method\");\n\ntable.prototype.validate_expressions = async_queue(\"validate_expressions\", \"table_method\");\n\ntable.prototype.is_valid_filter = async_queue(\"is_valid_filter\", \"table_method\");\n\ntable.prototype.size = async_queue(\"size\", \"table_method\");\n\ntable.prototype.columns = async_queue(\"columns\", \"table_method\");\n\ntable.prototype.clear = async_queue(\"clear\", \"table_method\");\n\ntable.prototype.replace = async_queue(\"replace\", \"table_method\");\n\ntable.prototype.delete = async_queue(\"delete\", \"table_method\");\n\ntable.prototype.on_delete = subscribe(\"on_delete\", \"table_method\", true);\n\ntable.prototype.remove = async_queue(\"remove\", \"table_method\");\n\ntable.prototype.remove_delete = unsubscribe(\"remove_delete\", \"table_method\", true);\n\ntable.prototype.update = function(data, options) {\n    return new Promise((resolve, reject) => {\n        this._worker.post(\n            {\n                name: this._name,\n                cmd: \"table_method\",\n                method: \"update\",\n                args: [data, options || {}]\n            },\n            resolve,\n            reject,\n            false\n        );\n    });\n};\n\ntable.prototype.execute = function(f) {\n    this._worker.post({\n        cmd: \"table_execute\",\n        name: this._name,\n        f: f.toString()\n    });\n};\n"],"file":"table_api.js"}