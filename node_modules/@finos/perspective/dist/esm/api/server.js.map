{"version":3,"sources":["../../../src/js/api/server.js"],"names":["override_config","error_to_json","error","obj","Object","getOwnPropertyNames","forEach","key","Server","constructor","perspective","_tables","_views","_callback_cache","Map","init","msg","config","data","post","Error","process","client_id","cmd","initialize_profile_thread","id","memory_usage","args","name","msgs","table","options","then","catch","process_error","g","eval","tbl","f","process_method_call","tableMsgQueue","table_name","Array","isArray","push","view_name","view","process_subscribe","callback","method","slice","ev","result","delta","e","console","remove_method","substring","callback_id","set","get","delete","JSON","stringify","message","subscribe","apply","Promise","process_method_call_response","clear_views","keys","debug","length"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {override_config} from \"../config\";\n\nfunction error_to_json(error) {\n    const obj = {};\n    if (typeof error !== \"string\") {\n        Object.getOwnPropertyNames(error).forEach(key => {\n            obj[key] = error[key];\n        }, error);\n    } else {\n        obj[\"message\"] = error;\n    }\n    return obj;\n}\n\n/**\n * The base class for Perspective's async API. It initializes and keeps track of\n * tables, views, and processes messages from the user into the Perspective\n * engine.\n *\n * Child classes must implement the `post()` interface, which defines how the\n * server sends messages to the client. The implementation of `Server` for\n * Web Workers can be found in `perspective.js`, and an implementation for\n * Node.JS can be found in `perspective.node.js`.\n */\nexport class Server {\n    constructor(perspective) {\n        this.perspective = perspective;\n        this._tables = {};\n        this._views = {};\n        this._callback_cache = new Map();\n    }\n\n    /**\n     * Return an initialization message to the client for confirmation.\n     * `Server` must be extended and the `post` method implemented before the\n     * server can successfully be initialized.\n     */\n    init(msg) {\n        if (msg.config) {\n            override_config(msg.config);\n        }\n\n        // The client will wait for a response message on table() and\n        // view(). If this flag is not set, the table() and view()\n        // constructors will resolve automatically and errors from the\n        // server will not be caught in those constructors. This allows\n        // for backwards compatibility between newer frontends (those\n        // with async table/view constructors) and older servers (which\n        // do not send the response message to the client).\n        msg.data = [\"wait_for_response\"];\n\n        this.post(msg);\n    }\n\n    /**\n     * Send a message from the Perspective server to the Perspective client -\n     * this method must be implemented before the server can be used.\n     *\n     * @param {Object} msg a message to be sent to the client.\n     */\n    post(msg) {\n        throw new Error(`Posting ${msg} failed - post() not implemented!`);\n    }\n\n    /**\n     * Given a message, execute its instructions. This method is the dispatcher\n     * for all Perspective actions, including table/view creation, deletion, and\n     * all method calls to/from the table and view.\n     *\n     * @param {*} msg an Object containing `cmd` (a String instruction) and\n     * associated data for that instruction\n     * @param {*} client_id\n     */\n    process(msg, client_id) {\n        switch (msg.cmd) {\n            case \"init_profile_thread\":\n                this.perspective.initialize_profile_thread();\n                break;\n            case \"memory_usage\":\n                this.post({\n                    id: msg.id,\n                    data: this.perspective.memory_usage()\n                });\n                break;\n            case \"init\":\n                this.init(msg);\n                break;\n            case \"table\":\n                if (typeof msg.args[0] === \"undefined\") {\n                    // Cache messages for when a table is created but not fully\n                    // initialized, i.e. in the case when a table is created\n                    // from a view, as the view needs to be serialized to an\n                    // arrow before the table will be ready.\n                    this._tables[msg.name] = [];\n                } else {\n                    try {\n                        const msgs = this._tables[msg.name];\n                        const table = this.perspective.table(msg.args[0], msg.options);\n\n                        // When using the Node server, the `table()` constructor\n                        // returns a Promise, but in the Web Worker version,\n                        // table() synchronously returns an instance of a Table.\n                        if (table && table.then) {\n                            table\n                                .then(table => {\n                                    this._tables[msg.name] = table;\n\n                                    // Process cached messages for this table.\n                                    if (msgs) {\n                                        for (const msg of msgs) {\n                                            this.process(msg);\n                                        }\n                                    }\n\n                                    // Resolve the promise to return a Table.\n                                    this.post({\n                                        id: msg.id,\n                                        data: msg.name\n                                    });\n                                })\n                                .catch(error => this.process_error(msg, error));\n                        } else {\n                            this._tables[msg.name] = table;\n\n                            // Process cached messages for this table.\n                            if (msgs) {\n                                for (const msg of msgs) {\n                                    this.process(msg);\n                                }\n                            }\n\n                            // Resolve the promise to return a Table.\n                            this.post({\n                                id: msg.id,\n                                data: msg.name\n                            });\n                        }\n                    } catch (error) {\n                        this.process_error(msg, error);\n                        return;\n                    }\n                }\n                break;\n            case \"table_generate\":\n                let g;\n                eval(\"g = \" + msg.args);\n                g(function(tbl) {\n                    this._tables[msg.name] = tbl;\n                    this.post({\n                        id: msg.id,\n                        data: \"created!\"\n                    });\n                });\n                break;\n            case \"table_execute\":\n                let f;\n                eval(\"f = \" + msg.f);\n                f(this._tables[msg.name]);\n                break;\n            case \"table_method\":\n            case \"view_method\":\n                this.process_method_call(msg);\n                break;\n            case \"view\":\n                const tableMsgQueue = this._tables[msg.table_name];\n\n                if (tableMsgQueue && Array.isArray(tableMsgQueue)) {\n                    // If the table is not initialized, defer this message for\n                    // until after the table is initialized, and create a new\n                    // message queue for the uninitialized view.\n                    tableMsgQueue.push(msg);\n                    this._views[msg.view_name] = [];\n                } else {\n                    // Create a new view and resolve the Promise on the client\n                    // with the name of the view, which the client will use to\n                    // construct a new view proxy.\n                    try {\n                        const msgs = this._views[msg.view_name];\n\n                        // When using the Node server, the `view()` constructor\n                        // returns a Promise, but in the Web Worker version,\n                        // view() synchronously returns an instance of a View.\n                        const view = this._tables[msg.table_name].view(msg.config);\n\n                        if (view && view.then) {\n                            view.then(view => {\n                                this._views[msg.view_name] = view;\n                                this._views[msg.view_name].client_id = client_id;\n\n                                // Process cached messages for the view.\n                                if (msgs) {\n                                    for (const msg of msgs) {\n                                        this.process(msg);\n                                    }\n                                }\n\n                                this.post({\n                                    id: msg.id,\n                                    data: msg.view_name\n                                });\n                            }).catch(error => this.process_error(msg, error));\n                        } else {\n                            this._views[msg.view_name] = view;\n                            this._views[msg.view_name].client_id = client_id;\n\n                            // Process cached messages for the view.\n                            if (msgs) {\n                                for (const msg of msgs) {\n                                    this.process(msg);\n                                }\n                            }\n\n                            this.post({\n                                id: msg.id,\n                                data: msg.view_name\n                            });\n                        }\n                    } catch (error) {\n                        this.process_error(msg, error);\n                        return;\n                    }\n                }\n                break;\n        }\n    }\n\n    /**\n     * Execute a subscription to a Perspective event, such as `on_update` or\n     * `on_delete`.\n     */\n    process_subscribe(msg, obj) {\n        try {\n            let callback;\n            if (msg.method.slice(0, 2) === \"on\") {\n                callback = ev => {\n                    let result = {\n                        id: msg.id,\n                        data: ev\n                    };\n                    try {\n                        // post transferable data for arrow\n                        if (msg.args && msg.args[0]) {\n                            if (msg.method === \"on_update\" && msg.args[0][\"mode\"] === \"row\") {\n                                // actual arrow is in the `delta`\n                                this.post(result, [ev.delta]);\n                                return;\n                            }\n                        }\n\n                        this.post(result);\n                    } catch (e) {\n                        console.error(`Removing failed callback to \\`${msg.method}()\\` (presumably due to failed connection)`);\n                        const remove_method = msg.method.substring(3);\n                        obj[`remove_${remove_method}`](callback);\n                    }\n                };\n                if (msg.callback_id) {\n                    this._callback_cache.set(msg.callback_id, callback);\n                }\n            } else if (msg.callback_id) {\n                callback = this._callback_cache.get(msg.callback_id);\n                this._callback_cache.delete(msg.callback_id);\n            }\n            if (callback) {\n                obj[msg.method](callback, ...msg.args);\n            } else {\n                console.error(`Callback not found for remote call \"${JSON.stringify(msg)}\"`);\n            }\n        } catch (error) {\n            this.process_error(msg, error);\n            return;\n        }\n    }\n\n    /**\n     * Given a message that calls a table or view method, call the method and\n     * return the result to the client, or return an error message to the\n     * client.\n     *\n     * @param {Object} msg\n     */\n    process_method_call(msg) {\n        let obj, result;\n        const name = msg.view_name || msg.name;\n        msg.cmd === \"table_method\" ? (obj = this._tables[name]) : (obj = this._views[name]);\n\n        if (!obj && msg.cmd === \"view_method\") {\n            // cannot have a host without a table, but can have a host without a\n            // view\n            this.process_error(msg, {message: \"View method cancelled\"});\n            return;\n        }\n\n        if (obj && obj.push) {\n            obj.push(msg);\n            return;\n        }\n\n        try {\n            if (msg.subscribe) {\n                this.process_subscribe(msg, obj);\n                return;\n            } else {\n                result = obj[msg.method].apply(obj, msg.args);\n                if (result instanceof Promise) {\n                    result.then(result => this.process_method_call_response(msg, result)).catch(error => this.process_error(msg, error));\n                } else {\n                    this.process_method_call_response(msg, result);\n                }\n            }\n        } catch (error) {\n            this.process_error(msg, error);\n            return;\n        }\n    }\n\n    /**\n     * Send the response from a method call back to the client, using\n     * transferables if the response is an Arrow binary.\n     * @param {Object} msg\n     * @param {*} result\n     */\n    process_method_call_response(msg, result) {\n        if (msg.method === \"delete\") {\n            delete this._views[msg.name];\n        }\n        if (msg.method === \"to_arrow\") {\n            this.post(\n                {\n                    id: msg.id,\n                    data: result\n                },\n                [result]\n            );\n        } else {\n            this.post({\n                id: msg.id,\n                data: result\n            });\n        }\n    }\n\n    /**\n     * Send an error to the client.\n     */\n    process_error(msg, error) {\n        this.post({\n            id: msg.id,\n            error: error_to_json(error)\n        });\n    }\n\n    /**\n     * Garbage collect un-needed views.\n     */\n    clear_views(client_id) {\n        for (let key of Object.keys(this._views)) {\n            if (this._views[key].client_id === client_id) {\n                try {\n                    this._views[key].delete();\n                } catch (e) {\n                    console.error(e);\n                }\n                delete this._views[key];\n            }\n        }\n        console.debug(`GC ${Object.keys(this._views).length} views in memory`);\n    }\n}\n"],"file":"server.js"}