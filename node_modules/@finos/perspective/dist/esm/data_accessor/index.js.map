{"version":3,"sources":["../../../src/js/data_accessor/index.js"],"names":["get_column_type","get_type_config","DataAccessor","constructor","data_formats","row","column","schema","format","undefined","data","names","types","row_count","is_format","Array","isArray","Object","keys","JSON","stringify","count_rows","length","get_format","get","column_name","row_index","value","d","hasOwnProperty","marshal","column_index","type","val","clean_data","Number","toLowerCase","clean","init","overridden_types","name","new_type","console","debug"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2018, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {get_column_type} from \"../utils.js\";\nimport {get_type_config} from \"../config/index.js\";\n\nexport class DataAccessor {\n    constructor() {\n        this.data_formats = {\n            row: 0,\n            column: 1,\n            schema: 2\n        };\n        this.format = undefined;\n        this.data = undefined;\n        this.names = undefined;\n        this.types = undefined;\n        this.row_count = undefined;\n    }\n\n    is_format(data) {\n        if (Array.isArray(data)) {\n            return this.data_formats.row;\n        } else if (Array.isArray(data[Object.keys(data)[0]])) {\n            return this.data_formats.column;\n        } else if (typeof data[Object.keys(data)[0]] === \"string\" || typeof data[Object.keys(data)[0]] === \"function\") {\n            return this.data_formats.schema;\n        } else {\n            throw `Could not determine data format for ${JSON.stringify(data)}, with JS typeof ${typeof data}`;\n        }\n    }\n\n    count_rows(data) {\n        if (this.format === this.data_formats.row) {\n            return data.length;\n        } else if (this.format === this.data_formats.column) {\n            return data[Object.keys(data)[0]].length;\n        } else {\n            return 0;\n        }\n    }\n\n    get_format() {\n        return this.format;\n    }\n\n    get(column_name, row_index) {\n        let value = undefined;\n\n        if (this.format === this.data_formats.row) {\n            let d = this.data[row_index];\n            if (d.hasOwnProperty(column_name)) {\n                value = d[column_name];\n            }\n        } else if (this.format === this.data_formats.column) {\n            if (this.data.hasOwnProperty(column_name)) {\n                value = this.data[column_name][row_index];\n            }\n        } else if (this.format === this.data_formats.schema) {\n            value = undefined;\n        } else {\n            throw `Could not get() from dataset - ${this.data} is poorly formatted.`;\n        }\n\n        return value;\n    }\n\n    marshal(column_index, row_index, type) {\n        const column_name = this.names[column_index];\n        let val = clean_data(this.get(column_name, row_index));\n\n        if (val === null) {\n            return null;\n        }\n\n        if (typeof val === \"undefined\") {\n            return undefined;\n        }\n\n        switch (get_column_type(type.value)) {\n            case \"float\":\n            case \"integer\": {\n                val = Number(val);\n                break;\n            }\n            case \"boolean\": {\n                if (typeof val === \"string\") {\n                    val.toLowerCase() === \"true\" ? (val = true) : (val = false);\n                } else {\n                    val = !!val;\n                }\n                break;\n            }\n            case \"datetime\":\n            case \"date\": {\n                break;\n            }\n            default: {\n                val += \"\"; // TODO this is not right - might not be a string.  Need a data cleaner\n            }\n        }\n\n        return val;\n    }\n\n    /**\n     * Resets the internal state of the accessor, preventing collisions with\n     * previously set data.\n     *\n     * @private\n     */\n    clean() {\n        this.names = undefined;\n        this.types = undefined;\n    }\n\n    /**\n     * Links the accessor to a package of data for processing, calculating its\n     * format and size.\n     *\n     * @private\n     * @param {object} data\n     *\n     * @returns An object with 5 properties:\n     *    cdata - an array of columnar data.\n     *    names - the column names.\n     *    types - the column t_dtypes.\n     *    row_count - the number of rows per column.\n     *    is_arrow - an internal flag marking arrow-formatted data\n     */\n    init(data) {\n        this.data = data;\n        this.format = this.is_format(this.data);\n        this.row_count = this.count_rows(this.data);\n        const overridden_types = {};\n        if (this.format === this.data_formats.row) {\n            if (data.length > 0) {\n                this.names = Object.keys(data[0]);\n            } else {\n                this.clean.names = [];\n            }\n        } else if (this.format === this.data_formats.column) {\n            this.names = Object.keys(data);\n        } else if (this.format === this.data_formats.schema) {\n            this.names = Object.keys(data);\n            for (const name of this.names) {\n                const new_type = get_type_config(data[name]);\n                if (new_type.type) {\n                    console.debug(`Converting \"${data[name]}\" to \"${new_type.type}\"`);\n                    overridden_types[name] = data[name];\n                    data[name] = new_type.type;\n                }\n            }\n        } else {\n            throw `Could not initialize - failed to determine format for ${data}`;\n        }\n        return overridden_types;\n    }\n}\n\n/**\n * Coerce string null into value null.\n * @private\n * @param {*} value\n */\nexport function clean_data(value) {\n    if (value === null || value === \"null\") {\n        return null;\n    } else if (value === undefined || value === \"undefined\") {\n        return undefined;\n    } else {\n        return value;\n    }\n}\n"],"file":"index.js"}